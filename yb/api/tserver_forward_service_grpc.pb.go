// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TabletServerForwardServiceClient is the client API for TabletServerForwardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TabletServerForwardServiceClient interface {
	Write(ctx context.Context, in *WriteRequestPB, opts ...grpc.CallOption) (*WriteResponsePB, error)
	Read(ctx context.Context, in *ReadRequestPB, opts ...grpc.CallOption) (*ReadResponsePB, error)
}

type tabletServerForwardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTabletServerForwardServiceClient(cc grpc.ClientConnInterface) TabletServerForwardServiceClient {
	return &tabletServerForwardServiceClient{cc}
}

func (c *tabletServerForwardServiceClient) Write(ctx context.Context, in *WriteRequestPB, opts ...grpc.CallOption) (*WriteResponsePB, error) {
	out := new(WriteResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerForwardService/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerForwardServiceClient) Read(ctx context.Context, in *ReadRequestPB, opts ...grpc.CallOption) (*ReadResponsePB, error) {
	out := new(ReadResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerForwardService/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TabletServerForwardServiceServer is the server API for TabletServerForwardService service.
// All implementations should embed UnimplementedTabletServerForwardServiceServer
// for forward compatibility
type TabletServerForwardServiceServer interface {
	Write(context.Context, *WriteRequestPB) (*WriteResponsePB, error)
	Read(context.Context, *ReadRequestPB) (*ReadResponsePB, error)
}

// UnimplementedTabletServerForwardServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTabletServerForwardServiceServer struct {
}

func (UnimplementedTabletServerForwardServiceServer) Write(context.Context, *WriteRequestPB) (*WriteResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedTabletServerForwardServiceServer) Read(context.Context, *ReadRequestPB) (*ReadResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Read not implemented")
}

// UnsafeTabletServerForwardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TabletServerForwardServiceServer will
// result in compilation errors.
type UnsafeTabletServerForwardServiceServer interface {
	mustEmbedUnimplementedTabletServerForwardServiceServer()
}

func RegisterTabletServerForwardServiceServer(s grpc.ServiceRegistrar, srv TabletServerForwardServiceServer) {
	s.RegisterService(&TabletServerForwardService_ServiceDesc, srv)
}

func _TabletServerForwardService_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerForwardServiceServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerForwardService/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerForwardServiceServer).Write(ctx, req.(*WriteRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerForwardService_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerForwardServiceServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerForwardService/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerForwardServiceServer).Read(ctx, req.(*ReadRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// TabletServerForwardService_ServiceDesc is the grpc.ServiceDesc for TabletServerForwardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TabletServerForwardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.tserver.TabletServerForwardService",
	HandlerType: (*TabletServerForwardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _TabletServerForwardService_Write_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _TabletServerForwardService_Read_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/tserver/tserver_forward_service.proto",
}
