// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/master/master_heartbeat.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Common information sent with every request from the tablet server
// to the master.
type TSToMasterCommonPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The instance of the tablet server sending the heartbeat.
	TsInstance *NodeInstancePB `protobuf:"bytes,1,req,name=ts_instance,json=tsInstance" json:"ts_instance,omitempty"`
}

func (x *TSToMasterCommonPB) Reset() {
	*x = TSToMasterCommonPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSToMasterCommonPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSToMasterCommonPB) ProtoMessage() {}

func (x *TSToMasterCommonPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSToMasterCommonPB.ProtoReflect.Descriptor instead.
func (*TSToMasterCommonPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{0}
}

func (x *TSToMasterCommonPB) GetTsInstance() *NodeInstancePB {
	if x != nil {
		return x.TsInstance
	}
	return nil
}

type ReportedTabletPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId        []byte            `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	State           *RaftGroupStatePB `protobuf:"varint,2,opt,name=state,enum=yb.tablet.RaftGroupStatePB,def=999" json:"state,omitempty"`
	TabletDataState *TabletDataState  `protobuf:"varint,6,opt,name=tablet_data_state,json=tabletDataState,enum=yb.tablet.TabletDataState,def=999" json:"tablet_data_state,omitempty"`
	// The latest _committed_ consensus state.
	// This will be missing if the tablet is not in a RUNNING state
	// (i.e. if it is BOOTSTRAPPING).
	CommittedConsensusState *ConsensusStatePB `protobuf:"bytes,3,opt,name=committed_consensus_state,json=committedConsensusState" json:"committed_consensus_state,omitempty"`
	Error                   *AppStatusPB      `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	SchemaVersion           *uint32           `protobuf:"varint,5,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	// Replica is reporting that load balancer moves should be disabled
	ShouldDisableLbMove *bool  `protobuf:"varint,7,opt,name=should_disable_lb_move,json=shouldDisableLbMove" json:"should_disable_lb_move,omitempty"`
	FsDataDir           []byte `protobuf:"bytes,8,opt,name=fs_data_dir,json=fsDataDir" json:"fs_data_dir,omitempty"`
	// Is the tablet hidden.
	IsHidden *bool `protobuf:"varint,9,opt,name=is_hidden,json=isHidden" json:"is_hidden,omitempty"`
}

// Default values for ReportedTabletPB fields.
const (
	Default_ReportedTabletPB_State           = RaftGroupStatePB_UNKNOWN
	Default_ReportedTabletPB_TabletDataState = TabletDataState_TABLET_DATA_UNKNOWN
)

func (x *ReportedTabletPB) Reset() {
	*x = ReportedTabletPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportedTabletPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportedTabletPB) ProtoMessage() {}

func (x *ReportedTabletPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportedTabletPB.ProtoReflect.Descriptor instead.
func (*ReportedTabletPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{1}
}

func (x *ReportedTabletPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ReportedTabletPB) GetState() RaftGroupStatePB {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_ReportedTabletPB_State
}

func (x *ReportedTabletPB) GetTabletDataState() TabletDataState {
	if x != nil && x.TabletDataState != nil {
		return *x.TabletDataState
	}
	return Default_ReportedTabletPB_TabletDataState
}

func (x *ReportedTabletPB) GetCommittedConsensusState() *ConsensusStatePB {
	if x != nil {
		return x.CommittedConsensusState
	}
	return nil
}

func (x *ReportedTabletPB) GetError() *AppStatusPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReportedTabletPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *ReportedTabletPB) GetShouldDisableLbMove() bool {
	if x != nil && x.ShouldDisableLbMove != nil {
		return *x.ShouldDisableLbMove
	}
	return false
}

func (x *ReportedTabletPB) GetFsDataDir() []byte {
	if x != nil {
		return x.FsDataDir
	}
	return nil
}

func (x *ReportedTabletPB) GetIsHidden() bool {
	if x != nil && x.IsHidden != nil {
		return *x.IsHidden
	}
	return false
}

// Sent by the tablet server to report the set of tablets hosted by that TS.
type TabletReportPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If false, then this is a full report, and any prior information about
	// tablets hosted by this server should be dropped.
	IsIncremental *bool `protobuf:"varint,1,req,name=is_incremental,json=isIncremental" json:"is_incremental,omitempty"`
	// Tablets for which to update information. If 'is_incremental' is false,
	// then this is the full set of tablets on the server, and any tablets
	// which the master is aware of but not listed in this protobuf should
	// be assumed to have been removed from this server.
	UpdatedTablets []*ReportedTabletPB `protobuf:"bytes,2,rep,name=updated_tablets,json=updatedTablets" json:"updated_tablets,omitempty"`
	// Tablet IDs which the tablet server has removed and should no longer be
	// considered hosted here. This will always be empty in a non-incremental
	// report.
	RemovedTabletIds [][]byte `protobuf:"bytes,3,rep,name=removed_tablet_ids,json=removedTabletIds" json:"removed_tablet_ids,omitempty"`
	// Every time the TS generates a tablet report, it creates a sequence
	// number. This can be useful in debugging, and also determining which
	// changes have not yet been reported to the master.
	// The first tablet report (non-incremental) is sequence number 0.
	SequenceNumber *int32 `protobuf:"varint,4,req,name=sequence_number,json=sequenceNumber" json:"sequence_number,omitempty"`
	// Number of tablets that could not be included in this heartbeat.
	// If 0, then all tablets have been reported to the master.
	RemainingTabletCount *int32 `protobuf:"varint,5,opt,name=remaining_tablet_count,json=remainingTabletCount" json:"remaining_tablet_count,omitempty"`
}

func (x *TabletReportPB) Reset() {
	*x = TabletReportPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletReportPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletReportPB) ProtoMessage() {}

func (x *TabletReportPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletReportPB.ProtoReflect.Descriptor instead.
func (*TabletReportPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{2}
}

func (x *TabletReportPB) GetIsIncremental() bool {
	if x != nil && x.IsIncremental != nil {
		return *x.IsIncremental
	}
	return false
}

func (x *TabletReportPB) GetUpdatedTablets() []*ReportedTabletPB {
	if x != nil {
		return x.UpdatedTablets
	}
	return nil
}

func (x *TabletReportPB) GetRemovedTabletIds() [][]byte {
	if x != nil {
		return x.RemovedTabletIds
	}
	return nil
}

func (x *TabletReportPB) GetSequenceNumber() int32 {
	if x != nil && x.SequenceNumber != nil {
		return *x.SequenceNumber
	}
	return 0
}

func (x *TabletReportPB) GetRemainingTabletCount() int32 {
	if x != nil && x.RemainingTabletCount != nil {
		return *x.RemainingTabletCount
	}
	return 0
}

type TabletForSplitPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId                  []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	OBSOLETESplitPartitionKey []byte `protobuf:"bytes,2,opt,name=OBSOLETE_split_partition_key,json=OBSOLETESplitPartitionKey" json:"OBSOLETE_split_partition_key,omitempty"`
	OBSOLETESplitEncodedKey   []byte `protobuf:"bytes,3,opt,name=OBSOLETE_split_encoded_key,json=OBSOLETESplitEncodedKey" json:"OBSOLETE_split_encoded_key,omitempty"`
}

func (x *TabletForSplitPB) Reset() {
	*x = TabletForSplitPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletForSplitPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletForSplitPB) ProtoMessage() {}

func (x *TabletForSplitPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletForSplitPB.ProtoReflect.Descriptor instead.
func (*TabletForSplitPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{3}
}

func (x *TabletForSplitPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletForSplitPB) GetOBSOLETESplitPartitionKey() []byte {
	if x != nil {
		return x.OBSOLETESplitPartitionKey
	}
	return nil
}

func (x *TabletForSplitPB) GetOBSOLETESplitEncodedKey() []byte {
	if x != nil {
		return x.OBSOLETESplitEncodedKey
	}
	return nil
}

type TabletDriveStorageMetadataPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId                     []byte  `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SstFileSize                  *uint64 `protobuf:"varint,2,opt,name=sst_file_size,json=sstFileSize" json:"sst_file_size,omitempty"`
	WalFileSize                  *uint64 `protobuf:"varint,3,opt,name=wal_file_size,json=walFileSize" json:"wal_file_size,omitempty"`
	UncompressedSstFileSize      *uint64 `protobuf:"varint,4,opt,name=uncompressed_sst_file_size,json=uncompressedSstFileSize" json:"uncompressed_sst_file_size,omitempty"`
	MayHaveOrphanedPostSplitData *bool   `protobuf:"varint,5,opt,name=may_have_orphaned_post_split_data,json=mayHaveOrphanedPostSplitData,def=1" json:"may_have_orphaned_post_split_data,omitempty"`
}

// Default values for TabletDriveStorageMetadataPB fields.
const (
	Default_TabletDriveStorageMetadataPB_MayHaveOrphanedPostSplitData = bool(true)
)

func (x *TabletDriveStorageMetadataPB) Reset() {
	*x = TabletDriveStorageMetadataPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletDriveStorageMetadataPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletDriveStorageMetadataPB) ProtoMessage() {}

func (x *TabletDriveStorageMetadataPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletDriveStorageMetadataPB.ProtoReflect.Descriptor instead.
func (*TabletDriveStorageMetadataPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{4}
}

func (x *TabletDriveStorageMetadataPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TabletDriveStorageMetadataPB) GetSstFileSize() uint64 {
	if x != nil && x.SstFileSize != nil {
		return *x.SstFileSize
	}
	return 0
}

func (x *TabletDriveStorageMetadataPB) GetWalFileSize() uint64 {
	if x != nil && x.WalFileSize != nil {
		return *x.WalFileSize
	}
	return 0
}

func (x *TabletDriveStorageMetadataPB) GetUncompressedSstFileSize() uint64 {
	if x != nil && x.UncompressedSstFileSize != nil {
		return *x.UncompressedSstFileSize
	}
	return 0
}

func (x *TabletDriveStorageMetadataPB) GetMayHaveOrphanedPostSplitData() bool {
	if x != nil && x.MayHaveOrphanedPostSplitData != nil {
		return *x.MayHaveOrphanedPostSplitData
	}
	return Default_TabletDriveStorageMetadataPB_MayHaveOrphanedPostSplitData
}

type ReportedTabletUpdatesPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte  `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	StateMsg *string `protobuf:"bytes,2,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
}

func (x *ReportedTabletUpdatesPB) Reset() {
	*x = ReportedTabletUpdatesPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReportedTabletUpdatesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReportedTabletUpdatesPB) ProtoMessage() {}

func (x *ReportedTabletUpdatesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReportedTabletUpdatesPB.ProtoReflect.Descriptor instead.
func (*ReportedTabletUpdatesPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{5}
}

func (x *ReportedTabletUpdatesPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ReportedTabletUpdatesPB) GetStateMsg() string {
	if x != nil && x.StateMsg != nil {
		return *x.StateMsg
	}
	return ""
}

// Sent by the Master in response to the TS tablet report (part of the heartbeats)
type TabletReportUpdatesPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tablets []*ReportedTabletUpdatesPB `protobuf:"bytes,1,rep,name=tablets" json:"tablets,omitempty"`
	// Returns true if the tablet report had to be truncated because master ran out of time.
	ProcessingTruncated *bool `protobuf:"varint,2,opt,name=processing_truncated,json=processingTruncated,def=0" json:"processing_truncated,omitempty"`
}

// Default values for TabletReportUpdatesPB fields.
const (
	Default_TabletReportUpdatesPB_ProcessingTruncated = bool(false)
)

func (x *TabletReportUpdatesPB) Reset() {
	*x = TabletReportUpdatesPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabletReportUpdatesPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabletReportUpdatesPB) ProtoMessage() {}

func (x *TabletReportUpdatesPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabletReportUpdatesPB.ProtoReflect.Descriptor instead.
func (*TabletReportUpdatesPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{6}
}

func (x *TabletReportUpdatesPB) GetTablets() []*ReportedTabletUpdatesPB {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *TabletReportUpdatesPB) GetProcessingTruncated() bool {
	if x != nil && x.ProcessingTruncated != nil {
		return *x.ProcessingTruncated
	}
	return Default_TabletReportUpdatesPB_ProcessingTruncated
}

type TSInformationPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registration    *TSRegistrationPB `protobuf:"bytes,1,req,name=registration" json:"registration,omitempty"`
	TserverInstance *NodeInstancePB   `protobuf:"bytes,2,req,name=tserver_instance,json=tserverInstance" json:"tserver_instance,omitempty"`
}

func (x *TSInformationPB) Reset() {
	*x = TSInformationPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSInformationPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSInformationPB) ProtoMessage() {}

func (x *TSInformationPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSInformationPB.ProtoReflect.Descriptor instead.
func (*TSInformationPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{7}
}

func (x *TSInformationPB) GetRegistration() *TSRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *TSInformationPB) GetTserverInstance() *NodeInstancePB {
	if x != nil {
		return x.TserverInstance
	}
	return nil
}

type TSSnapshotScheduleInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                     []byte  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	LastSnapshotHybridTime *uint64 `protobuf:"fixed64,2,opt,name=last_snapshot_hybrid_time,json=lastSnapshotHybridTime" json:"last_snapshot_hybrid_time,omitempty"`
}

func (x *TSSnapshotScheduleInfoPB) Reset() {
	*x = TSSnapshotScheduleInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSnapshotScheduleInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSnapshotScheduleInfoPB) ProtoMessage() {}

func (x *TSSnapshotScheduleInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSSnapshotScheduleInfoPB.ProtoReflect.Descriptor instead.
func (*TSSnapshotScheduleInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{8}
}

func (x *TSSnapshotScheduleInfoPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TSSnapshotScheduleInfoPB) GetLastSnapshotHybridTime() uint64 {
	if x != nil && x.LastSnapshotHybridTime != nil {
		return *x.LastSnapshotHybridTime
	}
	return 0
}

type TSSnapshotRestorationInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 16 bytes for UUID.
	Id             []byte  `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	CompleteTimeHt *uint64 `protobuf:"fixed64,2,opt,name=complete_time_ht,json=completeTimeHt" json:"complete_time_ht,omitempty"`
}

func (x *TSSnapshotRestorationInfoPB) Reset() {
	*x = TSSnapshotRestorationInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSnapshotRestorationInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSnapshotRestorationInfoPB) ProtoMessage() {}

func (x *TSSnapshotRestorationInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSSnapshotRestorationInfoPB.ProtoReflect.Descriptor instead.
func (*TSSnapshotRestorationInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{9}
}

func (x *TSSnapshotRestorationInfoPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *TSSnapshotRestorationInfoPB) GetCompleteTimeHt() uint64 {
	if x != nil && x.CompleteTimeHt != nil {
		return *x.CompleteTimeHt
	}
	return 0
}

type TSSnapshotsInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schedules []*TSSnapshotScheduleInfoPB `protobuf:"bytes,1,rep,name=schedules" json:"schedules,omitempty"`
	// Last restorations update hybrid time.
	LastRestorationsUpdateHt *uint64 `protobuf:"fixed64,2,opt,name=last_restorations_update_ht,json=lastRestorationsUpdateHt" json:"last_restorations_update_ht,omitempty"`
	// Restorations info.
	Restorations []*TSSnapshotRestorationInfoPB `protobuf:"bytes,3,rep,name=restorations" json:"restorations,omitempty"`
}

func (x *TSSnapshotsInfoPB) Reset() {
	*x = TSSnapshotsInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSSnapshotsInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSSnapshotsInfoPB) ProtoMessage() {}

func (x *TSSnapshotsInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSSnapshotsInfoPB.ProtoReflect.Descriptor instead.
func (*TSSnapshotsInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{10}
}

func (x *TSSnapshotsInfoPB) GetSchedules() []*TSSnapshotScheduleInfoPB {
	if x != nil {
		return x.Schedules
	}
	return nil
}

func (x *TSSnapshotsInfoPB) GetLastRestorationsUpdateHt() uint64 {
	if x != nil && x.LastRestorationsUpdateHt != nil {
		return *x.LastRestorationsUpdateHt
	}
	return 0
}

func (x *TSSnapshotsInfoPB) GetRestorations() []*TSSnapshotRestorationInfoPB {
	if x != nil {
		return x.Restorations
	}
	return nil
}

// Heartbeat sent from the tablet-server to the master
// to establish liveness and report back any status changes.
type TSHeartbeatRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *TSToMasterCommonPB `protobuf:"bytes,1,req,name=common" json:"common,omitempty"`
	// Sent upon start-up of the TS, or in response to 'needs_reregister' on a heartbeat
	// response.
	Registration *TSRegistrationPB `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	// Sent when the tablet information has changed, or in response to
	// 'needs_full_tablet_report'.
	TabletReport *TabletReportPB `protobuf:"bytes,3,opt,name=tablet_report,json=tabletReport" json:"tablet_report,omitempty"`
	// The number of tablets that are BOOTSTRAPPING or RUNNING.
	// Used by the master to determine load when creating new tablet replicas.
	NumLiveTablets *int32            `protobuf:"varint,4,opt,name=num_live_tablets,json=numLiveTablets" json:"num_live_tablets,omitempty"`
	ConfigIndex    *int64            `protobuf:"varint,5,opt,name=config_index,json=configIndex" json:"config_index,omitempty"`
	Metrics        *TServerMetricsPB `protobuf:"bytes,6,opt,name=metrics" json:"metrics,omitempty"`
	// Number of tablets for which this ts is a leader.
	LeaderCount          *int32 `protobuf:"varint,7,opt,name=leader_count,json=leaderCount" json:"leader_count,omitempty"`
	ClusterConfigVersion *int32 `protobuf:"varint,8,opt,name=cluster_config_version,json=clusterConfigVersion" json:"cluster_config_version,omitempty"`
	// List of candidate tablets for split based on tablet splitting strategy and settings.
	DEPRECATEDTabletsForSplit []*TabletForSplitPB `protobuf:"bytes,9,rep,name=DEPRECATED_tablets_for_split,json=DEPRECATEDTabletsForSplit" json:"DEPRECATED_tablets_for_split,omitempty"`
	// Physical time on tablet server
	TsPhysicalTime *uint64 `protobuf:"fixed64,10,opt,name=ts_physical_time,json=tsPhysicalTime" json:"ts_physical_time,omitempty"`
	// Hybrid time on tablet server
	TsHybridTime *uint64 `protobuf:"fixed64,11,opt,name=ts_hybrid_time,json=tsHybridTime" json:"ts_hybrid_time,omitempty"`
	// Roundtrip time for previous heartbeat in microseconds.
	RttUs           *int64                          `protobuf:"varint,12,opt,name=rtt_us,json=rttUs" json:"rtt_us,omitempty"`
	StorageMetadata []*TabletDriveStorageMetadataPB `protobuf:"bytes,14,rep,name=storage_metadata,json=storageMetadata" json:"storage_metadata,omitempty"`
}

func (x *TSHeartbeatRequestPB) Reset() {
	*x = TSHeartbeatRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSHeartbeatRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSHeartbeatRequestPB) ProtoMessage() {}

func (x *TSHeartbeatRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSHeartbeatRequestPB.ProtoReflect.Descriptor instead.
func (*TSHeartbeatRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{11}
}

func (x *TSHeartbeatRequestPB) GetCommon() *TSToMasterCommonPB {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetRegistration() *TSRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetTabletReport() *TabletReportPB {
	if x != nil {
		return x.TabletReport
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetNumLiveTablets() int32 {
	if x != nil && x.NumLiveTablets != nil {
		return *x.NumLiveTablets
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetConfigIndex() int64 {
	if x != nil && x.ConfigIndex != nil {
		return *x.ConfigIndex
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetMetrics() *TServerMetricsPB {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetLeaderCount() int32 {
	if x != nil && x.LeaderCount != nil {
		return *x.LeaderCount
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetClusterConfigVersion() int32 {
	if x != nil && x.ClusterConfigVersion != nil {
		return *x.ClusterConfigVersion
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetDEPRECATEDTabletsForSplit() []*TabletForSplitPB {
	if x != nil {
		return x.DEPRECATEDTabletsForSplit
	}
	return nil
}

func (x *TSHeartbeatRequestPB) GetTsPhysicalTime() uint64 {
	if x != nil && x.TsPhysicalTime != nil {
		return *x.TsPhysicalTime
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetTsHybridTime() uint64 {
	if x != nil && x.TsHybridTime != nil {
		return *x.TsHybridTime
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetRttUs() int64 {
	if x != nil && x.RttUs != nil {
		return *x.RttUs
	}
	return 0
}

func (x *TSHeartbeatRequestPB) GetStorageMetadata() []*TabletDriveStorageMetadataPB {
	if x != nil {
		return x.StorageMetadata
	}
	return nil
}

type TSHeartbeatResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error          *MasterErrorPB  `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MasterInstance *NodeInstancePB `protobuf:"bytes,2,opt,name=master_instance,json=masterInstance" json:"master_instance,omitempty"`
	// Indicates that the server which heartbeated needs to re-register
	// with the master -- i.e send a heartbeat with the 'registration'
	// filled in.
	NeedsReregister       *bool `protobuf:"varint,3,opt,name=needs_reregister,json=needsReregister,def=0" json:"needs_reregister,omitempty"`
	NeedsFullTabletReport *bool `protobuf:"varint,4,opt,name=needs_full_tablet_report,json=needsFullTabletReport,def=0" json:"needs_full_tablet_report,omitempty"`
	// Sent when the master receives a TabletReport
	TabletReport *TabletReportUpdatesPB `protobuf:"bytes,5,opt,name=tablet_report,json=tabletReport" json:"tablet_report,omitempty"`
	// Specify whether or not the node is the leader master.
	LeaderMaster *bool `protobuf:"varint,6,opt,name=leader_master,json=leaderMaster" json:"leader_master,omitempty"`
	// Piggyback the current config as known to the master leader.
	MasterConfig *RaftConfigPB `protobuf:"bytes,7,opt,name=master_config,json=masterConfig" json:"master_config,omitempty"`
	// List of all live nodes that the master knows about.
	Tservers []*TSInformationPB `protobuf:"bytes,8,rep,name=tservers" json:"tservers,omitempty"`
	// Cluster UUID. Sent by the master only after registration.
	ClusterUuid *string `protobuf:"bytes,9,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	// Current YSQL catalog schema version.
	// Used by tservers and postgres backends to decide if a cache refresh is needed.
	YsqlCatalogVersion                      *uint64                `protobuf:"varint,10,opt,name=ysql_catalog_version,json=ysqlCatalogVersion" json:"ysql_catalog_version,omitempty"`
	YsqlLastBreakingCatalogVersion          *uint64                `protobuf:"varint,15,opt,name=ysql_last_breaking_catalog_version,json=ysqlLastBreakingCatalogVersion" json:"ysql_last_breaking_catalog_version,omitempty"`
	UniverseKeyRegistry                     *UniverseKeyRegistryPB `protobuf:"bytes,11,opt,name=universe_key_registry,json=universeKeyRegistry" json:"universe_key_registry,omitempty"`
	ConsumerRegistry                        *ConsumerRegistryPB    `protobuf:"bytes,12,opt,name=consumer_registry,json=consumerRegistry" json:"consumer_registry,omitempty"`
	ClusterConfigVersion                    *int32                 `protobuf:"varint,13,opt,name=cluster_config_version,json=clusterConfigVersion" json:"cluster_config_version,omitempty"`
	TabletReportLimit                       *int32                 `protobuf:"varint,16,opt,name=tablet_report_limit,json=tabletReportLimit" json:"tablet_report_limit,omitempty"`
	SnapshotsInfo                           *TSSnapshotsInfoPB     `protobuf:"bytes,17,opt,name=snapshots_info,json=snapshotsInfo" json:"snapshots_info,omitempty"`
	DEPRECATEDTabletSplitSizeThresholdBytes *int64                 `protobuf:"varint,14,opt,name=DEPRECATED_tablet_split_size_threshold_bytes,json=DEPRECATEDTabletSplitSizeThresholdBytes" json:"DEPRECATED_tablet_split_size_threshold_bytes,omitempty"`
	// Version of transaction tables and their placements, so that the TS knows when
	// to update the cached list of status tablet ids in the transaction manager.
	TransactionTablesVersion *uint64 `protobuf:"varint,18,opt,name=transaction_tables_version,json=transactionTablesVersion" json:"transaction_tables_version,omitempty"`
}

// Default values for TSHeartbeatResponsePB fields.
const (
	Default_TSHeartbeatResponsePB_NeedsReregister       = bool(false)
	Default_TSHeartbeatResponsePB_NeedsFullTabletReport = bool(false)
)

func (x *TSHeartbeatResponsePB) Reset() {
	*x = TSHeartbeatResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_heartbeat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSHeartbeatResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSHeartbeatResponsePB) ProtoMessage() {}

func (x *TSHeartbeatResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_heartbeat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSHeartbeatResponsePB.ProtoReflect.Descriptor instead.
func (*TSHeartbeatResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_heartbeat_proto_rawDescGZIP(), []int{12}
}

func (x *TSHeartbeatResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetMasterInstance() *NodeInstancePB {
	if x != nil {
		return x.MasterInstance
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetNeedsReregister() bool {
	if x != nil && x.NeedsReregister != nil {
		return *x.NeedsReregister
	}
	return Default_TSHeartbeatResponsePB_NeedsReregister
}

func (x *TSHeartbeatResponsePB) GetNeedsFullTabletReport() bool {
	if x != nil && x.NeedsFullTabletReport != nil {
		return *x.NeedsFullTabletReport
	}
	return Default_TSHeartbeatResponsePB_NeedsFullTabletReport
}

func (x *TSHeartbeatResponsePB) GetTabletReport() *TabletReportUpdatesPB {
	if x != nil {
		return x.TabletReport
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetLeaderMaster() bool {
	if x != nil && x.LeaderMaster != nil {
		return *x.LeaderMaster
	}
	return false
}

func (x *TSHeartbeatResponsePB) GetMasterConfig() *RaftConfigPB {
	if x != nil {
		return x.MasterConfig
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetTservers() []*TSInformationPB {
	if x != nil {
		return x.Tservers
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetClusterUuid() string {
	if x != nil && x.ClusterUuid != nil {
		return *x.ClusterUuid
	}
	return ""
}

func (x *TSHeartbeatResponsePB) GetYsqlCatalogVersion() uint64 {
	if x != nil && x.YsqlCatalogVersion != nil {
		return *x.YsqlCatalogVersion
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetYsqlLastBreakingCatalogVersion() uint64 {
	if x != nil && x.YsqlLastBreakingCatalogVersion != nil {
		return *x.YsqlLastBreakingCatalogVersion
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetUniverseKeyRegistry() *UniverseKeyRegistryPB {
	if x != nil {
		return x.UniverseKeyRegistry
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetConsumerRegistry() *ConsumerRegistryPB {
	if x != nil {
		return x.ConsumerRegistry
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetClusterConfigVersion() int32 {
	if x != nil && x.ClusterConfigVersion != nil {
		return *x.ClusterConfigVersion
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetTabletReportLimit() int32 {
	if x != nil && x.TabletReportLimit != nil {
		return *x.TabletReportLimit
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetSnapshotsInfo() *TSSnapshotsInfoPB {
	if x != nil {
		return x.SnapshotsInfo
	}
	return nil
}

func (x *TSHeartbeatResponsePB) GetDEPRECATEDTabletSplitSizeThresholdBytes() int64 {
	if x != nil && x.DEPRECATEDTabletSplitSizeThresholdBytes != nil {
		return *x.DEPRECATEDTabletSplitSizeThresholdBytes
	}
	return 0
}

func (x *TSHeartbeatResponsePB) GetTransactionTablesVersion() uint64 {
	if x != nil && x.TransactionTablesVersion != nil {
		return *x.TransactionTablesVersion
	}
	return 0
}

var File_yb_master_master_heartbeat_proto protoreflect.FileDescriptor

var file_yb_master_master_heartbeat_proto_rawDesc = []byte{
	0x0a, 0x20, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x09, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x19, 0x79,
	0x62, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e,
	0x79, 0x62, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62,
	0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x72,
	0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x49, 0x0a, 0x12, 0x54, 0x53, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x33, 0x0a, 0x0b, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52,
	0x0a, 0x74, 0x73, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0xe4, 0x03, 0x0a, 0x10,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3a, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5b, 0x0a, 0x11, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x13, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x33, 0x0a, 0x16, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x64, 0x69, 0x73, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6c, 0x62, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x13, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x62, 0x4d, 0x6f, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x66, 0x73, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x64, 0x69, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x66, 0x73, 0x44, 0x61,
	0x74, 0x61, 0x44, 0x69, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x68, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x48, 0x69, 0x64, 0x64,
	0x65, 0x6e, 0x22, 0x8a, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x63, 0x72,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x49, 0x6e, 0x63, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x6c, 0x12, 0x44, 0x0a, 0x0f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x50, 0x42, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x10,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x73,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x02, 0x28, 0x05, 0x52, 0x0e, 0x73, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x72, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x69, 0x6e, 0x67, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22,
	0xad, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6c,
	0x69, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b,
	0x65, 0x79, 0x12, 0x3b, 0x0a, 0x1a, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x17, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45,
	0x53, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22,
	0x8f, 0x02, 0x0a, 0x1c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x72, 0x69, 0x76, 0x65, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x22, 0x0a,
	0x0d, 0x73, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x73, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x77, 0x61, 0x6c, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x77, 0x61, 0x6c, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x4d, 0x0a, 0x21, 0x6d, 0x61, 0x79, 0x5f, 0x68, 0x61, 0x76, 0x65, 0x5f, 0x6f,
	0x72, 0x70, 0x68, 0x61, 0x6e, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x73, 0x70, 0x6c,
	0x69, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74,
	0x72, 0x75, 0x65, 0x52, 0x1c, 0x6d, 0x61, 0x79, 0x48, 0x61, 0x76, 0x65, 0x4f, 0x72, 0x70, 0x68,
	0x61, 0x6e, 0x65, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x53, 0x0a, 0x17, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x22, 0x8f, 0x01, 0x0a, 0x15, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42,
	0x12, 0x3c, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x73, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x38,
	0x0a, 0x14, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x54,
	0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x54, 0x53, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x3f, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54,
	0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52,
	0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x10, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x22, 0x65, 0x0a, 0x18,
	0x54, 0x53, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x39, 0x0a, 0x19, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x16, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0x57, 0x0a, 0x1b, 0x54, 0x53, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x48, 0x74, 0x22, 0xe1, 0x01, 0x0a,
	0x11, 0x54, 0x53, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x12, 0x41, 0x0a, 0x09, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x53, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x1b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x5f, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x18, 0x6c, 0x61, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x48, 0x74, 0x12, 0x4a, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x22, 0xca, 0x05, 0x0a, 0x14, 0x54, 0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x06, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x54, 0x6f, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x54, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x50, 0x42, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x28, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x5f, 0x6c, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x6e, 0x75, 0x6d,
	0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x35,
	0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5c,
	0x0a, 0x1c, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x50,
	0x42, 0x52, 0x19, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x12, 0x28, 0x0a, 0x10,
	0x74, 0x73, 0x5f, 0x70, 0x68, 0x79, 0x73, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x74, 0x73, 0x50, 0x68, 0x79, 0x73, 0x69, 0x63,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x74, 0x73, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c,
	0x74, 0x73, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06,
	0x72, 0x74, 0x74, 0x5f, 0x75, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x72, 0x74,
	0x74, 0x55, 0x73, 0x12, 0x52, 0x0a, 0x10, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x44, 0x72, 0x69, 0x76, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4a, 0x04, 0x08, 0x0d, 0x10, 0x0e, 0x22, 0xe7, 0x08,
	0x0a, 0x15, 0x54, 0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3b, 0x0a, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x42, 0x52, 0x0e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x12, 0x30, 0x0a, 0x10, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f, 0x72, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x52, 0x65, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x18, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x5f,
	0x66, 0x75, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x72, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x15, 0x6e, 0x65, 0x65, 0x64, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x50, 0x42, 0x52,
	0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x23, 0x0a,
	0x0d, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x12, 0x3f, 0x0a, 0x0d, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x42, 0x52, 0x0c, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x54, 0x53, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x42, 0x52, 0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x30,
	0x0a, 0x14, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x12, 0x79, 0x73,
	0x71, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x4a, 0x0a, 0x22, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x62, 0x72,
	0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x1e, 0x79, 0x73,
	0x71, 0x6c, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x69, 0x6e, 0x67, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x58, 0x0a, 0x15,
	0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x79, 0x62,
	0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x55, 0x6e, 0x69, 0x76,
	0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x52, 0x13, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d,
	0x65, 0x72, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x10, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x12,
	0x34, 0x0a, 0x16, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x14, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x11, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x43, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f,
	0x74, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x53, 0x6e, 0x61, 0x70,
	0x73, 0x68, 0x6f, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0d, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x5d, 0x0a, 0x2c, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x27, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73,
	0x68, 0x6f, 0x6c, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x18, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x32, 0x80, 0x01, 0x0a, 0x0f, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x50, 0x0a, 0x0b, 0x54,
	0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x1a, 0x1b, 0xda,
	0xb5, 0x18, 0x17, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72,
	0x67, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
}

var (
	file_yb_master_master_heartbeat_proto_rawDescOnce sync.Once
	file_yb_master_master_heartbeat_proto_rawDescData = file_yb_master_master_heartbeat_proto_rawDesc
)

func file_yb_master_master_heartbeat_proto_rawDescGZIP() []byte {
	file_yb_master_master_heartbeat_proto_rawDescOnce.Do(func() {
		file_yb_master_master_heartbeat_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_master_master_heartbeat_proto_rawDescData)
	})
	return file_yb_master_master_heartbeat_proto_rawDescData
}

var file_yb_master_master_heartbeat_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_yb_master_master_heartbeat_proto_goTypes = []interface{}{
	(*TSToMasterCommonPB)(nil),           // 0: yb.master.TSToMasterCommonPB
	(*ReportedTabletPB)(nil),             // 1: yb.master.ReportedTabletPB
	(*TabletReportPB)(nil),               // 2: yb.master.TabletReportPB
	(*TabletForSplitPB)(nil),             // 3: yb.master.TabletForSplitPB
	(*TabletDriveStorageMetadataPB)(nil), // 4: yb.master.TabletDriveStorageMetadataPB
	(*ReportedTabletUpdatesPB)(nil),      // 5: yb.master.ReportedTabletUpdatesPB
	(*TabletReportUpdatesPB)(nil),        // 6: yb.master.TabletReportUpdatesPB
	(*TSInformationPB)(nil),              // 7: yb.master.TSInformationPB
	(*TSSnapshotScheduleInfoPB)(nil),     // 8: yb.master.TSSnapshotScheduleInfoPB
	(*TSSnapshotRestorationInfoPB)(nil),  // 9: yb.master.TSSnapshotRestorationInfoPB
	(*TSSnapshotsInfoPB)(nil),            // 10: yb.master.TSSnapshotsInfoPB
	(*TSHeartbeatRequestPB)(nil),         // 11: yb.master.TSHeartbeatRequestPB
	(*TSHeartbeatResponsePB)(nil),        // 12: yb.master.TSHeartbeatResponsePB
	(*NodeInstancePB)(nil),               // 13: yb.NodeInstancePB
	(RaftGroupStatePB)(0),                // 14: yb.tablet.RaftGroupStatePB
	(TabletDataState)(0),                 // 15: yb.tablet.TabletDataState
	(*ConsensusStatePB)(nil),             // 16: yb.consensus.ConsensusStatePB
	(*AppStatusPB)(nil),                  // 17: yb.AppStatusPB
	(*TSRegistrationPB)(nil),             // 18: yb.master.TSRegistrationPB
	(*TServerMetricsPB)(nil),             // 19: yb.master.TServerMetricsPB
	(*MasterErrorPB)(nil),                // 20: yb.master.MasterErrorPB
	(*RaftConfigPB)(nil),                 // 21: yb.consensus.RaftConfigPB
	(*UniverseKeyRegistryPB)(nil),        // 22: yb.encryption.UniverseKeyRegistryPB
	(*ConsumerRegistryPB)(nil),           // 23: yb.cdc.ConsumerRegistryPB
}
var file_yb_master_master_heartbeat_proto_depIdxs = []int32{
	13, // 0: yb.master.TSToMasterCommonPB.ts_instance:type_name -> yb.NodeInstancePB
	14, // 1: yb.master.ReportedTabletPB.state:type_name -> yb.tablet.RaftGroupStatePB
	15, // 2: yb.master.ReportedTabletPB.tablet_data_state:type_name -> yb.tablet.TabletDataState
	16, // 3: yb.master.ReportedTabletPB.committed_consensus_state:type_name -> yb.consensus.ConsensusStatePB
	17, // 4: yb.master.ReportedTabletPB.error:type_name -> yb.AppStatusPB
	1,  // 5: yb.master.TabletReportPB.updated_tablets:type_name -> yb.master.ReportedTabletPB
	5,  // 6: yb.master.TabletReportUpdatesPB.tablets:type_name -> yb.master.ReportedTabletUpdatesPB
	18, // 7: yb.master.TSInformationPB.registration:type_name -> yb.master.TSRegistrationPB
	13, // 8: yb.master.TSInformationPB.tserver_instance:type_name -> yb.NodeInstancePB
	8,  // 9: yb.master.TSSnapshotsInfoPB.schedules:type_name -> yb.master.TSSnapshotScheduleInfoPB
	9,  // 10: yb.master.TSSnapshotsInfoPB.restorations:type_name -> yb.master.TSSnapshotRestorationInfoPB
	0,  // 11: yb.master.TSHeartbeatRequestPB.common:type_name -> yb.master.TSToMasterCommonPB
	18, // 12: yb.master.TSHeartbeatRequestPB.registration:type_name -> yb.master.TSRegistrationPB
	2,  // 13: yb.master.TSHeartbeatRequestPB.tablet_report:type_name -> yb.master.TabletReportPB
	19, // 14: yb.master.TSHeartbeatRequestPB.metrics:type_name -> yb.master.TServerMetricsPB
	3,  // 15: yb.master.TSHeartbeatRequestPB.DEPRECATED_tablets_for_split:type_name -> yb.master.TabletForSplitPB
	4,  // 16: yb.master.TSHeartbeatRequestPB.storage_metadata:type_name -> yb.master.TabletDriveStorageMetadataPB
	20, // 17: yb.master.TSHeartbeatResponsePB.error:type_name -> yb.master.MasterErrorPB
	13, // 18: yb.master.TSHeartbeatResponsePB.master_instance:type_name -> yb.NodeInstancePB
	6,  // 19: yb.master.TSHeartbeatResponsePB.tablet_report:type_name -> yb.master.TabletReportUpdatesPB
	21, // 20: yb.master.TSHeartbeatResponsePB.master_config:type_name -> yb.consensus.RaftConfigPB
	7,  // 21: yb.master.TSHeartbeatResponsePB.tservers:type_name -> yb.master.TSInformationPB
	22, // 22: yb.master.TSHeartbeatResponsePB.universe_key_registry:type_name -> yb.encryption.UniverseKeyRegistryPB
	23, // 23: yb.master.TSHeartbeatResponsePB.consumer_registry:type_name -> yb.cdc.ConsumerRegistryPB
	10, // 24: yb.master.TSHeartbeatResponsePB.snapshots_info:type_name -> yb.master.TSSnapshotsInfoPB
	11, // 25: yb.master.MasterHeartbeat.TSHeartbeat:input_type -> yb.master.TSHeartbeatRequestPB
	12, // 26: yb.master.MasterHeartbeat.TSHeartbeat:output_type -> yb.master.TSHeartbeatResponsePB
	26, // [26:27] is the sub-list for method output_type
	25, // [25:26] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_yb_master_master_heartbeat_proto_init() }
func file_yb_master_master_heartbeat_proto_init() {
	if File_yb_master_master_heartbeat_proto != nil {
		return
	}
	file_yb_cdc_cdc_consumer_proto_init()
	file_yb_common_wire_protocol_proto_init()
	file_yb_consensus_consensus_metadata_proto_init()
	file_yb_encryption_encryption_proto_init()
	file_yb_master_master_types_proto_init()
	file_yb_tablet_tablet_types_proto_init()
	file_yb_rpc_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_master_master_heartbeat_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSToMasterCommonPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportedTabletPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletReportPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletForSplitPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletDriveStorageMetadataPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReportedTabletUpdatesPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabletReportUpdatesPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSInformationPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSnapshotScheduleInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSnapshotRestorationInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSSnapshotsInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSHeartbeatRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_heartbeat_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSHeartbeatResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_master_master_heartbeat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_master_master_heartbeat_proto_goTypes,
		DependencyIndexes: file_yb_master_master_heartbeat_proto_depIdxs,
		MessageInfos:      file_yb_master_master_heartbeat_proto_msgTypes,
	}.Build()
	File_yb_master_master_heartbeat_proto = out.File
	file_yb_master_master_heartbeat_proto_rawDesc = nil
	file_yb_master_master_heartbeat_proto_goTypes = nil
	file_yb_master_master_heartbeat_proto_depIdxs = nil
}
