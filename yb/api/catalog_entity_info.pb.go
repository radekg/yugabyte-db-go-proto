// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/master/catalog_entity_info.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BackfillJobPB_State int32

const (
	BackfillJobPB_IN_PROGRESS BackfillJobPB_State = 0
	BackfillJobPB_FAILED      BackfillJobPB_State = 1
	BackfillJobPB_SUCCESS     BackfillJobPB_State = 2
)

// Enum value maps for BackfillJobPB_State.
var (
	BackfillJobPB_State_name = map[int32]string{
		0: "IN_PROGRESS",
		1: "FAILED",
		2: "SUCCESS",
	}
	BackfillJobPB_State_value = map[string]int32{
		"IN_PROGRESS": 0,
		"FAILED":      1,
		"SUCCESS":     2,
	}
)

func (x BackfillJobPB_State) Enum() *BackfillJobPB_State {
	p := new(BackfillJobPB_State)
	*p = x
	return p
}

func (x BackfillJobPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BackfillJobPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[0].Descriptor()
}

func (BackfillJobPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[0]
}

func (x BackfillJobPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *BackfillJobPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = BackfillJobPB_State(num)
	return nil
}

// Deprecated: Use BackfillJobPB_State.Descriptor instead.
func (BackfillJobPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{3, 0}
}

type SysTablesEntryPB_State int32

const (
	SysTablesEntryPB_UNKNOWN   SysTablesEntryPB_State = 0
	SysTablesEntryPB_PREPARING SysTablesEntryPB_State = 1
	SysTablesEntryPB_RUNNING   SysTablesEntryPB_State = 2
	SysTablesEntryPB_ALTERING  SysTablesEntryPB_State = 3
	SysTablesEntryPB_DELETING  SysTablesEntryPB_State = 4
	SysTablesEntryPB_DELETED   SysTablesEntryPB_State = 5
)

// Enum value maps for SysTablesEntryPB_State.
var (
	SysTablesEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARING",
		2: "RUNNING",
		3: "ALTERING",
		4: "DELETING",
		5: "DELETED",
	}
	SysTablesEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"PREPARING": 1,
		"RUNNING":   2,
		"ALTERING":  3,
		"DELETING":  4,
		"DELETED":   5,
	}
)

func (x SysTablesEntryPB_State) Enum() *SysTablesEntryPB_State {
	p := new(SysTablesEntryPB_State)
	*p = x
	return p
}

func (x SysTablesEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTablesEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[1].Descriptor()
}

func (SysTablesEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[1]
}

func (x SysTablesEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTablesEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTablesEntryPB_State(num)
	return nil
}

// Deprecated: Use SysTablesEntryPB_State.Descriptor instead.
func (SysTablesEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{4, 0}
}

type SysTablesEntryPB_HideState int32

const (
	SysTablesEntryPB_VISIBLE SysTablesEntryPB_HideState = 0
	SysTablesEntryPB_HIDING  SysTablesEntryPB_HideState = 1
	SysTablesEntryPB_HIDDEN  SysTablesEntryPB_HideState = 2
)

// Enum value maps for SysTablesEntryPB_HideState.
var (
	SysTablesEntryPB_HideState_name = map[int32]string{
		0: "VISIBLE",
		1: "HIDING",
		2: "HIDDEN",
	}
	SysTablesEntryPB_HideState_value = map[string]int32{
		"VISIBLE": 0,
		"HIDING":  1,
		"HIDDEN":  2,
	}
)

func (x SysTablesEntryPB_HideState) Enum() *SysTablesEntryPB_HideState {
	p := new(SysTablesEntryPB_HideState)
	*p = x
	return p
}

func (x SysTablesEntryPB_HideState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTablesEntryPB_HideState) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[2].Descriptor()
}

func (SysTablesEntryPB_HideState) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[2]
}

func (x SysTablesEntryPB_HideState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTablesEntryPB_HideState) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTablesEntryPB_HideState(num)
	return nil
}

// Deprecated: Use SysTablesEntryPB_HideState.Descriptor instead.
func (SysTablesEntryPB_HideState) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{4, 1}
}

type SysTabletsEntryPB_State int32

const (
	SysTabletsEntryPB_UNKNOWN   SysTabletsEntryPB_State = 999
	SysTabletsEntryPB_PREPARING SysTabletsEntryPB_State = 0
	SysTabletsEntryPB_CREATING  SysTabletsEntryPB_State = 1
	SysTabletsEntryPB_RUNNING   SysTabletsEntryPB_State = 2
	SysTabletsEntryPB_REPLACED  SysTabletsEntryPB_State = 3
	SysTabletsEntryPB_DELETED   SysTabletsEntryPB_State = 4
)

// Enum value maps for SysTabletsEntryPB_State.
var (
	SysTabletsEntryPB_State_name = map[int32]string{
		999: "UNKNOWN",
		0:   "PREPARING",
		1:   "CREATING",
		2:   "RUNNING",
		3:   "REPLACED",
		4:   "DELETED",
	}
	SysTabletsEntryPB_State_value = map[string]int32{
		"UNKNOWN":   999,
		"PREPARING": 0,
		"CREATING":  1,
		"RUNNING":   2,
		"REPLACED":  3,
		"DELETED":   4,
	}
)

func (x SysTabletsEntryPB_State) Enum() *SysTabletsEntryPB_State {
	p := new(SysTabletsEntryPB_State)
	*p = x
	return p
}

func (x SysTabletsEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysTabletsEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[3].Descriptor()
}

func (SysTabletsEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[3]
}

func (x SysTabletsEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysTabletsEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysTabletsEntryPB_State(num)
	return nil
}

// Deprecated: Use SysTabletsEntryPB_State.Descriptor instead.
func (SysTabletsEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{5, 0}
}

type SysNamespaceEntryPB_State int32

const (
	SysNamespaceEntryPB_UNKNOWN   SysNamespaceEntryPB_State = 0 // Unset or bad data. Unexpected state.
	SysNamespaceEntryPB_PREPARING SysNamespaceEntryPB_State = 1 // Creating. Transitive State. Possible Next States: [RUNNING, FAILED].
	SysNamespaceEntryPB_FAILED    SysNamespaceEntryPB_State = 2 // Creation Failed. Permanent State.
	SysNamespaceEntryPB_RUNNING   SysNamespaceEntryPB_State = 3 // Live. Permanent State. Possible Next States: [FAILED, DELETING].
	SysNamespaceEntryPB_DELETING  SysNamespaceEntryPB_State = 4 // Delete Requested. Transitive State. Possible Next States: [DELETED].
	SysNamespaceEntryPB_DELETED   SysNamespaceEntryPB_State = 5 // Delete Finished on TServers or Tombstone. Final State before erasure.
)

// Enum value maps for SysNamespaceEntryPB_State.
var (
	SysNamespaceEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARING",
		2: "FAILED",
		3: "RUNNING",
		4: "DELETING",
		5: "DELETED",
	}
	SysNamespaceEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"PREPARING": 1,
		"FAILED":    2,
		"RUNNING":   3,
		"DELETING":  4,
		"DELETED":   5,
	}
)

func (x SysNamespaceEntryPB_State) Enum() *SysNamespaceEntryPB_State {
	p := new(SysNamespaceEntryPB_State)
	*p = x
	return p
}

func (x SysNamespaceEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysNamespaceEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[4].Descriptor()
}

func (SysNamespaceEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[4]
}

func (x SysNamespaceEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysNamespaceEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysNamespaceEntryPB_State(num)
	return nil
}

// Deprecated: Use SysNamespaceEntryPB_State.Descriptor instead.
func (SysNamespaceEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{6, 0}
}

type SysCDCStreamEntryPB_State int32

const (
	// Used to mark a stream that has been bootstrapped, but hasn't started streaming yet.
	SysCDCStreamEntryPB_INITIATED SysCDCStreamEntryPB_State = 3
	SysCDCStreamEntryPB_ACTIVE    SysCDCStreamEntryPB_State = 0
	SysCDCStreamEntryPB_DELETING  SysCDCStreamEntryPB_State = 1
	// Currently DELETED is not being used because we delete streams entries from sys catalog.
	SysCDCStreamEntryPB_DELETED SysCDCStreamEntryPB_State = 2
)

// Enum value maps for SysCDCStreamEntryPB_State.
var (
	SysCDCStreamEntryPB_State_name = map[int32]string{
		3: "INITIATED",
		0: "ACTIVE",
		1: "DELETING",
		2: "DELETED",
	}
	SysCDCStreamEntryPB_State_value = map[string]int32{
		"INITIATED": 3,
		"ACTIVE":    0,
		"DELETING":  1,
		"DELETED":   2,
	}
)

func (x SysCDCStreamEntryPB_State) Enum() *SysCDCStreamEntryPB_State {
	p := new(SysCDCStreamEntryPB_State)
	*p = x
	return p
}

func (x SysCDCStreamEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysCDCStreamEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[5].Descriptor()
}

func (SysCDCStreamEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[5]
}

func (x SysCDCStreamEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysCDCStreamEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysCDCStreamEntryPB_State(num)
	return nil
}

// Deprecated: Use SysCDCStreamEntryPB_State.Descriptor instead.
func (SysCDCStreamEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{22, 0}
}

type SysSnapshotEntryPB_State int32

const (
	SysSnapshotEntryPB_UNKNOWN   SysSnapshotEntryPB_State = 0
	SysSnapshotEntryPB_CREATING  SysSnapshotEntryPB_State = 1
	SysSnapshotEntryPB_COMPLETE  SysSnapshotEntryPB_State = 2
	SysSnapshotEntryPB_DELETING  SysSnapshotEntryPB_State = 3
	SysSnapshotEntryPB_DELETED   SysSnapshotEntryPB_State = 4
	SysSnapshotEntryPB_FAILED    SysSnapshotEntryPB_State = 5
	SysSnapshotEntryPB_CANCELLED SysSnapshotEntryPB_State = 6
	SysSnapshotEntryPB_RESTORING SysSnapshotEntryPB_State = 7
	SysSnapshotEntryPB_RESTORED  SysSnapshotEntryPB_State = 8
)

// Enum value maps for SysSnapshotEntryPB_State.
var (
	SysSnapshotEntryPB_State_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATING",
		2: "COMPLETE",
		3: "DELETING",
		4: "DELETED",
		5: "FAILED",
		6: "CANCELLED",
		7: "RESTORING",
		8: "RESTORED",
	}
	SysSnapshotEntryPB_State_value = map[string]int32{
		"UNKNOWN":   0,
		"CREATING":  1,
		"COMPLETE":  2,
		"DELETING":  3,
		"DELETED":   4,
		"FAILED":    5,
		"CANCELLED": 6,
		"RESTORING": 7,
		"RESTORED":  8,
	}
)

func (x SysSnapshotEntryPB_State) Enum() *SysSnapshotEntryPB_State {
	p := new(SysSnapshotEntryPB_State)
	*p = x
	return p
}

func (x SysSnapshotEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysSnapshotEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[6].Descriptor()
}

func (SysSnapshotEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[6]
}

func (x SysSnapshotEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysSnapshotEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysSnapshotEntryPB_State(num)
	return nil
}

// Deprecated: Use SysSnapshotEntryPB_State.Descriptor instead.
func (SysSnapshotEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{23, 0}
}

type SysUniverseReplicationEntryPB_State int32

const (
	// Setting up replication.
	SysUniverseReplicationEntryPB_INITIALIZING SysUniverseReplicationEntryPB_State = 0
	// Validated table schemas.
	SysUniverseReplicationEntryPB_VALIDATED SysUniverseReplicationEntryPB_State = 1
	// Active.
	SysUniverseReplicationEntryPB_ACTIVE SysUniverseReplicationEntryPB_State = 2
	// Failed.
	// Setting up universe replication consists of a sequence of steps like validating schemas,
	// creating CDC streams, starting subscribers. If any of these fail, we set the universe
	// replication state to FAILED.
	SysUniverseReplicationEntryPB_FAILED SysUniverseReplicationEntryPB_State = 3
	// Disabled.
	SysUniverseReplicationEntryPB_DISABLED SysUniverseReplicationEntryPB_State = 6
	// Deleted.
	SysUniverseReplicationEntryPB_DELETED SysUniverseReplicationEntryPB_State = 4
	// Error while cleaning up state of deleted entry. This indicates that universe replication has
	// been deleted but there is still some uncleaned up state - for example, there may be left over
	// CDC streams.
	SysUniverseReplicationEntryPB_DELETED_ERROR SysUniverseReplicationEntryPB_State = 5
)

// Enum value maps for SysUniverseReplicationEntryPB_State.
var (
	SysUniverseReplicationEntryPB_State_name = map[int32]string{
		0: "INITIALIZING",
		1: "VALIDATED",
		2: "ACTIVE",
		3: "FAILED",
		6: "DISABLED",
		4: "DELETED",
		5: "DELETED_ERROR",
	}
	SysUniverseReplicationEntryPB_State_value = map[string]int32{
		"INITIALIZING":  0,
		"VALIDATED":     1,
		"ACTIVE":        2,
		"FAILED":        3,
		"DISABLED":      6,
		"DELETED":       4,
		"DELETED_ERROR": 5,
	}
)

func (x SysUniverseReplicationEntryPB_State) Enum() *SysUniverseReplicationEntryPB_State {
	p := new(SysUniverseReplicationEntryPB_State)
	*p = x
	return p
}

func (x SysUniverseReplicationEntryPB_State) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysUniverseReplicationEntryPB_State) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_catalog_entity_info_proto_enumTypes[7].Descriptor()
}

func (SysUniverseReplicationEntryPB_State) Type() protoreflect.EnumType {
	return &file_yb_master_catalog_entity_info_proto_enumTypes[7]
}

func (x SysUniverseReplicationEntryPB_State) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysUniverseReplicationEntryPB_State) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysUniverseReplicationEntryPB_State(num)
	return nil
}

// Deprecated: Use SysUniverseReplicationEntryPB_State.Descriptor instead.
func (SysUniverseReplicationEntryPB_State) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{24, 0}
}

// This represents one instance of a placement constraint for a table. It is
// used to dictate what is the minimum number of expected replicas in a certain
// cloud/region/zone combo.
type PlacementBlockPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The cloud, region and zone information for this placement block.
	CloudInfo *CloudInfoPB `protobuf:"bytes,1,opt,name=cloud_info,json=cloudInfo" json:"cloud_info,omitempty"`
	// The minimum number of replicas that should always be up in this placement.
	MinNumReplicas *int32 `protobuf:"varint,2,opt,name=min_num_replicas,json=minNumReplicas" json:"min_num_replicas,omitempty"`
}

func (x *PlacementBlockPB) Reset() {
	*x = PlacementBlockPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementBlockPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementBlockPB) ProtoMessage() {}

func (x *PlacementBlockPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementBlockPB.ProtoReflect.Descriptor instead.
func (*PlacementBlockPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{0}
}

func (x *PlacementBlockPB) GetCloudInfo() *CloudInfoPB {
	if x != nil {
		return x.CloudInfo
	}
	return nil
}

func (x *PlacementBlockPB) GetMinNumReplicas() int32 {
	if x != nil && x.MinNumReplicas != nil {
		return *x.MinNumReplicas
	}
	return 0
}

// This keeps track of the set of PlacementBlockPBs defining the placement
// requirements for a certain table. This is used both in the on-disk storage
// in SysCatalog, as well as in the actual table creation calls and in the
// schema returned to client queries.
//
// This is tightly coupled with the overall num_replicas for a certain table,
// as we want to both be able to specify requirements, per placement block, but
// also for the overall RF factor of the table.
type PlacementInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumReplicas     *int32              `protobuf:"varint,1,opt,name=num_replicas,json=numReplicas" json:"num_replicas,omitempty"`
	PlacementBlocks []*PlacementBlockPB `protobuf:"bytes,2,rep,name=placement_blocks,json=placementBlocks" json:"placement_blocks,omitempty"`
	PlacementUuid   []byte              `protobuf:"bytes,3,opt,name=placement_uuid,json=placementUuid" json:"placement_uuid,omitempty"`
}

func (x *PlacementInfoPB) Reset() {
	*x = PlacementInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PlacementInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PlacementInfoPB) ProtoMessage() {}

func (x *PlacementInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PlacementInfoPB.ProtoReflect.Descriptor instead.
func (*PlacementInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{1}
}

func (x *PlacementInfoPB) GetNumReplicas() int32 {
	if x != nil && x.NumReplicas != nil {
		return *x.NumReplicas
	}
	return 0
}

func (x *PlacementInfoPB) GetPlacementBlocks() []*PlacementBlockPB {
	if x != nil {
		return x.PlacementBlocks
	}
	return nil
}

func (x *PlacementInfoPB) GetPlacementUuid() []byte {
	if x != nil {
		return x.PlacementUuid
	}
	return nil
}

// Higher level structure to keep track of all types of replicas configured. This will have, at a
// minimum, the information about the replicas that are supposed to be active members of the raft
// configs, but can also include extra information, such as read only replicas.
type ReplicationInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LiveReplicas       *PlacementInfoPB   `protobuf:"bytes,1,opt,name=live_replicas,json=liveReplicas" json:"live_replicas,omitempty"`
	ReadReplicas       []*PlacementInfoPB `protobuf:"bytes,2,rep,name=read_replicas,json=readReplicas" json:"read_replicas,omitempty"`
	AffinitizedLeaders []*CloudInfoPB     `protobuf:"bytes,3,rep,name=affinitized_leaders,json=affinitizedLeaders" json:"affinitized_leaders,omitempty"`
}

func (x *ReplicationInfoPB) Reset() {
	*x = ReplicationInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplicationInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationInfoPB) ProtoMessage() {}

func (x *ReplicationInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationInfoPB.ProtoReflect.Descriptor instead.
func (*ReplicationInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{2}
}

func (x *ReplicationInfoPB) GetLiveReplicas() *PlacementInfoPB {
	if x != nil {
		return x.LiveReplicas
	}
	return nil
}

func (x *ReplicationInfoPB) GetReadReplicas() []*PlacementInfoPB {
	if x != nil {
		return x.ReadReplicas
	}
	return nil
}

func (x *ReplicationInfoPB) GetAffinitizedLeaders() []*CloudInfoPB {
	if x != nil {
		return x.AffinitizedLeaders
	}
	return nil
}

type BackfillJobPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Indexes []*IndexInfoPB `protobuf:"bytes,1,rep,name=indexes" json:"indexes,omitempty"`
	// Index's TableId -> State for each index.
	BackfillState map[string]BackfillJobPB_State `protobuf:"bytes,2,rep,name=backfill_state,json=backfillState" json:"backfill_state,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=yb.master.BackfillJobPB_State"`
	// Number of rows processed for this backfill task (the same for all indexes)
	NumRowsProcessed     *uint64 `protobuf:"varint,4,opt,name=num_rows_processed,json=numRowsProcessed,def=0" json:"num_rows_processed,omitempty"`
	BackfillingTimestamp *uint64 `protobuf:"varint,3,opt,name=backfilling_timestamp,json=backfillingTimestamp" json:"backfilling_timestamp,omitempty"`
}

// Default values for BackfillJobPB fields.
const (
	Default_BackfillJobPB_NumRowsProcessed = uint64(0)
)

func (x *BackfillJobPB) Reset() {
	*x = BackfillJobPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillJobPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillJobPB) ProtoMessage() {}

func (x *BackfillJobPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillJobPB.ProtoReflect.Descriptor instead.
func (*BackfillJobPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{3}
}

func (x *BackfillJobPB) GetIndexes() []*IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *BackfillJobPB) GetBackfillState() map[string]BackfillJobPB_State {
	if x != nil {
		return x.BackfillState
	}
	return nil
}

func (x *BackfillJobPB) GetNumRowsProcessed() uint64 {
	if x != nil && x.NumRowsProcessed != nil {
		return *x.NumRowsProcessed
	}
	return Default_BackfillJobPB_NumRowsProcessed
}

func (x *BackfillJobPB) GetBackfillingTimestamp() uint64 {
	if x != nil && x.BackfillingTimestamp != nil {
		return *x.BackfillingTimestamp
	}
	return 0
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tables entries.
type SysTablesEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table name
	Name []byte `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	// Table type
	TableType *TableType `protobuf:"varint,10,opt,name=table_type,json=tableType,enum=yb.TableType,def=2" json:"table_type,omitempty"`
	// The table namespace ID.
	NamespaceId []byte `protobuf:"bytes,11,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	// The table namespace name.
	NamespaceName []byte `protobuf:"bytes,30,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	// sequence-id for the table metadata.
	// Used on tablet-report to avoid sending "alter-table" notifications.
	Version *uint32 `protobuf:"varint,2,req,name=version" json:"version,omitempty"`
	// Newest table schema (every TS will eventually have it).
	Schema *SchemaPB `protobuf:"bytes,3,req,name=schema" json:"schema,omitempty"`
	// Last table schema that is guaranteed to have reached every TS, though
	// not necessarily the newest schema.
	//
	// This is the schema provided to the user on client->GetSchema(tableName).
	FullyAppliedSchema *SchemaPB `protobuf:"bytes,4,opt,name=fully_applied_schema,json=fullyAppliedSchema" json:"fully_applied_schema,omitempty"`
	// The table's partitioning schema.
	PartitionSchema *PartitionSchemaPB `protobuf:"bytes,9,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	// The table's partitions version. Incremented each time partitions change.
	PartitionListVersion *uint32 `protobuf:"varint,28,opt,name=partition_list_version,json=partitionListVersion" json:"partition_list_version,omitempty"`
	// The next column ID to assign to newly added columns in this table.
	// This prevents column ID reuse.
	NextColumnId *int32 `protobuf:"varint,8,opt,name=next_column_id,json=nextColumnId" json:"next_column_id,omitempty"`
	// Replication information for this tablet.
	ReplicationInfo *ReplicationInfoPB `protobuf:"bytes,5,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	// Debug state for the table.
	State    *SysTablesEntryPB_State `protobuf:"varint,6,opt,name=state,enum=yb.master.SysTablesEntryPB_State,def=0" json:"state,omitempty"`
	StateMsg []byte                  `protobuf:"bytes,7,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
	// TODO(neil) OLDER INDEXes will always have the deprecated fields. To remove the old format, we
	// first need to come up with a way to convert existing catalog content to new format.
	// Secondary indexes of the table.
	Indexes []*IndexInfoPB `protobuf:"bytes,12,rep,name=indexes" json:"indexes,omitempty"`
	// For index table: [to be deprecated and replaced by "index_info"]
	IndexedTableId []byte `protobuf:"bytes,13,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`     // Indexed table id of this index.
	IsLocalIndex   *bool  `protobuf:"varint,14,opt,name=is_local_index,json=isLocalIndex,def=0" json:"is_local_index,omitempty"`    // Whether this is a local index.
	IsUniqueIndex  *bool  `protobuf:"varint,15,opt,name=is_unique_index,json=isUniqueIndex,def=0" json:"is_unique_index,omitempty"` // Whether this is a unique index.
	// For index table: information about this index.
	IndexInfo *IndexInfoPB `protobuf:"bytes,22,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// For Postgres:
	IsPgSharedTable           *bool          `protobuf:"varint,16,opt,name=is_pg_shared_table,json=isPgSharedTable,def=0" json:"is_pg_shared_table,omitempty"` // Is this a shared table?
	WalRetentionSecs          *uint32        `protobuf:"varint,24,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	Colocated                 *bool          `protobuf:"varint,25,opt,name=colocated,def=0" json:"colocated,omitempty"` // Is this a colocated table?
	FullyAppliedSchemaVersion *uint32        `protobuf:"varint,23,opt,name=fully_applied_schema_version,json=fullyAppliedSchemaVersion" json:"fully_applied_schema_version,omitempty"`
	FullyAppliedIndexes       []*IndexInfoPB `protobuf:"bytes,26,rep,name=fully_applied_indexes,json=fullyAppliedIndexes" json:"fully_applied_indexes,omitempty"`
	FullyAppliedIndexInfo     *IndexInfoPB   `protobuf:"bytes,27,opt,name=fully_applied_index_info,json=fullyAppliedIndexInfo" json:"fully_applied_index_info,omitempty"`
	// Optional: Table dependent upon transaction success (abort removes table). Used by YSQL.
	Transaction *TransactionMetadataPB `protobuf:"bytes,29,opt,name=transaction" json:"transaction,omitempty"`
	// During an alter table, which involves no schema change but only updating
	// a permission, is it sometimes acceptable for a client's request (which is
	// prepared with the current schema) to be accepted by a tserver which is
	// still running the previous version.
	// This is typically set during alters that are caused due to index
	// permissions being changed, when the table is backfilled.
	UpdatesOnlyIndexPermissions *bool `protobuf:"varint,31,opt,name=updates_only_index_permissions,json=updatesOnlyIndexPermissions,def=0" json:"updates_only_index_permissions,omitempty"`
	// Keeps track of in-progress backfill jobs.
	// As of Apr 2021, we only have at most one outstanding backfill job, but
	// this restriction may be removed later on. Hence repeated.
	BackfillJobs []*BackfillJobPB            `protobuf:"bytes,32,rep,name=backfill_jobs,json=backfillJobs" json:"backfill_jobs,omitempty"`
	HideState    *SysTablesEntryPB_HideState `protobuf:"varint,33,opt,name=hide_state,json=hideState,enum=yb.master.SysTablesEntryPB_HideState" json:"hide_state,omitempty"`
	// Tablespace ID for use with transaction tables only. Normal YSQL tables do not set this field,
	// and tablespace information for such tables are instead fetched by scanning the pg catalog.
	TransactionTableTablespaceId []byte `protobuf:"bytes,34,opt,name=transaction_table_tablespace_id,json=transactionTableTablespaceId" json:"transaction_table_tablespace_id,omitempty"`
}

// Default values for SysTablesEntryPB fields.
const (
	Default_SysTablesEntryPB_TableType                   = TableType_DEFAULT_TABLE_TYPE
	Default_SysTablesEntryPB_State                       = SysTablesEntryPB_UNKNOWN
	Default_SysTablesEntryPB_IsLocalIndex                = bool(false)
	Default_SysTablesEntryPB_IsUniqueIndex               = bool(false)
	Default_SysTablesEntryPB_IsPgSharedTable             = bool(false)
	Default_SysTablesEntryPB_Colocated                   = bool(false)
	Default_SysTablesEntryPB_UpdatesOnlyIndexPermissions = bool(false)
)

func (x *SysTablesEntryPB) Reset() {
	*x = SysTablesEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTablesEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTablesEntryPB) ProtoMessage() {}

func (x *SysTablesEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTablesEntryPB.ProtoReflect.Descriptor instead.
func (*SysTablesEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{4}
}

func (x *SysTablesEntryPB) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SysTablesEntryPB) GetTableType() TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return Default_SysTablesEntryPB_TableType
}

func (x *SysTablesEntryPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *SysTablesEntryPB) GetNamespaceName() []byte {
	if x != nil {
		return x.NamespaceName
	}
	return nil
}

func (x *SysTablesEntryPB) GetVersion() uint32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysTablesEntryPB) GetSchema() *SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SysTablesEntryPB) GetFullyAppliedSchema() *SchemaPB {
	if x != nil {
		return x.FullyAppliedSchema
	}
	return nil
}

func (x *SysTablesEntryPB) GetPartitionSchema() *PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *SysTablesEntryPB) GetPartitionListVersion() uint32 {
	if x != nil && x.PartitionListVersion != nil {
		return *x.PartitionListVersion
	}
	return 0
}

func (x *SysTablesEntryPB) GetNextColumnId() int32 {
	if x != nil && x.NextColumnId != nil {
		return *x.NextColumnId
	}
	return 0
}

func (x *SysTablesEntryPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetState() SysTablesEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysTablesEntryPB_State
}

func (x *SysTablesEntryPB) GetStateMsg() []byte {
	if x != nil {
		return x.StateMsg
	}
	return nil
}

func (x *SysTablesEntryPB) GetIndexes() []*IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *SysTablesEntryPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

func (x *SysTablesEntryPB) GetIsLocalIndex() bool {
	if x != nil && x.IsLocalIndex != nil {
		return *x.IsLocalIndex
	}
	return Default_SysTablesEntryPB_IsLocalIndex
}

func (x *SysTablesEntryPB) GetIsUniqueIndex() bool {
	if x != nil && x.IsUniqueIndex != nil {
		return *x.IsUniqueIndex
	}
	return Default_SysTablesEntryPB_IsUniqueIndex
}

func (x *SysTablesEntryPB) GetIndexInfo() *IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetIsPgSharedTable() bool {
	if x != nil && x.IsPgSharedTable != nil {
		return *x.IsPgSharedTable
	}
	return Default_SysTablesEntryPB_IsPgSharedTable
}

func (x *SysTablesEntryPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *SysTablesEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysTablesEntryPB_Colocated
}

func (x *SysTablesEntryPB) GetFullyAppliedSchemaVersion() uint32 {
	if x != nil && x.FullyAppliedSchemaVersion != nil {
		return *x.FullyAppliedSchemaVersion
	}
	return 0
}

func (x *SysTablesEntryPB) GetFullyAppliedIndexes() []*IndexInfoPB {
	if x != nil {
		return x.FullyAppliedIndexes
	}
	return nil
}

func (x *SysTablesEntryPB) GetFullyAppliedIndexInfo() *IndexInfoPB {
	if x != nil {
		return x.FullyAppliedIndexInfo
	}
	return nil
}

func (x *SysTablesEntryPB) GetTransaction() *TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SysTablesEntryPB) GetUpdatesOnlyIndexPermissions() bool {
	if x != nil && x.UpdatesOnlyIndexPermissions != nil {
		return *x.UpdatesOnlyIndexPermissions
	}
	return Default_SysTablesEntryPB_UpdatesOnlyIndexPermissions
}

func (x *SysTablesEntryPB) GetBackfillJobs() []*BackfillJobPB {
	if x != nil {
		return x.BackfillJobs
	}
	return nil
}

func (x *SysTablesEntryPB) GetHideState() SysTablesEntryPB_HideState {
	if x != nil && x.HideState != nil {
		return *x.HideState
	}
	return SysTablesEntryPB_VISIBLE
}

func (x *SysTablesEntryPB) GetTransactionTableTablespaceId() []byte {
	if x != nil {
		return x.TransactionTableTablespaceId
	}
	return nil
}

// The on-disk entry in the sys.catalog table ("metadata" column) for
// tablets entries.
type SysTabletsEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DEPRECATED. Replaced by 'partition'.
	OBSOLETEStartKey []byte `protobuf:"bytes,1,opt,name=OBSOLETE_start_key,json=OBSOLETEStartKey" json:"OBSOLETE_start_key,omitempty"`
	OBSOLETEEndKey   []byte `protobuf:"bytes,2,opt,name=OBSOLETE_end_key,json=OBSOLETEEndKey" json:"OBSOLETE_end_key,omitempty"`
	// Tablet partition.
	Partition *PartitionPB `protobuf:"bytes,7,opt,name=partition" json:"partition,omitempty"`
	// The latest committed consensus configuration reported to the Master.
	CommittedConsensusState *ConsensusStatePB `protobuf:"bytes,3,opt,name=committed_consensus_state,json=committedConsensusState" json:"committed_consensus_state,omitempty"`
	// Debug state for the tablet.
	State    *SysTabletsEntryPB_State `protobuf:"varint,4,opt,name=state,enum=yb.master.SysTabletsEntryPB_State,def=999" json:"state,omitempty"`
	StateMsg []byte                   `protobuf:"bytes,5,opt,name=state_msg,json=stateMsg" json:"state_msg,omitempty"`
	// The table id for the tablet.
	TableId []byte `protobuf:"bytes,6,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	// Table ids for all the tables on this tablet.
	TableIds [][]byte `protobuf:"bytes,8,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
	// True if the tablet is colocated.
	Colocated *bool `protobuf:"varint,9,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// Replaced by the map below.
	DEPRECATEDBackfilledUntil []byte `protobuf:"bytes,10,opt,name=DEPRECATED_backfilled_until,json=DEPRECATEDBackfilledUntil" json:"DEPRECATED_backfilled_until,omitempty"`
	// For tablets that are results of splitting we set this to split parent split_depth + 1.
	SplitDepth          *uint64 `protobuf:"varint,11,opt,name=split_depth,json=splitDepth" json:"split_depth,omitempty"`
	SplitParentTabletId []byte  `protobuf:"bytes,13,opt,name=split_parent_tablet_id,json=splitParentTabletId" json:"split_parent_tablet_id,omitempty"`
	// If the tablet is in the backfilling state, this is used to keep track
	// of how far along backfill has completed.
	// Key corresponds to the table_id for the index table. Value is encoded as
	// the DocKey for the next row to be backfilled.
	BackfilledUntil map[string][]byte `protobuf:"bytes,12,rep,name=backfilled_until,json=backfilledUntil" json:"backfilled_until,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Tablet IDs for the children of this tablet after splitting, if they have been registered in
	// master.
	SplitTabletIds [][]byte `protobuf:"bytes,14,rep,name=split_tablet_ids,json=splitTabletIds" json:"split_tablet_ids,omitempty"`
	// Time when tablet was hidden.
	HideHybridTime *uint64 `protobuf:"fixed64,16,opt,name=hide_hybrid_time,json=hideHybridTime" json:"hide_hybrid_time,omitempty"`
	// If tablet was hidden instead of deleting, here we keep list of schedule ids that prevented
	// actual deletion.
	RetainedBySnapshotSchedules [][]byte `protobuf:"bytes,17,rep,name=retained_by_snapshot_schedules,json=retainedBySnapshotSchedules" json:"retained_by_snapshot_schedules,omitempty"`
}

// Default values for SysTabletsEntryPB fields.
const (
	Default_SysTabletsEntryPB_State     = SysTabletsEntryPB_UNKNOWN
	Default_SysTabletsEntryPB_Colocated = bool(false)
)

func (x *SysTabletsEntryPB) Reset() {
	*x = SysTabletsEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTabletsEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTabletsEntryPB) ProtoMessage() {}

func (x *SysTabletsEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTabletsEntryPB.ProtoReflect.Descriptor instead.
func (*SysTabletsEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{5}
}

func (x *SysTabletsEntryPB) GetOBSOLETEStartKey() []byte {
	if x != nil {
		return x.OBSOLETEStartKey
	}
	return nil
}

func (x *SysTabletsEntryPB) GetOBSOLETEEndKey() []byte {
	if x != nil {
		return x.OBSOLETEEndKey
	}
	return nil
}

func (x *SysTabletsEntryPB) GetPartition() *PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *SysTabletsEntryPB) GetCommittedConsensusState() *ConsensusStatePB {
	if x != nil {
		return x.CommittedConsensusState
	}
	return nil
}

func (x *SysTabletsEntryPB) GetState() SysTabletsEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysTabletsEntryPB_State
}

func (x *SysTabletsEntryPB) GetStateMsg() []byte {
	if x != nil {
		return x.StateMsg
	}
	return nil
}

func (x *SysTabletsEntryPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *SysTabletsEntryPB) GetTableIds() [][]byte {
	if x != nil {
		return x.TableIds
	}
	return nil
}

func (x *SysTabletsEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysTabletsEntryPB_Colocated
}

func (x *SysTabletsEntryPB) GetDEPRECATEDBackfilledUntil() []byte {
	if x != nil {
		return x.DEPRECATEDBackfilledUntil
	}
	return nil
}

func (x *SysTabletsEntryPB) GetSplitDepth() uint64 {
	if x != nil && x.SplitDepth != nil {
		return *x.SplitDepth
	}
	return 0
}

func (x *SysTabletsEntryPB) GetSplitParentTabletId() []byte {
	if x != nil {
		return x.SplitParentTabletId
	}
	return nil
}

func (x *SysTabletsEntryPB) GetBackfilledUntil() map[string][]byte {
	if x != nil {
		return x.BackfilledUntil
	}
	return nil
}

func (x *SysTabletsEntryPB) GetSplitTabletIds() [][]byte {
	if x != nil {
		return x.SplitTabletIds
	}
	return nil
}

func (x *SysTabletsEntryPB) GetHideHybridTime() uint64 {
	if x != nil && x.HideHybridTime != nil {
		return *x.HideHybridTime
	}
	return 0
}

func (x *SysTabletsEntryPB) GetRetainedBySnapshotSchedules() [][]byte {
	if x != nil {
		return x.RetainedBySnapshotSchedules
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for a namespace.
type SysNamespaceEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace name.
	Name []byte `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Namespace/Database type.
	DatabaseType *YQLDatabase `protobuf:"varint,2,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
	// For Postgres:
	NextPgOid *uint32 `protobuf:"varint,3,opt,name=next_pg_oid,json=nextPgOid" json:"next_pg_oid,omitempty"` // Next oid to assign.
	// True if the namespace is colocated.
	Colocated *bool `protobuf:"varint,4,opt,name=colocated,def=0" json:"colocated,omitempty"`
	// Optional: Namespace dependent upon transaction success (abort removes NS). Used by YSQL.
	Transaction *TransactionMetadataPB     `protobuf:"bytes,6,opt,name=transaction" json:"transaction,omitempty"`
	State       *SysNamespaceEntryPB_State `protobuf:"varint,5,opt,name=state,enum=yb.master.SysNamespaceEntryPB_State,def=0" json:"state,omitempty"`
}

// Default values for SysNamespaceEntryPB fields.
const (
	Default_SysNamespaceEntryPB_DatabaseType = YQLDatabase_YQL_DATABASE_CQL
	Default_SysNamespaceEntryPB_Colocated    = bool(false)
	Default_SysNamespaceEntryPB_State        = SysNamespaceEntryPB_UNKNOWN
)

func (x *SysNamespaceEntryPB) Reset() {
	*x = SysNamespaceEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysNamespaceEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysNamespaceEntryPB) ProtoMessage() {}

func (x *SysNamespaceEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysNamespaceEntryPB.ProtoReflect.Descriptor instead.
func (*SysNamespaceEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{6}
}

func (x *SysNamespaceEntryPB) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SysNamespaceEntryPB) GetDatabaseType() YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_SysNamespaceEntryPB_DatabaseType
}

func (x *SysNamespaceEntryPB) GetNextPgOid() uint32 {
	if x != nil && x.NextPgOid != nil {
		return *x.NextPgOid
	}
	return 0
}

func (x *SysNamespaceEntryPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_SysNamespaceEntryPB_Colocated
}

func (x *SysNamespaceEntryPB) GetTransaction() *TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *SysNamespaceEntryPB) GetState() SysNamespaceEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysNamespaceEntryPB_State
}

// The data part of a SysRowEntry in the sys.catalog table for a User Defined Type.
type SysUDTypeEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NamespaceId *string     `protobuf:"bytes,1,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	Name        *string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	FieldNames  []string    `protobuf:"bytes,3,rep,name=field_names,json=fieldNames" json:"field_names,omitempty"`
	FieldTypes  []*QLTypePB `protobuf:"bytes,4,rep,name=field_types,json=fieldTypes" json:"field_types,omitempty"`
}

func (x *SysUDTypeEntryPB) Reset() {
	*x = SysUDTypeEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysUDTypeEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUDTypeEntryPB) ProtoMessage() {}

func (x *SysUDTypeEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUDTypeEntryPB.ProtoReflect.Descriptor instead.
func (*SysUDTypeEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{7}
}

func (x *SysUDTypeEntryPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *SysUDTypeEntryPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SysUDTypeEntryPB) GetFieldNames() []string {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *SysUDTypeEntryPB) GetFieldTypes() []*QLTypePB {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

// This is used to mark servers in the load balancer that should be considered
// for immediate removal of load and also prevented from being assigned any
// new load.
type BlacklistPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hosts []*HostPortPB `protobuf:"bytes,1,rep,name=hosts" json:"hosts,omitempty"`
	// Fields to track the number of replicas/leaders in current set of tablets which have a
	// blacklist server/leader. Client should not set this. Set by server side when persisting
	// the blacklist load.
	InitialReplicaLoad *int32 `protobuf:"varint,2,opt,name=initial_replica_load,json=initialReplicaLoad" json:"initial_replica_load,omitempty"`
	InitialLeaderLoad  *int32 `protobuf:"varint,3,opt,name=initial_leader_load,json=initialLeaderLoad" json:"initial_leader_load,omitempty"`
}

func (x *BlacklistPB) Reset() {
	*x = BlacklistPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BlacklistPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlacklistPB) ProtoMessage() {}

func (x *BlacklistPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlacklistPB.ProtoReflect.Descriptor instead.
func (*BlacklistPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{8}
}

func (x *BlacklistPB) GetHosts() []*HostPortPB {
	if x != nil {
		return x.Hosts
	}
	return nil
}

func (x *BlacklistPB) GetInitialReplicaLoad() int32 {
	if x != nil && x.InitialReplicaLoad != nil {
		return *x.InitialReplicaLoad
	}
	return 0
}

func (x *BlacklistPB) GetInitialLeaderLoad() int32 {
	if x != nil && x.InitialLeaderLoad != nil {
		return *x.InitialLeaderLoad
	}
	return 0
}

type EncryptionInfoPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncryptionEnabled          *bool   `protobuf:"varint,1,opt,name=encryption_enabled,json=encryptionEnabled" json:"encryption_enabled,omitempty"`
	UniverseKeyRegistryEncoded []byte  `protobuf:"bytes,2,opt,name=universe_key_registry_encoded,json=universeKeyRegistryEncoded" json:"universe_key_registry_encoded,omitempty"`
	KeyPath                    *string `protobuf:"bytes,3,opt,name=key_path,json=keyPath" json:"key_path,omitempty"`
	LatestVersionId            *string `protobuf:"bytes,4,opt,name=latest_version_id,json=latestVersionId" json:"latest_version_id,omitempty"`
	KeyInMemory                *bool   `protobuf:"varint,5,opt,name=key_in_memory,json=keyInMemory" json:"key_in_memory,omitempty"`
}

func (x *EncryptionInfoPB) Reset() {
	*x = EncryptionInfoPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptionInfoPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptionInfoPB) ProtoMessage() {}

func (x *EncryptionInfoPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptionInfoPB.ProtoReflect.Descriptor instead.
func (*EncryptionInfoPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{9}
}

func (x *EncryptionInfoPB) GetEncryptionEnabled() bool {
	if x != nil && x.EncryptionEnabled != nil {
		return *x.EncryptionEnabled
	}
	return false
}

func (x *EncryptionInfoPB) GetUniverseKeyRegistryEncoded() []byte {
	if x != nil {
		return x.UniverseKeyRegistryEncoded
	}
	return nil
}

func (x *EncryptionInfoPB) GetKeyPath() string {
	if x != nil && x.KeyPath != nil {
		return *x.KeyPath
	}
	return ""
}

func (x *EncryptionInfoPB) GetLatestVersionId() string {
	if x != nil && x.LatestVersionId != nil {
		return *x.LatestVersionId
	}
	return ""
}

func (x *EncryptionInfoPB) GetKeyInMemory() bool {
	if x != nil && x.KeyInMemory != nil {
		return *x.KeyInMemory
	}
	return false
}

// The on-disk entry in the sys.catalog table for configuration vinformation
// that are relevant to the entire cluster. This has a version entry that is
// used for ensuring that client read-modify-writes are valid.
type SysClusterConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version          *int32              `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	ClusterUuid      *string             `protobuf:"bytes,4,opt,name=cluster_uuid,json=clusterUuid" json:"cluster_uuid,omitempty"`
	ReplicationInfo  *ReplicationInfoPB  `protobuf:"bytes,2,opt,name=replication_info,json=replicationInfo" json:"replication_info,omitempty"`
	ServerBlacklist  *BlacklistPB        `protobuf:"bytes,3,opt,name=server_blacklist,json=serverBlacklist" json:"server_blacklist,omitempty"`
	LeaderBlacklist  *BlacklistPB        `protobuf:"bytes,7,opt,name=leader_blacklist,json=leaderBlacklist" json:"leader_blacklist,omitempty"`
	EncryptionInfo   *EncryptionInfoPB   `protobuf:"bytes,5,opt,name=encryption_info,json=encryptionInfo" json:"encryption_info,omitempty"`
	ConsumerRegistry *ConsumerRegistryPB `protobuf:"bytes,6,opt,name=consumer_registry,json=consumerRegistry" json:"consumer_registry,omitempty"`
}

func (x *SysClusterConfigEntryPB) Reset() {
	*x = SysClusterConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysClusterConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysClusterConfigEntryPB) ProtoMessage() {}

func (x *SysClusterConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysClusterConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysClusterConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{10}
}

func (x *SysClusterConfigEntryPB) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysClusterConfigEntryPB) GetClusterUuid() string {
	if x != nil && x.ClusterUuid != nil {
		return *x.ClusterUuid
	}
	return ""
}

func (x *SysClusterConfigEntryPB) GetReplicationInfo() *ReplicationInfoPB {
	if x != nil {
		return x.ReplicationInfo
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetServerBlacklist() *BlacklistPB {
	if x != nil {
		return x.ServerBlacklist
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetLeaderBlacklist() *BlacklistPB {
	if x != nil {
		return x.LeaderBlacklist
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetEncryptionInfo() *EncryptionInfoPB {
	if x != nil {
		return x.EncryptionInfo
	}
	return nil
}

func (x *SysClusterConfigEntryPB) GetConsumerRegistry() *ConsumerRegistryPB {
	if x != nil {
		return x.ConsumerRegistry
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for Redis Config.
type SysRedisConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key  *string  `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Args [][]byte `protobuf:"bytes,2,rep,name=args" json:"args,omitempty"`
}

func (x *SysRedisConfigEntryPB) Reset() {
	*x = SysRedisConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRedisConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRedisConfigEntryPB) ProtoMessage() {}

func (x *SysRedisConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRedisConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysRedisConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{11}
}

func (x *SysRedisConfigEntryPB) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *SysRedisConfigEntryPB) GetArgs() [][]byte {
	if x != nil {
		return x.Args
	}
	return nil
}

type ResourcePermissionsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResourceName      *string          `protobuf:"bytes,1,opt,name=resource_name,json=resourceName" json:"resource_name,omitempty"`
	CanonicalResource *string          `protobuf:"bytes,11,opt,name=canonical_resource,json=canonicalResource" json:"canonical_resource,omitempty"`
	NamespaceName     *string          `protobuf:"bytes,12,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	ResourceType      *ResourceType    `protobuf:"varint,2,opt,name=resource_type,json=resourceType,enum=yb.ResourceType" json:"resource_type,omitempty"`
	Permissions       []PermissionType `protobuf:"varint,13,rep,name=permissions,enum=yb.PermissionType" json:"permissions,omitempty"`
}

func (x *ResourcePermissionsPB) Reset() {
	*x = ResourcePermissionsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourcePermissionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourcePermissionsPB) ProtoMessage() {}

func (x *ResourcePermissionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourcePermissionsPB.ProtoReflect.Descriptor instead.
func (*ResourcePermissionsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{12}
}

func (x *ResourcePermissionsPB) GetResourceName() string {
	if x != nil && x.ResourceName != nil {
		return *x.ResourceName
	}
	return ""
}

func (x *ResourcePermissionsPB) GetCanonicalResource() string {
	if x != nil && x.CanonicalResource != nil {
		return *x.CanonicalResource
	}
	return ""
}

func (x *ResourcePermissionsPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *ResourcePermissionsPB) GetResourceType() ResourceType {
	if x != nil && x.ResourceType != nil {
		return *x.ResourceType
	}
	return ResourceType_ALL_KEYSPACES
}

func (x *ResourcePermissionsPB) GetPermissions() []PermissionType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SysRoleEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role        []byte                   `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	CanLogin    *bool                    `protobuf:"varint,2,opt,name=can_login,json=canLogin" json:"can_login,omitempty"`
	IsSuperuser *bool                    `protobuf:"varint,3,opt,name=is_superuser,json=isSuperuser" json:"is_superuser,omitempty"`
	MemberOf    [][]byte                 `protobuf:"bytes,4,rep,name=member_of,json=memberOf" json:"member_of,omitempty"`
	SaltedHash  []byte                   `protobuf:"bytes,5,opt,name=salted_hash,json=saltedHash" json:"salted_hash,omitempty"`
	Resources   []*ResourcePermissionsPB `protobuf:"bytes,7,rep,name=resources" json:"resources,omitempty"`
}

func (x *SysRoleEntryPB) Reset() {
	*x = SysRoleEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRoleEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRoleEntryPB) ProtoMessage() {}

func (x *SysRoleEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRoleEntryPB.ProtoReflect.Descriptor instead.
func (*SysRoleEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{13}
}

func (x *SysRoleEntryPB) GetRole() []byte {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *SysRoleEntryPB) GetCanLogin() bool {
	if x != nil && x.CanLogin != nil {
		return *x.CanLogin
	}
	return false
}

func (x *SysRoleEntryPB) GetIsSuperuser() bool {
	if x != nil && x.IsSuperuser != nil {
		return *x.IsSuperuser
	}
	return false
}

func (x *SysRoleEntryPB) GetMemberOf() [][]byte {
	if x != nil {
		return x.MemberOf
	}
	return nil
}

func (x *SysRoleEntryPB) GetSaltedHash() []byte {
	if x != nil {
		return x.SaltedHash
	}
	return nil
}

func (x *SysRoleEntryPB) GetResources() []*ResourcePermissionsPB {
	if x != nil {
		return x.Resources
	}
	return nil
}

// Cluster security configuration.
type SysSecurityConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roles configuration version. Every time a role gets created/deleted, or a permission gets
	// added/removed, we increase the version.
	RolesVersion *uint64 `protobuf:"varint,1,opt,name=roles_version,json=rolesVersion" json:"roles_version,omitempty"`
}

func (x *SysSecurityConfigEntryPB) Reset() {
	*x = SysSecurityConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysSecurityConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysSecurityConfigEntryPB) ProtoMessage() {}

func (x *SysSecurityConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysSecurityConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysSecurityConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{14}
}

func (x *SysSecurityConfigEntryPB) GetRolesVersion() uint64 {
	if x != nil && x.RolesVersion != nil {
		return *x.RolesVersion
	}
	return 0
}

// Metadata about the YSQL catalog (current only version).
type SysYSQLCatalogConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// YSQL catalog version. Every time the catalog tables are changed (i.e. by DDL statements)
	// this version gets incremented.
	Version *uint64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	// This is true if the master ran initdb and it finished, succesfully or not.
	InitdbDone *bool `protobuf:"varint,2,opt,name=initdb_done,json=initdbDone" json:"initdb_done,omitempty"`
	// If this is set, initdb has failed.
	InitdbError *string `protobuf:"bytes,5,opt,name=initdb_error,json=initdbError" json:"initdb_error,omitempty"`
	// true if transactional system catalogs have been enabled on this cluster. This means all
	// YSQL system catalog tables have been made transactional, both in their schema and in the tablet
	// metadata.
	TransactionalSysCatalogEnabled *bool `protobuf:"varint,6,opt,name=transactional_sys_catalog_enabled,json=transactionalSysCatalogEnabled" json:"transactional_sys_catalog_enabled,omitempty"`
}

func (x *SysYSQLCatalogConfigEntryPB) Reset() {
	*x = SysYSQLCatalogConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysYSQLCatalogConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysYSQLCatalogConfigEntryPB) ProtoMessage() {}

func (x *SysYSQLCatalogConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysYSQLCatalogConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysYSQLCatalogConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{15}
}

func (x *SysYSQLCatalogConfigEntryPB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysYSQLCatalogConfigEntryPB) GetInitdbDone() bool {
	if x != nil && x.InitdbDone != nil {
		return *x.InitdbDone
	}
	return false
}

func (x *SysYSQLCatalogConfigEntryPB) GetInitdbError() string {
	if x != nil && x.InitdbError != nil {
		return *x.InitdbError
	}
	return ""
}

func (x *SysYSQLCatalogConfigEntryPB) GetTransactionalSysCatalogEnabled() bool {
	if x != nil && x.TransactionalSysCatalogEnabled != nil {
		return *x.TransactionalSysCatalogEnabled
	}
	return false
}

// Metadata about the current state of transaction tables.
type SysTransactionTablesConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Transaction status tables version. Every time a transaction table is added or has its placement
	// changed, this version gets incremented.
	Version *uint64 `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
}

func (x *SysTransactionTablesConfigEntryPB) Reset() {
	*x = SysTransactionTablesConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysTransactionTablesConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysTransactionTablesConfigEntryPB) ProtoMessage() {}

func (x *SysTransactionTablesConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysTransactionTablesConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysTransactionTablesConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{16}
}

func (x *SysTransactionTablesConfigEntryPB) GetVersion() uint64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

// Various cluster configuration.
type SysConfigEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//	*SysConfigEntryPB_SecurityConfig
	//	*SysConfigEntryPB_YsqlCatalogConfig
	//	*SysConfigEntryPB_TransactionTablesConfig
	Config isSysConfigEntryPB_Config `protobuf_oneof:"config"`
}

func (x *SysConfigEntryPB) Reset() {
	*x = SysConfigEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysConfigEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysConfigEntryPB) ProtoMessage() {}

func (x *SysConfigEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysConfigEntryPB.ProtoReflect.Descriptor instead.
func (*SysConfigEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{17}
}

func (m *SysConfigEntryPB) GetConfig() isSysConfigEntryPB_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *SysConfigEntryPB) GetSecurityConfig() *SysSecurityConfigEntryPB {
	if x, ok := x.GetConfig().(*SysConfigEntryPB_SecurityConfig); ok {
		return x.SecurityConfig
	}
	return nil
}

func (x *SysConfigEntryPB) GetYsqlCatalogConfig() *SysYSQLCatalogConfigEntryPB {
	if x, ok := x.GetConfig().(*SysConfigEntryPB_YsqlCatalogConfig); ok {
		return x.YsqlCatalogConfig
	}
	return nil
}

func (x *SysConfigEntryPB) GetTransactionTablesConfig() *SysTransactionTablesConfigEntryPB {
	if x, ok := x.GetConfig().(*SysConfigEntryPB_TransactionTablesConfig); ok {
		return x.TransactionTablesConfig
	}
	return nil
}

type isSysConfigEntryPB_Config interface {
	isSysConfigEntryPB_Config()
}

type SysConfigEntryPB_SecurityConfig struct {
	SecurityConfig *SysSecurityConfigEntryPB `protobuf:"bytes,1,opt,name=security_config,json=securityConfig,oneof"`
}

type SysConfigEntryPB_YsqlCatalogConfig struct {
	YsqlCatalogConfig *SysYSQLCatalogConfigEntryPB `protobuf:"bytes,2,opt,name=ysql_catalog_config,json=ysqlCatalogConfig,oneof"`
}

type SysConfigEntryPB_TransactionTablesConfig struct {
	TransactionTablesConfig *SysTransactionTablesConfigEntryPB `protobuf:"bytes,3,opt,name=transaction_tables_config,json=transactionTablesConfig,oneof"`
}

func (*SysConfigEntryPB_SecurityConfig) isSysConfigEntryPB_Config() {}

func (*SysConfigEntryPB_YsqlCatalogConfig) isSysConfigEntryPB_Config() {}

func (*SysConfigEntryPB_TransactionTablesConfig) isSysConfigEntryPB_Config() {}

// The actual on disk abstract representation of a row in the sys catalog.
// This has to respect the fixed schema of the catalog. In case of changes to
// the schema, this proto must reflect them.
type SysRowEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of entry we are storing. Since the data is serialized, we cannot
	// just store it with
	// the data, as we are not able to read into the appropriate type.
	Type *SysRowEntryType `protobuf:"varint,1,opt,name=type,enum=yb.master.SysRowEntryType" json:"type,omitempty"`
	// The optional ID of the data that we are storing. This can be useful to only
	// read information
	// related to a single item, in the case of tables or tablets, for example.
	// This is optional.
	Id *string `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	// This is the serialized format of the proto we store. This used to be of the "string" type, but
	// was giving warnings due to non-UTF8 data. This is safe, because "bytes" and "string" are
	// encoded the same way in Protobuf.
	// https://groups.google.com/forum/#!msg/protobuf/au6eQBkRT5s/Bhpctql7Q5sJ
	Data []byte `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (x *SysRowEntry) Reset() {
	*x = SysRowEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRowEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRowEntry) ProtoMessage() {}

func (x *SysRowEntry) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRowEntry.ProtoReflect.Descriptor instead.
func (*SysRowEntry) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{18}
}

func (x *SysRowEntry) GetType() SysRowEntryType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return SysRowEntryType_UNKNOWN
}

func (x *SysRowEntry) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *SysRowEntry) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type SysRowEntries struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entries []*SysRowEntry `protobuf:"bytes,1,rep,name=entries" json:"entries,omitempty"`
}

func (x *SysRowEntries) Reset() {
	*x = SysRowEntries{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysRowEntries) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysRowEntries) ProtoMessage() {}

func (x *SysRowEntries) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysRowEntries.ProtoReflect.Descriptor instead.
func (*SysRowEntries) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{19}
}

func (x *SysRowEntries) GetEntries() []*SysRowEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type DdlLogEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableType     *TableType `protobuf:"varint,1,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	NamespaceName *string    `protobuf:"bytes,2,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	NamespaceId   *string    `protobuf:"bytes,3,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	TableName     *string    `protobuf:"bytes,4,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableId       *string    `protobuf:"bytes,5,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	Action        *string    `protobuf:"bytes,6,opt,name=action" json:"action,omitempty"`
	Time          *uint64    `protobuf:"fixed64,7,opt,name=time" json:"time,omitempty"`
}

func (x *DdlLogEntryPB) Reset() {
	*x = DdlLogEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DdlLogEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DdlLogEntryPB) ProtoMessage() {}

func (x *DdlLogEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DdlLogEntryPB.ProtoReflect.Descriptor instead.
func (*DdlLogEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{20}
}

func (x *DdlLogEntryPB) GetTableType() TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return TableType_YQL_TABLE_TYPE
}

func (x *DdlLogEntryPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *DdlLogEntryPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

func (x *DdlLogEntryPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *DdlLogEntryPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *DdlLogEntryPB) GetAction() string {
	if x != nil && x.Action != nil {
		return *x.Action
	}
	return ""
}

func (x *DdlLogEntryPB) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

// Options for CDC stream. This will include details such as:
// Stream sink: YB Universe / Kafka / Elastic Search.
// Log retention time: Amount of time to retain logs for CDC.
// Sink details: For example, Kafka cluster IP, port.
type CDCStreamOptionsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value []byte  `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CDCStreamOptionsPB) Reset() {
	*x = CDCStreamOptionsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCStreamOptionsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCStreamOptionsPB) ProtoMessage() {}

func (x *CDCStreamOptionsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCStreamOptionsPB.ProtoReflect.Descriptor instead.
func (*CDCStreamOptionsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{21}
}

func (x *CDCStreamOptionsPB) GetKey() string {
	if x != nil && x.Key != nil {
		return *x.Key
	}
	return ""
}

func (x *CDCStreamOptionsPB) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// The data part of a SysRowEntry in the sys.catalog table for a CDC stream.
type SysCDCStreamEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableId     []string                   `protobuf:"bytes,1,rep,name=table_id,json=tableId" json:"table_id,omitempty"`
	Options     []*CDCStreamOptionsPB      `protobuf:"bytes,2,rep,name=options" json:"options,omitempty"`
	State       *SysCDCStreamEntryPB_State `protobuf:"varint,3,opt,name=state,enum=yb.master.SysCDCStreamEntryPB_State,def=0" json:"state,omitempty"`
	NamespaceId *string                    `protobuf:"bytes,4,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
}

// Default values for SysCDCStreamEntryPB fields.
const (
	Default_SysCDCStreamEntryPB_State = SysCDCStreamEntryPB_ACTIVE
)

func (x *SysCDCStreamEntryPB) Reset() {
	*x = SysCDCStreamEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCDCStreamEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCDCStreamEntryPB) ProtoMessage() {}

func (x *SysCDCStreamEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCDCStreamEntryPB.ProtoReflect.Descriptor instead.
func (*SysCDCStreamEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{22}
}

func (x *SysCDCStreamEntryPB) GetTableId() []string {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetOptions() []*CDCStreamOptionsPB {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SysCDCStreamEntryPB) GetState() SysCDCStreamEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysCDCStreamEntryPB_State
}

func (x *SysCDCStreamEntryPB) GetNamespaceId() string {
	if x != nil && x.NamespaceId != nil {
		return *x.NamespaceId
	}
	return ""
}

// The on-disk entry in the sys.catalog table ("metadata" column) for snapshots entries.
type SysSnapshotEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	State           *SysSnapshotEntryPB_State              `protobuf:"varint,1,opt,name=state,enum=yb.master.SysSnapshotEntryPB_State,def=0" json:"state,omitempty"`
	TabletSnapshots []*SysSnapshotEntryPB_TabletSnapshotPB `protobuf:"bytes,2,rep,name=tablet_snapshots,json=tabletSnapshots" json:"tablet_snapshots,omitempty"`
	// Stored info about snapshot (1) namespaces (2) tables (3) tablets.
	Entries                    []*SysRowEntry `protobuf:"bytes,3,rep,name=entries" json:"entries,omitempty"`
	SnapshotHybridTime         *uint64        `protobuf:"fixed64,4,opt,name=snapshot_hybrid_time,json=snapshotHybridTime" json:"snapshot_hybrid_time,omitempty"`
	Version                    *int64         `protobuf:"varint,5,opt,name=version" json:"version,omitempty"`
	ScheduleId                 []byte         `protobuf:"bytes,6,opt,name=schedule_id,json=scheduleId" json:"schedule_id,omitempty"`
	PreviousSnapshotHybridTime *uint64        `protobuf:"fixed64,7,opt,name=previous_snapshot_hybrid_time,json=previousSnapshotHybridTime" json:"previous_snapshot_hybrid_time,omitempty"`
}

// Default values for SysSnapshotEntryPB fields.
const (
	Default_SysSnapshotEntryPB_State = SysSnapshotEntryPB_UNKNOWN
)

func (x *SysSnapshotEntryPB) Reset() {
	*x = SysSnapshotEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysSnapshotEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysSnapshotEntryPB) ProtoMessage() {}

func (x *SysSnapshotEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysSnapshotEntryPB.ProtoReflect.Descriptor instead.
func (*SysSnapshotEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{23}
}

func (x *SysSnapshotEntryPB) GetState() SysSnapshotEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysSnapshotEntryPB_State
}

func (x *SysSnapshotEntryPB) GetTabletSnapshots() []*SysSnapshotEntryPB_TabletSnapshotPB {
	if x != nil {
		return x.TabletSnapshots
	}
	return nil
}

func (x *SysSnapshotEntryPB) GetEntries() []*SysRowEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *SysSnapshotEntryPB) GetSnapshotHybridTime() uint64 {
	if x != nil && x.SnapshotHybridTime != nil {
		return *x.SnapshotHybridTime
	}
	return 0
}

func (x *SysSnapshotEntryPB) GetVersion() int64 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *SysSnapshotEntryPB) GetScheduleId() []byte {
	if x != nil {
		return x.ScheduleId
	}
	return nil
}

func (x *SysSnapshotEntryPB) GetPreviousSnapshotHybridTime() uint64 {
	if x != nil && x.PreviousSnapshotHybridTime != nil {
		return *x.PreviousSnapshotHybridTime
	}
	return 0
}

// The data part of a SysRowEntry in the sys.catalog table for a universe replication record.
type SysUniverseReplicationEntryPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProducerId              *string       `protobuf:"bytes,1,opt,name=producer_id,json=producerId" json:"producer_id,omitempty"`
	ProducerMasterAddresses []*HostPortPB `protobuf:"bytes,2,rep,name=producer_master_addresses,json=producerMasterAddresses" json:"producer_master_addresses,omitempty"`
	// producer table IDs.
	Tables []string                             `protobuf:"bytes,3,rep,name=tables" json:"tables,omitempty"`
	State  *SysUniverseReplicationEntryPB_State `protobuf:"varint,4,opt,name=state,enum=yb.master.SysUniverseReplicationEntryPB_State,def=0" json:"state,omitempty"`
	// producer table ID -> consumer table ID map.
	ValidatedTables map[string]string `protobuf:"bytes,5,rep,name=validated_tables,json=validatedTables" json:"validated_tables,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// producer table ID -> producer CDC stream map.
	TableStreams map[string]string `protobuf:"bytes,6,rep,name=table_streams,json=tableStreams" json:"table_streams,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

// Default values for SysUniverseReplicationEntryPB fields.
const (
	Default_SysUniverseReplicationEntryPB_State = SysUniverseReplicationEntryPB_INITIALIZING
)

func (x *SysUniverseReplicationEntryPB) Reset() {
	*x = SysUniverseReplicationEntryPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysUniverseReplicationEntryPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysUniverseReplicationEntryPB) ProtoMessage() {}

func (x *SysUniverseReplicationEntryPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysUniverseReplicationEntryPB.ProtoReflect.Descriptor instead.
func (*SysUniverseReplicationEntryPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{24}
}

func (x *SysUniverseReplicationEntryPB) GetProducerId() string {
	if x != nil && x.ProducerId != nil {
		return *x.ProducerId
	}
	return ""
}

func (x *SysUniverseReplicationEntryPB) GetProducerMasterAddresses() []*HostPortPB {
	if x != nil {
		return x.ProducerMasterAddresses
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetState() SysUniverseReplicationEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return Default_SysUniverseReplicationEntryPB_State
}

func (x *SysUniverseReplicationEntryPB) GetValidatedTables() map[string]string {
	if x != nil {
		return x.ValidatedTables
	}
	return nil
}

func (x *SysUniverseReplicationEntryPB) GetTableStreams() map[string]string {
	if x != nil {
		return x.TableStreams
	}
	return nil
}

type SysSnapshotEntryPB_TabletSnapshotPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id    []byte                    `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	State *SysSnapshotEntryPB_State `protobuf:"varint,2,opt,name=state,enum=yb.master.SysSnapshotEntryPB_State" json:"state,omitempty"`
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) Reset() {
	*x = SysSnapshotEntryPB_TabletSnapshotPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_catalog_entity_info_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysSnapshotEntryPB_TabletSnapshotPB) ProtoMessage() {}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_catalog_entity_info_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysSnapshotEntryPB_TabletSnapshotPB.ProtoReflect.Descriptor instead.
func (*SysSnapshotEntryPB_TabletSnapshotPB) Descriptor() ([]byte, []int) {
	return file_yb_master_catalog_entity_info_proto_rawDescGZIP(), []int{23, 0}
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SysSnapshotEntryPB_TabletSnapshotPB) GetState() SysSnapshotEntryPB_State {
	if x != nil && x.State != nil {
		return *x.State
	}
	return SysSnapshotEntryPB_UNKNOWN
}

var File_yb_master_catalog_entity_info_proto protoreflect.FileDescriptor

var file_yb_master_catalog_entity_info_proto_rawDesc = []byte{
	0x0a, 0x23, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x1a, 0x19, 0x79, 0x62, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x79,
	0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x6c, 0x0a, 0x10, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x69, 0x6e, 0x5f, 0x6e, 0x75,
	0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x6d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73,
	0x22, 0xa3, 0x01, 0x0a, 0x0f, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x46, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x52, 0x0f,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x55, 0x75, 0x69, 0x64, 0x22, 0xd7, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x3f, 0x0a, 0x0d,
	0x6c, 0x69, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52,
	0x0c, 0x6c, 0x69, 0x76, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x3f, 0x0a,
	0x0d, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x0c, 0x72, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x73, 0x12, 0x40,
	0x0a, 0x13, 0x61, 0x66, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x12, 0x61, 0x66,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x7a, 0x65, 0x64, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x22, 0x89, 0x03, 0x0a, 0x0d, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62,
	0x50, 0x42, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x52, 0x0a,
	0x0e, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50, 0x42, 0x2e,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x0d, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2f, 0x0a, 0x12, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30,
	0x52, 0x10, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x65, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x14, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x1a, 0x60, 0x0a, 0x12, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x34, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x02, 0x22, 0x92, 0x0d, 0x0a,
	0x10, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x12, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x3e, 0x0a, 0x14, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x12, 0x66,
	0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62,
	0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x78,
	0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x49, 0x64, 0x12,
	0x47, 0x0a, 0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x65, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x73, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2d, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0d, 0x69, 0x73, 0x55, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2e, 0x0a, 0x0a, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79,
	0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x09, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x32, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x70,
	0x67, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0f, 0x69, 0x73, 0x50,
	0x67, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12,
	0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65,
	0x63, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x63, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x3f, 0x0a, 0x1c, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x65,
	0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42,
	0x52, 0x13, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x18, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x5f, 0x61,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x15, 0x66, 0x75, 0x6c, 0x6c, 0x79, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42, 0x52,
	0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x1e,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x5f, 0x69, 0x6e, 0x64,
	0x65, 0x78, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x1b, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0d, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x6a, 0x6f, 0x62, 0x73, 0x18, 0x20, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x50, 0x42, 0x52, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x44, 0x0a, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x48, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x68, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x45, 0x0a,
	0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x22, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x22, 0x59, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x52,
	0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47,
	0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22,
	0x30, 0x0a, 0x09, 0x48, 0x69, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x56, 0x49, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x49, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x48, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x10,
	0x02, 0x22, 0xe6, 0x07, 0x0a, 0x11, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x2c, 0x0a, 0x12, 0x4f, 0x42, 0x53, 0x4f, 0x4c,
	0x45, 0x54, 0x45, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x10, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54,
	0x45, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0e, 0x4f, 0x42, 0x53, 0x4f, 0x4c, 0x45, 0x54, 0x45, 0x45, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5a,
	0x0a, 0x19, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50,
	0x42, 0x52, 0x17, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x6e, 0x73,
	0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49,
	0x64, 0x73, 0x12, 0x23, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x44, 0x45, 0x50, 0x52, 0x45,
	0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x19, 0x44, 0x45,
	0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70, 0x6c, 0x69, 0x74,
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x44, 0x65, 0x70, 0x74, 0x68, 0x12, 0x33, 0x0a, 0x16, 0x73, 0x70, 0x6c, 0x69,
	0x74, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x5c, 0x0a,
	0x10, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69,
	0x6c, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64,
	0x55, 0x6e, 0x74, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b,
	0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x12, 0x28, 0x0a, 0x10, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x73, 0x18,
	0x0e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x49, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0e, 0x68, 0x69, 0x64, 0x65, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x43, 0x0a, 0x1e, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x5f, 0x73,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x1b, 0x72, 0x65, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x42, 0x79, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c,
	0x65, 0x64, 0x55, 0x6e, 0x74, 0x69, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5a, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12,
	0x0d, 0x0a, 0x09, 0x50, 0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x44, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x0f, 0x10, 0x10, 0x22, 0x91, 0x03, 0x0a, 0x13, 0x53,
	0x79, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x10,
	0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c,
	0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x6e, 0x65, 0x78, 0x74, 0x5f, 0x70, 0x67, 0x5f, 0x6f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x50, 0x67, 0x4f, 0x69, 0x64, 0x12, 0x23,
	0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x42, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x57, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x52, 0x45, 0x50, 0x41, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e,
	0x47, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x04, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x05, 0x22, 0x99,
	0x01, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x55, 0x44, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x50, 0x42, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x0b, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x42, 0x52, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x95, 0x01, 0x0a, 0x0b, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x12, 0x24, 0x0a, 0x05, 0x68, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48,
	0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x05, 0x68, 0x6f, 0x73, 0x74, 0x73,
	0x12, 0x30, 0x0a, 0x14, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x4c, 0x6f,
	0x61, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4c, 0x6f,
	0x61, 0x64, 0x22, 0xef, 0x01, 0x0a, 0x10, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x12, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x11, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x75, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x1a, 0x75,
	0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x79, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x22, 0x0a, 0x0d, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x6b, 0x65, 0x79, 0x49, 0x6e, 0x4d, 0x65,
	0x6d, 0x6f, 0x72, 0x79, 0x22, 0xb4, 0x03, 0x0a, 0x17, 0x53, 0x79, 0x73, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c,
	0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x47, 0x0a,
	0x10, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x41, 0x0a, 0x10, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x42, 0x6c, 0x61,
	0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x10, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x6c, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0f,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x47, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x65, 0x72, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x75,
	0x6d, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x79, 0x22, 0x3d, 0x0a, 0x15, 0x53,
	0x79, 0x73, 0x52, 0x65, 0x64, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0xff, 0x01, 0x0a, 0x15, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x63, 0x61, 0x6e,
	0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x6f, 0x6e, 0x69, 0x63, 0x61, 0x6c,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x35, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x79, 0x62,
	0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe2, 0x01, 0x0a,
	0x0e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x63, 0x61, 0x6e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x65, 0x72, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73, 0x53, 0x75, 0x70, 0x65, 0x72, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x61, 0x6c, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x12, 0x3e, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0x3f, 0x0a, 0x18, 0x53, 0x79, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x23, 0x0a,
	0x0d, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x22, 0xc6, 0x01, 0x0a, 0x1b, 0x53, 0x79, 0x73, 0x59, 0x53, 0x51, 0x4c, 0x43, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x64, 0x62, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x49, 0x0a, 0x21, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x73, 0x79, 0x73, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x79, 0x73, 0x43, 0x61, 0x74,
	0x61, 0x6c, 0x6f, 0x67, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x3d, 0x0a, 0x21, 0x53,
	0x79, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42,
	0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x53,
	0x79, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12,
	0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x58, 0x0a, 0x13, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x59, 0x53, 0x51, 0x4c,
	0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x48, 0x00, 0x52, 0x11, 0x79, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x6a, 0x0a, 0x19, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x48, 0x00, 0x52, 0x17, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x61, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x2e,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x41, 0x0a, 0x0d, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72,
	0x69, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e,
	0x74, 0x72, 0x69, 0x65, 0x73, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x44, 0x64, 0x6c, 0x4c, 0x6f, 0x67,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x04, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x44, 0x43, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x50, 0x42, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x42, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x3a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x0d, 0x0a, 0x09, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0a,
	0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x44, 0x10, 0x02, 0x22, 0xfa, 0x04, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x53, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x12, 0x42, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x3a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x59, 0x0a, 0x10, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68,
	0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07, 0x65,
	0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x14, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x1d, 0x70, 0x72,
	0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x06, 0x52, 0x1a, 0x70, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x5d, 0x0a,
	0x10, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50,
	0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x39, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x83, 0x01, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x52, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41,
	0x49, 0x4c, 0x45, 0x44, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c,
	0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x49,
	0x4e, 0x47, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x54, 0x4f, 0x52, 0x45, 0x44,
	0x10, 0x08, 0x22, 0xb8, 0x05, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x19, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x5f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f,
	0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x17, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x72, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x68, 0x0a,
	0x10, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e, 0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50,
	0x42, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x55, 0x6e,
	0x69, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x1a, 0x42, 0x0a, 0x14, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6e, 0x0a,
	0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41,
	0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43, 0x54, 0x49, 0x56,
	0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x45,
	0x4c, 0x45, 0x54, 0x45, 0x44, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x42, 0x0f, 0x0a,
	0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
}

var (
	file_yb_master_catalog_entity_info_proto_rawDescOnce sync.Once
	file_yb_master_catalog_entity_info_proto_rawDescData = file_yb_master_catalog_entity_info_proto_rawDesc
)

func file_yb_master_catalog_entity_info_proto_rawDescGZIP() []byte {
	file_yb_master_catalog_entity_info_proto_rawDescOnce.Do(func() {
		file_yb_master_catalog_entity_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_master_catalog_entity_info_proto_rawDescData)
	})
	return file_yb_master_catalog_entity_info_proto_rawDescData
}

var file_yb_master_catalog_entity_info_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_yb_master_catalog_entity_info_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_yb_master_catalog_entity_info_proto_goTypes = []interface{}{
	(BackfillJobPB_State)(0),                    // 0: yb.master.BackfillJobPB.State
	(SysTablesEntryPB_State)(0),                 // 1: yb.master.SysTablesEntryPB.State
	(SysTablesEntryPB_HideState)(0),             // 2: yb.master.SysTablesEntryPB.HideState
	(SysTabletsEntryPB_State)(0),                // 3: yb.master.SysTabletsEntryPB.State
	(SysNamespaceEntryPB_State)(0),              // 4: yb.master.SysNamespaceEntryPB.State
	(SysCDCStreamEntryPB_State)(0),              // 5: yb.master.SysCDCStreamEntryPB.State
	(SysSnapshotEntryPB_State)(0),               // 6: yb.master.SysSnapshotEntryPB.State
	(SysUniverseReplicationEntryPB_State)(0),    // 7: yb.master.SysUniverseReplicationEntryPB.State
	(*PlacementBlockPB)(nil),                    // 8: yb.master.PlacementBlockPB
	(*PlacementInfoPB)(nil),                     // 9: yb.master.PlacementInfoPB
	(*ReplicationInfoPB)(nil),                   // 10: yb.master.ReplicationInfoPB
	(*BackfillJobPB)(nil),                       // 11: yb.master.BackfillJobPB
	(*SysTablesEntryPB)(nil),                    // 12: yb.master.SysTablesEntryPB
	(*SysTabletsEntryPB)(nil),                   // 13: yb.master.SysTabletsEntryPB
	(*SysNamespaceEntryPB)(nil),                 // 14: yb.master.SysNamespaceEntryPB
	(*SysUDTypeEntryPB)(nil),                    // 15: yb.master.SysUDTypeEntryPB
	(*BlacklistPB)(nil),                         // 16: yb.master.BlacklistPB
	(*EncryptionInfoPB)(nil),                    // 17: yb.master.EncryptionInfoPB
	(*SysClusterConfigEntryPB)(nil),             // 18: yb.master.SysClusterConfigEntryPB
	(*SysRedisConfigEntryPB)(nil),               // 19: yb.master.SysRedisConfigEntryPB
	(*ResourcePermissionsPB)(nil),               // 20: yb.master.ResourcePermissionsPB
	(*SysRoleEntryPB)(nil),                      // 21: yb.master.SysRoleEntryPB
	(*SysSecurityConfigEntryPB)(nil),            // 22: yb.master.SysSecurityConfigEntryPB
	(*SysYSQLCatalogConfigEntryPB)(nil),         // 23: yb.master.SysYSQLCatalogConfigEntryPB
	(*SysTransactionTablesConfigEntryPB)(nil),   // 24: yb.master.SysTransactionTablesConfigEntryPB
	(*SysConfigEntryPB)(nil),                    // 25: yb.master.SysConfigEntryPB
	(*SysRowEntry)(nil),                         // 26: yb.master.SysRowEntry
	(*SysRowEntries)(nil),                       // 27: yb.master.SysRowEntries
	(*DdlLogEntryPB)(nil),                       // 28: yb.master.DdlLogEntryPB
	(*CDCStreamOptionsPB)(nil),                  // 29: yb.master.CDCStreamOptionsPB
	(*SysCDCStreamEntryPB)(nil),                 // 30: yb.master.SysCDCStreamEntryPB
	(*SysSnapshotEntryPB)(nil),                  // 31: yb.master.SysSnapshotEntryPB
	(*SysUniverseReplicationEntryPB)(nil),       // 32: yb.master.SysUniverseReplicationEntryPB
	nil,                                         // 33: yb.master.BackfillJobPB.BackfillStateEntry
	nil,                                         // 34: yb.master.SysTabletsEntryPB.BackfilledUntilEntry
	(*SysSnapshotEntryPB_TabletSnapshotPB)(nil), // 35: yb.master.SysSnapshotEntryPB.TabletSnapshotPB
	nil,                           // 36: yb.master.SysUniverseReplicationEntryPB.ValidatedTablesEntry
	nil,                           // 37: yb.master.SysUniverseReplicationEntryPB.TableStreamsEntry
	(*CloudInfoPB)(nil),           // 38: yb.CloudInfoPB
	(*IndexInfoPB)(nil),           // 39: yb.IndexInfoPB
	(TableType)(0),                // 40: yb.TableType
	(*SchemaPB)(nil),              // 41: yb.SchemaPB
	(*PartitionSchemaPB)(nil),     // 42: yb.PartitionSchemaPB
	(*TransactionMetadataPB)(nil), // 43: yb.TransactionMetadataPB
	(*PartitionPB)(nil),           // 44: yb.PartitionPB
	(*ConsensusStatePB)(nil),      // 45: yb.consensus.ConsensusStatePB
	(YQLDatabase)(0),              // 46: yb.YQLDatabase
	(*QLTypePB)(nil),              // 47: yb.QLTypePB
	(*HostPortPB)(nil),            // 48: yb.HostPortPB
	(*ConsumerRegistryPB)(nil),    // 49: yb.cdc.ConsumerRegistryPB
	(ResourceType)(0),             // 50: yb.ResourceType
	(PermissionType)(0),           // 51: yb.PermissionType
	(SysRowEntryType)(0),          // 52: yb.master.SysRowEntryType
}
var file_yb_master_catalog_entity_info_proto_depIdxs = []int32{
	38, // 0: yb.master.PlacementBlockPB.cloud_info:type_name -> yb.CloudInfoPB
	8,  // 1: yb.master.PlacementInfoPB.placement_blocks:type_name -> yb.master.PlacementBlockPB
	9,  // 2: yb.master.ReplicationInfoPB.live_replicas:type_name -> yb.master.PlacementInfoPB
	9,  // 3: yb.master.ReplicationInfoPB.read_replicas:type_name -> yb.master.PlacementInfoPB
	38, // 4: yb.master.ReplicationInfoPB.affinitized_leaders:type_name -> yb.CloudInfoPB
	39, // 5: yb.master.BackfillJobPB.indexes:type_name -> yb.IndexInfoPB
	33, // 6: yb.master.BackfillJobPB.backfill_state:type_name -> yb.master.BackfillJobPB.BackfillStateEntry
	40, // 7: yb.master.SysTablesEntryPB.table_type:type_name -> yb.TableType
	41, // 8: yb.master.SysTablesEntryPB.schema:type_name -> yb.SchemaPB
	41, // 9: yb.master.SysTablesEntryPB.fully_applied_schema:type_name -> yb.SchemaPB
	42, // 10: yb.master.SysTablesEntryPB.partition_schema:type_name -> yb.PartitionSchemaPB
	10, // 11: yb.master.SysTablesEntryPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	1,  // 12: yb.master.SysTablesEntryPB.state:type_name -> yb.master.SysTablesEntryPB.State
	39, // 13: yb.master.SysTablesEntryPB.indexes:type_name -> yb.IndexInfoPB
	39, // 14: yb.master.SysTablesEntryPB.index_info:type_name -> yb.IndexInfoPB
	39, // 15: yb.master.SysTablesEntryPB.fully_applied_indexes:type_name -> yb.IndexInfoPB
	39, // 16: yb.master.SysTablesEntryPB.fully_applied_index_info:type_name -> yb.IndexInfoPB
	43, // 17: yb.master.SysTablesEntryPB.transaction:type_name -> yb.TransactionMetadataPB
	11, // 18: yb.master.SysTablesEntryPB.backfill_jobs:type_name -> yb.master.BackfillJobPB
	2,  // 19: yb.master.SysTablesEntryPB.hide_state:type_name -> yb.master.SysTablesEntryPB.HideState
	44, // 20: yb.master.SysTabletsEntryPB.partition:type_name -> yb.PartitionPB
	45, // 21: yb.master.SysTabletsEntryPB.committed_consensus_state:type_name -> yb.consensus.ConsensusStatePB
	3,  // 22: yb.master.SysTabletsEntryPB.state:type_name -> yb.master.SysTabletsEntryPB.State
	34, // 23: yb.master.SysTabletsEntryPB.backfilled_until:type_name -> yb.master.SysTabletsEntryPB.BackfilledUntilEntry
	46, // 24: yb.master.SysNamespaceEntryPB.database_type:type_name -> yb.YQLDatabase
	43, // 25: yb.master.SysNamespaceEntryPB.transaction:type_name -> yb.TransactionMetadataPB
	4,  // 26: yb.master.SysNamespaceEntryPB.state:type_name -> yb.master.SysNamespaceEntryPB.State
	47, // 27: yb.master.SysUDTypeEntryPB.field_types:type_name -> yb.QLTypePB
	48, // 28: yb.master.BlacklistPB.hosts:type_name -> yb.HostPortPB
	10, // 29: yb.master.SysClusterConfigEntryPB.replication_info:type_name -> yb.master.ReplicationInfoPB
	16, // 30: yb.master.SysClusterConfigEntryPB.server_blacklist:type_name -> yb.master.BlacklistPB
	16, // 31: yb.master.SysClusterConfigEntryPB.leader_blacklist:type_name -> yb.master.BlacklistPB
	17, // 32: yb.master.SysClusterConfigEntryPB.encryption_info:type_name -> yb.master.EncryptionInfoPB
	49, // 33: yb.master.SysClusterConfigEntryPB.consumer_registry:type_name -> yb.cdc.ConsumerRegistryPB
	50, // 34: yb.master.ResourcePermissionsPB.resource_type:type_name -> yb.ResourceType
	51, // 35: yb.master.ResourcePermissionsPB.permissions:type_name -> yb.PermissionType
	20, // 36: yb.master.SysRoleEntryPB.resources:type_name -> yb.master.ResourcePermissionsPB
	22, // 37: yb.master.SysConfigEntryPB.security_config:type_name -> yb.master.SysSecurityConfigEntryPB
	23, // 38: yb.master.SysConfigEntryPB.ysql_catalog_config:type_name -> yb.master.SysYSQLCatalogConfigEntryPB
	24, // 39: yb.master.SysConfigEntryPB.transaction_tables_config:type_name -> yb.master.SysTransactionTablesConfigEntryPB
	52, // 40: yb.master.SysRowEntry.type:type_name -> yb.master.SysRowEntryType
	26, // 41: yb.master.SysRowEntries.entries:type_name -> yb.master.SysRowEntry
	40, // 42: yb.master.DdlLogEntryPB.table_type:type_name -> yb.TableType
	29, // 43: yb.master.SysCDCStreamEntryPB.options:type_name -> yb.master.CDCStreamOptionsPB
	5,  // 44: yb.master.SysCDCStreamEntryPB.state:type_name -> yb.master.SysCDCStreamEntryPB.State
	6,  // 45: yb.master.SysSnapshotEntryPB.state:type_name -> yb.master.SysSnapshotEntryPB.State
	35, // 46: yb.master.SysSnapshotEntryPB.tablet_snapshots:type_name -> yb.master.SysSnapshotEntryPB.TabletSnapshotPB
	26, // 47: yb.master.SysSnapshotEntryPB.entries:type_name -> yb.master.SysRowEntry
	48, // 48: yb.master.SysUniverseReplicationEntryPB.producer_master_addresses:type_name -> yb.HostPortPB
	7,  // 49: yb.master.SysUniverseReplicationEntryPB.state:type_name -> yb.master.SysUniverseReplicationEntryPB.State
	36, // 50: yb.master.SysUniverseReplicationEntryPB.validated_tables:type_name -> yb.master.SysUniverseReplicationEntryPB.ValidatedTablesEntry
	37, // 51: yb.master.SysUniverseReplicationEntryPB.table_streams:type_name -> yb.master.SysUniverseReplicationEntryPB.TableStreamsEntry
	0,  // 52: yb.master.BackfillJobPB.BackfillStateEntry.value:type_name -> yb.master.BackfillJobPB.State
	6,  // 53: yb.master.SysSnapshotEntryPB.TabletSnapshotPB.state:type_name -> yb.master.SysSnapshotEntryPB.State
	54, // [54:54] is the sub-list for method output_type
	54, // [54:54] is the sub-list for method input_type
	54, // [54:54] is the sub-list for extension type_name
	54, // [54:54] is the sub-list for extension extendee
	0,  // [0:54] is the sub-list for field type_name
}

func init() { file_yb_master_catalog_entity_info_proto_init() }
func file_yb_master_catalog_entity_info_proto_init() {
	if File_yb_master_catalog_entity_info_proto != nil {
		return
	}
	file_yb_cdc_cdc_consumer_proto_init()
	file_yb_common_common_proto_init()
	file_yb_common_common_net_proto_init()
	file_yb_common_common_types_proto_init()
	file_yb_consensus_consensus_metadata_proto_init()
	file_yb_master_master_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_master_catalog_entity_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementBlockPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PlacementInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplicationInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillJobPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTablesEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTabletsEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysNamespaceEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysUDTypeEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BlacklistPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptionInfoPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysClusterConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRedisConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourcePermissionsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRoleEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysSecurityConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysYSQLCatalogConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysTransactionTablesConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysConfigEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRowEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysRowEntries); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DdlLogEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCStreamOptionsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCDCStreamEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysSnapshotEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysUniverseReplicationEntryPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_catalog_entity_info_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysSnapshotEntryPB_TabletSnapshotPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yb_master_catalog_entity_info_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*SysConfigEntryPB_SecurityConfig)(nil),
		(*SysConfigEntryPB_YsqlCatalogConfig)(nil),
		(*SysConfigEntryPB_TransactionTablesConfig)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_master_catalog_entity_info_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_master_catalog_entity_info_proto_goTypes,
		DependencyIndexes: file_yb_master_catalog_entity_info_proto_depIdxs,
		EnumInfos:         file_yb_master_catalog_entity_info_proto_enumTypes,
		MessageInfos:      file_yb_master_catalog_entity_info_proto_msgTypes,
	}.Build()
	File_yb_master_catalog_entity_info_proto = out.File
	file_yb_master_catalog_entity_info_proto_rawDesc = nil
	file_yb_master_catalog_entity_info_proto_goTypes = nil
	file_yb_master_catalog_entity_info_proto_depIdxs = nil
}
