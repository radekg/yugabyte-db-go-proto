// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/common/value.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//--------------------------------------------------------------------------------------------------
// YQL support.
// The following section is common for all query language.
//--------------------------------------------------------------------------------------------------
// Represent system internal values.
type QLVirtualValuePB int32

const (
	QLVirtualValuePB_LIMIT_MAX QLVirtualValuePB = 1
	QLVirtualValuePB_LIMIT_MIN QLVirtualValuePB = 2
)

// Enum value maps for QLVirtualValuePB.
var (
	QLVirtualValuePB_name = map[int32]string{
		1: "LIMIT_MAX",
		2: "LIMIT_MIN",
	}
	QLVirtualValuePB_value = map[string]int32{
		"LIMIT_MAX": 1,
		"LIMIT_MIN": 2,
	}
)

func (x QLVirtualValuePB) Enum() *QLVirtualValuePB {
	p := new(QLVirtualValuePB)
	*p = x
	return p
}

func (x QLVirtualValuePB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLVirtualValuePB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_value_proto_enumTypes[0].Descriptor()
}

func (QLVirtualValuePB) Type() protoreflect.EnumType {
	return &file_yb_common_value_proto_enumTypes[0]
}

func (x QLVirtualValuePB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLVirtualValuePB) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLVirtualValuePB(num)
	return nil
}

// Deprecated: Use QLVirtualValuePB.Descriptor instead.
func (QLVirtualValuePB) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_value_proto_rawDescGZIP(), []int{0}
}

// To ensure compatibility between release versions, the numeric values of these datatypes cannot
// be changed once the types are implemented and released.
//
// Make sure this is in sync with YBCPgDataType in ybc_pg_typedefs.h.
type DataType int32

const (
	DataType_UNKNOWN_DATA      DataType = 999
	DataType_NULL_VALUE_TYPE   DataType = 0
	DataType_INT8              DataType = 1
	DataType_INT16             DataType = 2
	DataType_INT32             DataType = 3
	DataType_INT64             DataType = 4
	DataType_STRING            DataType = 5
	DataType_BOOL              DataType = 6
	DataType_FLOAT             DataType = 7
	DataType_DOUBLE            DataType = 8
	DataType_BINARY            DataType = 9
	DataType_TIMESTAMP         DataType = 10
	DataType_DECIMAL           DataType = 11
	DataType_VARINT            DataType = 12
	DataType_INET              DataType = 13
	DataType_LIST              DataType = 14
	DataType_MAP               DataType = 15
	DataType_SET               DataType = 16
	DataType_UUID              DataType = 17
	DataType_TIMEUUID          DataType = 18
	DataType_TUPLE             DataType = 19 // TUPLE is not yet fully implemented, but it is a CQL type.
	DataType_TYPEARGS          DataType = 20
	DataType_USER_DEFINED_TYPE DataType = 21
	DataType_FROZEN            DataType = 22
	DataType_DATE              DataType = 23
	DataType_TIME              DataType = 24
	DataType_JSONB             DataType = 25
	// All unsigned datatypes will be removed from QL because databases do not have these types.
	DataType_UINT8    DataType = 100
	DataType_UINT16   DataType = 101
	DataType_UINT32   DataType = 102
	DataType_UINT64   DataType = 103
	DataType_GIN_NULL DataType = 104
)

// Enum value maps for DataType.
var (
	DataType_name = map[int32]string{
		999: "UNKNOWN_DATA",
		0:   "NULL_VALUE_TYPE",
		1:   "INT8",
		2:   "INT16",
		3:   "INT32",
		4:   "INT64",
		5:   "STRING",
		6:   "BOOL",
		7:   "FLOAT",
		8:   "DOUBLE",
		9:   "BINARY",
		10:  "TIMESTAMP",
		11:  "DECIMAL",
		12:  "VARINT",
		13:  "INET",
		14:  "LIST",
		15:  "MAP",
		16:  "SET",
		17:  "UUID",
		18:  "TIMEUUID",
		19:  "TUPLE",
		20:  "TYPEARGS",
		21:  "USER_DEFINED_TYPE",
		22:  "FROZEN",
		23:  "DATE",
		24:  "TIME",
		25:  "JSONB",
		100: "UINT8",
		101: "UINT16",
		102: "UINT32",
		103: "UINT64",
		104: "GIN_NULL",
	}
	DataType_value = map[string]int32{
		"UNKNOWN_DATA":      999,
		"NULL_VALUE_TYPE":   0,
		"INT8":              1,
		"INT16":             2,
		"INT32":             3,
		"INT64":             4,
		"STRING":            5,
		"BOOL":              6,
		"FLOAT":             7,
		"DOUBLE":            8,
		"BINARY":            9,
		"TIMESTAMP":         10,
		"DECIMAL":           11,
		"VARINT":            12,
		"INET":              13,
		"LIST":              14,
		"MAP":               15,
		"SET":               16,
		"UUID":              17,
		"TIMEUUID":          18,
		"TUPLE":             19,
		"TYPEARGS":          20,
		"USER_DEFINED_TYPE": 21,
		"FROZEN":            22,
		"DATE":              23,
		"TIME":              24,
		"JSONB":             25,
		"UINT8":             100,
		"UINT16":            101,
		"UINT32":            102,
		"UINT64":            103,
		"GIN_NULL":          104,
	}
)

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}

func (x DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_value_proto_enumTypes[1].Descriptor()
}

func (DataType) Type() protoreflect.EnumType {
	return &file_yb_common_value_proto_enumTypes[1]
}

func (x DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataType(num)
	return nil
}

// Deprecated: Use DataType.Descriptor instead.
func (DataType) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_value_proto_rawDescGZIP(), []int{1}
}

// Expression operators.
type QLOperator int32

const (
	QLOperator_QL_OP_NOOP QLOperator = 0
	// Logic operators that take one operand.
	QLOperator_QL_OP_NOT      QLOperator = 1
	QLOperator_QL_OP_IS_TRUE  QLOperator = 2
	QLOperator_QL_OP_IS_FALSE QLOperator = 3
	// Logic operators that take two or more operands.
	QLOperator_QL_OP_AND QLOperator = 4
	QLOperator_QL_OP_OR  QLOperator = 5
	// Relation operators that take one operand.
	QLOperator_QL_OP_IS_NULL     QLOperator = 6
	QLOperator_QL_OP_IS_NOT_NULL QLOperator = 7
	// Relation operators that take two operands.
	QLOperator_QL_OP_EQUAL              QLOperator = 8
	QLOperator_QL_OP_LESS_THAN          QLOperator = 9
	QLOperator_QL_OP_LESS_THAN_EQUAL    QLOperator = 10
	QLOperator_QL_OP_GREATER_THAN       QLOperator = 11
	QLOperator_QL_OP_GREATER_THAN_EQUAL QLOperator = 12
	QLOperator_QL_OP_NOT_EQUAL          QLOperator = 13
	QLOperator_QL_OP_LIKE               QLOperator = 14
	QLOperator_QL_OP_NOT_LIKE           QLOperator = 15
	QLOperator_QL_OP_IN                 QLOperator = 16
	QLOperator_QL_OP_NOT_IN             QLOperator = 17
	// Relation operators that take three operands.
	QLOperator_QL_OP_BETWEEN     QLOperator = 18
	QLOperator_QL_OP_NOT_BETWEEN QLOperator = 19
	// Operators that take no operand. For use in "if" clause only currently.
	QLOperator_QL_OP_EXISTS     QLOperator = 20 // IF EXISTS
	QLOperator_QL_OP_NOT_EXISTS QLOperator = 21 // IF NOT EXISTS
)

// Enum value maps for QLOperator.
var (
	QLOperator_name = map[int32]string{
		0:  "QL_OP_NOOP",
		1:  "QL_OP_NOT",
		2:  "QL_OP_IS_TRUE",
		3:  "QL_OP_IS_FALSE",
		4:  "QL_OP_AND",
		5:  "QL_OP_OR",
		6:  "QL_OP_IS_NULL",
		7:  "QL_OP_IS_NOT_NULL",
		8:  "QL_OP_EQUAL",
		9:  "QL_OP_LESS_THAN",
		10: "QL_OP_LESS_THAN_EQUAL",
		11: "QL_OP_GREATER_THAN",
		12: "QL_OP_GREATER_THAN_EQUAL",
		13: "QL_OP_NOT_EQUAL",
		14: "QL_OP_LIKE",
		15: "QL_OP_NOT_LIKE",
		16: "QL_OP_IN",
		17: "QL_OP_NOT_IN",
		18: "QL_OP_BETWEEN",
		19: "QL_OP_NOT_BETWEEN",
		20: "QL_OP_EXISTS",
		21: "QL_OP_NOT_EXISTS",
	}
	QLOperator_value = map[string]int32{
		"QL_OP_NOOP":               0,
		"QL_OP_NOT":                1,
		"QL_OP_IS_TRUE":            2,
		"QL_OP_IS_FALSE":           3,
		"QL_OP_AND":                4,
		"QL_OP_OR":                 5,
		"QL_OP_IS_NULL":            6,
		"QL_OP_IS_NOT_NULL":        7,
		"QL_OP_EQUAL":              8,
		"QL_OP_LESS_THAN":          9,
		"QL_OP_LESS_THAN_EQUAL":    10,
		"QL_OP_GREATER_THAN":       11,
		"QL_OP_GREATER_THAN_EQUAL": 12,
		"QL_OP_NOT_EQUAL":          13,
		"QL_OP_LIKE":               14,
		"QL_OP_NOT_LIKE":           15,
		"QL_OP_IN":                 16,
		"QL_OP_NOT_IN":             17,
		"QL_OP_BETWEEN":            18,
		"QL_OP_NOT_BETWEEN":        19,
		"QL_OP_EXISTS":             20,
		"QL_OP_NOT_EXISTS":         21,
	}
)

func (x QLOperator) Enum() *QLOperator {
	p := new(QLOperator)
	*p = x
	return p
}

func (x QLOperator) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QLOperator) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_common_value_proto_enumTypes[2].Descriptor()
}

func (QLOperator) Type() protoreflect.EnumType {
	return &file_yb_common_value_proto_enumTypes[2]
}

func (x QLOperator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *QLOperator) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = QLOperator(num)
	return nil
}

// Deprecated: Use QLOperator.Descriptor instead.
func (QLOperator) EnumDescriptor() ([]byte, []int) {
	return file_yb_common_value_proto_rawDescGZIP(), []int{2}
}

// Sequence of values used to represent Lists and Sets (and later Tuples)
type QLSeqValuePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elems []*QLValuePB `protobuf:"bytes,1,rep,name=elems" json:"elems,omitempty"`
}

func (x *QLSeqValuePB) Reset() {
	*x = QLSeqValuePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_value_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLSeqValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLSeqValuePB) ProtoMessage() {}

func (x *QLSeqValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_value_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLSeqValuePB.ProtoReflect.Descriptor instead.
func (*QLSeqValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_value_proto_rawDescGZIP(), []int{0}
}

func (x *QLSeqValuePB) GetElems() []*QLValuePB {
	if x != nil {
		return x.Elems
	}
	return nil
}

type QLMapValuePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys   []*QLValuePB `protobuf:"bytes,1,rep,name=keys" json:"keys,omitempty"`
	Values []*QLValuePB `protobuf:"bytes,2,rep,name=values" json:"values,omitempty"`
}

func (x *QLMapValuePB) Reset() {
	*x = QLMapValuePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_value_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLMapValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLMapValuePB) ProtoMessage() {}

func (x *QLMapValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_value_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLMapValuePB.ProtoReflect.Descriptor instead.
func (*QLMapValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_value_proto_rawDescGZIP(), []int{1}
}

func (x *QLMapValuePB) GetKeys() []*QLValuePB {
	if x != nil {
		return x.Keys
	}
	return nil
}

func (x *QLMapValuePB) GetValues() []*QLValuePB {
	if x != nil {
		return x.Values
	}
	return nil
}

// A QL value
type QLValuePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Note: an absent value means NULL
	//
	// Types that are assignable to Value:
	//	*QLValuePB_Int8Value
	//	*QLValuePB_Int16Value
	//	*QLValuePB_Int32Value
	//	*QLValuePB_Int64Value
	//	*QLValuePB_FloatValue
	//	*QLValuePB_DoubleValue
	//	*QLValuePB_StringValue
	//	*QLValuePB_BoolValue
	//	*QLValuePB_TimestampValue
	//	*QLValuePB_BinaryValue
	//	*QLValuePB_InetaddressValue
	//	*QLValuePB_MapValue
	//	*QLValuePB_SetValue
	//	*QLValuePB_ListValue
	//	*QLValuePB_DecimalValue
	//	*QLValuePB_VarintValue
	//	*QLValuePB_FrozenValue
	//	*QLValuePB_UuidValue
	//	*QLValuePB_TimeuuidValue
	//	*QLValuePB_JsonbValue
	//	*QLValuePB_DateValue
	//	*QLValuePB_TimeValue
	//	*QLValuePB_Uint32Value
	//	*QLValuePB_Uint64Value
	//	*QLValuePB_VirtualValue
	//	*QLValuePB_GinNullValue
	Value isQLValuePB_Value `protobuf_oneof:"value"`
}

func (x *QLValuePB) Reset() {
	*x = QLValuePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_value_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QLValuePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QLValuePB) ProtoMessage() {}

func (x *QLValuePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_value_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QLValuePB.ProtoReflect.Descriptor instead.
func (*QLValuePB) Descriptor() ([]byte, []int) {
	return file_yb_common_value_proto_rawDescGZIP(), []int{2}
}

func (m *QLValuePB) GetValue() isQLValuePB_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *QLValuePB) GetInt8Value() int32 {
	if x, ok := x.GetValue().(*QLValuePB_Int8Value); ok {
		return x.Int8Value
	}
	return 0
}

func (x *QLValuePB) GetInt16Value() int32 {
	if x, ok := x.GetValue().(*QLValuePB_Int16Value); ok {
		return x.Int16Value
	}
	return 0
}

func (x *QLValuePB) GetInt32Value() int32 {
	if x, ok := x.GetValue().(*QLValuePB_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (x *QLValuePB) GetInt64Value() int64 {
	if x, ok := x.GetValue().(*QLValuePB_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (x *QLValuePB) GetFloatValue() float32 {
	if x, ok := x.GetValue().(*QLValuePB_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (x *QLValuePB) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*QLValuePB_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *QLValuePB) GetStringValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_StringValue); ok {
		return x.StringValue
	}
	return nil
}

func (x *QLValuePB) GetBoolValue() bool {
	if x, ok := x.GetValue().(*QLValuePB_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *QLValuePB) GetTimestampValue() int64 {
	if x, ok := x.GetValue().(*QLValuePB_TimestampValue); ok {
		return x.TimestampValue
	}
	return 0
}

func (x *QLValuePB) GetBinaryValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_BinaryValue); ok {
		return x.BinaryValue
	}
	return nil
}

func (x *QLValuePB) GetInetaddressValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_InetaddressValue); ok {
		return x.InetaddressValue
	}
	return nil
}

func (x *QLValuePB) GetMapValue() *QLMapValuePB {
	if x, ok := x.GetValue().(*QLValuePB_MapValue); ok {
		return x.MapValue
	}
	return nil
}

func (x *QLValuePB) GetSetValue() *QLSeqValuePB {
	if x, ok := x.GetValue().(*QLValuePB_SetValue); ok {
		return x.SetValue
	}
	return nil
}

func (x *QLValuePB) GetListValue() *QLSeqValuePB {
	if x, ok := x.GetValue().(*QLValuePB_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *QLValuePB) GetDecimalValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_DecimalValue); ok {
		return x.DecimalValue
	}
	return nil
}

func (x *QLValuePB) GetVarintValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_VarintValue); ok {
		return x.VarintValue
	}
	return nil
}

func (x *QLValuePB) GetFrozenValue() *QLSeqValuePB {
	if x, ok := x.GetValue().(*QLValuePB_FrozenValue); ok {
		return x.FrozenValue
	}
	return nil
}

func (x *QLValuePB) GetUuidValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_UuidValue); ok {
		return x.UuidValue
	}
	return nil
}

func (x *QLValuePB) GetTimeuuidValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_TimeuuidValue); ok {
		return x.TimeuuidValue
	}
	return nil
}

func (x *QLValuePB) GetJsonbValue() []byte {
	if x, ok := x.GetValue().(*QLValuePB_JsonbValue); ok {
		return x.JsonbValue
	}
	return nil
}

func (x *QLValuePB) GetDateValue() uint32 {
	if x, ok := x.GetValue().(*QLValuePB_DateValue); ok {
		return x.DateValue
	}
	return 0
}

func (x *QLValuePB) GetTimeValue() int64 {
	if x, ok := x.GetValue().(*QLValuePB_TimeValue); ok {
		return x.TimeValue
	}
	return 0
}

func (x *QLValuePB) GetUint32Value() uint32 {
	if x, ok := x.GetValue().(*QLValuePB_Uint32Value); ok {
		return x.Uint32Value
	}
	return 0
}

func (x *QLValuePB) GetUint64Value() uint64 {
	if x, ok := x.GetValue().(*QLValuePB_Uint64Value); ok {
		return x.Uint64Value
	}
	return 0
}

func (x *QLValuePB) GetVirtualValue() QLVirtualValuePB {
	if x, ok := x.GetValue().(*QLValuePB_VirtualValue); ok {
		return x.VirtualValue
	}
	return QLVirtualValuePB_LIMIT_MAX
}

func (x *QLValuePB) GetGinNullValue() uint32 {
	if x, ok := x.GetValue().(*QLValuePB_GinNullValue); ok {
		return x.GinNullValue
	}
	return 0
}

type isQLValuePB_Value interface {
	isQLValuePB_Value()
}

type QLValuePB_Int8Value struct {
	Int8Value int32 `protobuf:"varint,1,opt,name=int8_value,json=int8Value,oneof"` // Note: min int size in protobuf is int32
}

type QLValuePB_Int16Value struct {
	Int16Value int32 `protobuf:"varint,2,opt,name=int16_value,json=int16Value,oneof"`
}

type QLValuePB_Int32Value struct {
	Int32Value int32 `protobuf:"varint,3,opt,name=int32_value,json=int32Value,oneof"`
}

type QLValuePB_Int64Value struct {
	Int64Value int64 `protobuf:"varint,4,opt,name=int64_value,json=int64Value,oneof"`
}

type QLValuePB_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,5,opt,name=float_value,json=floatValue,oneof"`
}

type QLValuePB_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,6,opt,name=double_value,json=doubleValue,oneof"`
}

type QLValuePB_StringValue struct {
	// Sometimes YB sends non-UTF8 string in string field. For example, this can happen
	// with a collated string: under "en_US.utf8" collation, string 'abc' is encoded
	// as string_value: "\000\201\014\r\016\001\t\t\t\001\t\t\t\000abc" which is not
	// a valid UTF8 string. That is why 'bytes' is used for string_value field.
	StringValue []byte `protobuf:"bytes,7,opt,name=string_value,json=stringValue,oneof"`
}

type QLValuePB_BoolValue struct {
	BoolValue bool `protobuf:"varint,8,opt,name=bool_value,json=boolValue,oneof"`
}

type QLValuePB_TimestampValue struct {
	TimestampValue int64 `protobuf:"varint,9,opt,name=timestamp_value,json=timestampValue,oneof"`
}

type QLValuePB_BinaryValue struct {
	BinaryValue []byte `protobuf:"bytes,10,opt,name=binary_value,json=binaryValue,oneof"`
}

type QLValuePB_InetaddressValue struct {
	// raw bytes for inet address in network byte order.
	InetaddressValue []byte `protobuf:"bytes,11,opt,name=inetaddress_value,json=inetaddressValue,oneof"`
}

type QLValuePB_MapValue struct {
	MapValue *QLMapValuePB `protobuf:"bytes,12,opt,name=map_value,json=mapValue,oneof"`
}

type QLValuePB_SetValue struct {
	SetValue *QLSeqValuePB `protobuf:"bytes,13,opt,name=set_value,json=setValue,oneof"`
}

type QLValuePB_ListValue struct {
	ListValue *QLSeqValuePB `protobuf:"bytes,14,opt,name=list_value,json=listValue,oneof"`
}

type QLValuePB_DecimalValue struct {
	DecimalValue []byte `protobuf:"bytes,15,opt,name=decimal_value,json=decimalValue,oneof"`
}

type QLValuePB_VarintValue struct {
	VarintValue []byte `protobuf:"bytes,16,opt,name=varint_value,json=varintValue,oneof"`
}

type QLValuePB_FrozenValue struct {
	FrozenValue *QLSeqValuePB `protobuf:"bytes,17,opt,name=frozen_value,json=frozenValue,oneof"`
}

type QLValuePB_UuidValue struct {
	// raw bytes for uuid value.
	UuidValue []byte `protobuf:"bytes,18,opt,name=uuid_value,json=uuidValue,oneof"`
}

type QLValuePB_TimeuuidValue struct {
	// raw bytes for timeuuid value.
	TimeuuidValue []byte `protobuf:"bytes,19,opt,name=timeuuid_value,json=timeuuidValue,oneof"`
}

type QLValuePB_JsonbValue struct {
	JsonbValue []byte `protobuf:"bytes,20,opt,name=jsonb_value,json=jsonbValue,oneof"`
}

type QLValuePB_DateValue struct {
	// Number of days where 2^31 corresponds to 1970-01-01
	// (see DateTime::DateFromString)
	DateValue uint32 `protobuf:"varint,21,opt,name=date_value,json=dateValue,oneof"`
}

type QLValuePB_TimeValue struct {
	// Number of nano-seconds, from 0 to (24 * 60 * 60 * 1,000,000,000 - 1)
	// (see DateTime::kMaxTime)
	TimeValue int64 `protobuf:"varint,22,opt,name=time_value,json=timeValue,oneof"`
}

type QLValuePB_Uint32Value struct {
	Uint32Value uint32 `protobuf:"varint,23,opt,name=uint32_value,json=uint32Value,oneof"`
}

type QLValuePB_Uint64Value struct {
	Uint64Value uint64 `protobuf:"varint,24,opt,name=uint64_value,json=uint64Value,oneof"`
}

type QLValuePB_VirtualValue struct {
	// Represent various system values.
	VirtualValue QLVirtualValuePB `protobuf:"varint,25,opt,name=virtual_value,json=virtualValue,enum=yb.QLVirtualValuePB,oneof"`
}

type QLValuePB_GinNullValue struct {
	// Null category for GIN indexes.
	GinNullValue uint32 `protobuf:"varint,26,opt,name=gin_null_value,json=ginNullValue,oneof"`
}

func (*QLValuePB_Int8Value) isQLValuePB_Value() {}

func (*QLValuePB_Int16Value) isQLValuePB_Value() {}

func (*QLValuePB_Int32Value) isQLValuePB_Value() {}

func (*QLValuePB_Int64Value) isQLValuePB_Value() {}

func (*QLValuePB_FloatValue) isQLValuePB_Value() {}

func (*QLValuePB_DoubleValue) isQLValuePB_Value() {}

func (*QLValuePB_StringValue) isQLValuePB_Value() {}

func (*QLValuePB_BoolValue) isQLValuePB_Value() {}

func (*QLValuePB_TimestampValue) isQLValuePB_Value() {}

func (*QLValuePB_BinaryValue) isQLValuePB_Value() {}

func (*QLValuePB_InetaddressValue) isQLValuePB_Value() {}

func (*QLValuePB_MapValue) isQLValuePB_Value() {}

func (*QLValuePB_SetValue) isQLValuePB_Value() {}

func (*QLValuePB_ListValue) isQLValuePB_Value() {}

func (*QLValuePB_DecimalValue) isQLValuePB_Value() {}

func (*QLValuePB_VarintValue) isQLValuePB_Value() {}

func (*QLValuePB_FrozenValue) isQLValuePB_Value() {}

func (*QLValuePB_UuidValue) isQLValuePB_Value() {}

func (*QLValuePB_TimeuuidValue) isQLValuePB_Value() {}

func (*QLValuePB_JsonbValue) isQLValuePB_Value() {}

func (*QLValuePB_DateValue) isQLValuePB_Value() {}

func (*QLValuePB_TimeValue) isQLValuePB_Value() {}

func (*QLValuePB_Uint32Value) isQLValuePB_Value() {}

func (*QLValuePB_Uint64Value) isQLValuePB_Value() {}

func (*QLValuePB_VirtualValue) isQLValuePB_Value() {}

func (*QLValuePB_GinNullValue) isQLValuePB_Value() {}

type DatumMessagePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColumnName *string `protobuf:"bytes,1,opt,name=column_name,json=columnName" json:"column_name,omitempty"`
	ColumnType *int64  `protobuf:"varint,2,opt,name=column_type,json=columnType" json:"column_type,omitempty"`
	// Types that are assignable to Datum:
	//	*DatumMessagePB_DatumInt32
	//	*DatumMessagePB_DatumInt64
	//	*DatumMessagePB_DatumFloat
	//	*DatumMessagePB_DatumDouble
	//	*DatumMessagePB_DatumBool
	//	*DatumMessagePB_DatumString
	//	*DatumMessagePB_DatumBytes
	//	*DatumMessagePB_DatumMissing
	Datum isDatumMessagePB_Datum `protobuf_oneof:"datum"`
}

func (x *DatumMessagePB) Reset() {
	*x = DatumMessagePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_common_value_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatumMessagePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatumMessagePB) ProtoMessage() {}

func (x *DatumMessagePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_common_value_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatumMessagePB.ProtoReflect.Descriptor instead.
func (*DatumMessagePB) Descriptor() ([]byte, []int) {
	return file_yb_common_value_proto_rawDescGZIP(), []int{3}
}

func (x *DatumMessagePB) GetColumnName() string {
	if x != nil && x.ColumnName != nil {
		return *x.ColumnName
	}
	return ""
}

func (x *DatumMessagePB) GetColumnType() int64 {
	if x != nil && x.ColumnType != nil {
		return *x.ColumnType
	}
	return 0
}

func (m *DatumMessagePB) GetDatum() isDatumMessagePB_Datum {
	if m != nil {
		return m.Datum
	}
	return nil
}

func (x *DatumMessagePB) GetDatumInt32() int32 {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumInt32); ok {
		return x.DatumInt32
	}
	return 0
}

func (x *DatumMessagePB) GetDatumInt64() int64 {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumInt64); ok {
		return x.DatumInt64
	}
	return 0
}

func (x *DatumMessagePB) GetDatumFloat() float32 {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumFloat); ok {
		return x.DatumFloat
	}
	return 0
}

func (x *DatumMessagePB) GetDatumDouble() float64 {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumDouble); ok {
		return x.DatumDouble
	}
	return 0
}

func (x *DatumMessagePB) GetDatumBool() bool {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumBool); ok {
		return x.DatumBool
	}
	return false
}

func (x *DatumMessagePB) GetDatumString() string {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumString); ok {
		return x.DatumString
	}
	return ""
}

func (x *DatumMessagePB) GetDatumBytes() []byte {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumBytes); ok {
		return x.DatumBytes
	}
	return nil
}

func (x *DatumMessagePB) GetDatumMissing() bool {
	if x, ok := x.GetDatum().(*DatumMessagePB_DatumMissing); ok {
		return x.DatumMissing
	}
	return false
}

type isDatumMessagePB_Datum interface {
	isDatumMessagePB_Datum()
}

type DatumMessagePB_DatumInt32 struct {
	DatumInt32 int32 `protobuf:"varint,3,opt,name=datum_int32,json=datumInt32,oneof"`
}

type DatumMessagePB_DatumInt64 struct {
	DatumInt64 int64 `protobuf:"varint,4,opt,name=datum_int64,json=datumInt64,oneof"`
}

type DatumMessagePB_DatumFloat struct {
	DatumFloat float32 `protobuf:"fixed32,5,opt,name=datum_float,json=datumFloat,oneof"`
}

type DatumMessagePB_DatumDouble struct {
	DatumDouble float64 `protobuf:"fixed64,6,opt,name=datum_double,json=datumDouble,oneof"`
}

type DatumMessagePB_DatumBool struct {
	DatumBool bool `protobuf:"varint,7,opt,name=datum_bool,json=datumBool,oneof"`
}

type DatumMessagePB_DatumString struct {
	DatumString string `protobuf:"bytes,8,opt,name=datum_string,json=datumString,oneof"`
}

type DatumMessagePB_DatumBytes struct {
	DatumBytes []byte `protobuf:"bytes,9,opt,name=datum_bytes,json=datumBytes,oneof"`
}

type DatumMessagePB_DatumMissing struct {
	DatumMissing bool `protobuf:"varint,10,opt,name=datum_missing,json=datumMissing,oneof"`
}

func (*DatumMessagePB_DatumInt32) isDatumMessagePB_Datum() {}

func (*DatumMessagePB_DatumInt64) isDatumMessagePB_Datum() {}

func (*DatumMessagePB_DatumFloat) isDatumMessagePB_Datum() {}

func (*DatumMessagePB_DatumDouble) isDatumMessagePB_Datum() {}

func (*DatumMessagePB_DatumBool) isDatumMessagePB_Datum() {}

func (*DatumMessagePB_DatumString) isDatumMessagePB_Datum() {}

func (*DatumMessagePB_DatumBytes) isDatumMessagePB_Datum() {}

func (*DatumMessagePB_DatumMissing) isDatumMessagePB_Datum() {}

var File_yb_common_value_proto protoreflect.FileDescriptor

var file_yb_common_value_proto_rawDesc = []byte{
	0x0a, 0x15, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x02, 0x79, 0x62, 0x22, 0x33, 0x0a, 0x0c, 0x51,
	0x4c, 0x53, 0x65, 0x71, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x23, 0x0a, 0x05, 0x65,
	0x6c, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e,
	0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x05, 0x65, 0x6c, 0x65, 0x6d, 0x73,
	0x22, 0x58, 0x0a, 0x0c, 0x51, 0x4c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42,
	0x12, 0x21, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x50, 0x42, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0xa1, 0x08, 0x0a, 0x09, 0x51,
	0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x38,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x09,
	0x69, 0x6e, 0x74, 0x38, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x31, 0x36, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x21, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x29, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x62,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2d, 0x0a, 0x11, 0x69, 0x6e, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x10, 0x69,
	0x6e, 0x65, 0x74, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x2f, 0x0a, 0x09, 0x6d, 0x61, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x2f, 0x0a, 0x09, 0x73, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x53, 0x65, 0x71, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x08, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x31, 0x0a, 0x0a, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x53, 0x65, 0x71,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x76,
	0x61, 0x72, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0c, 0x48, 0x00, 0x52, 0x0b, 0x76, 0x61, 0x72, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x35, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x53, 0x65,
	0x71, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x7a,
	0x65, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x75, 0x69, 0x64, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x09, 0x75,
	0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x27, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x65,
	0x75, 0x75, 0x69, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0c,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x75, 0x75, 0x69, 0x64, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x21, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x75,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x04, 0x48, 0x00, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x3b, 0x0a, 0x0d, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x48, 0x00, 0x52,
	0x0c, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x26, 0x0a,
	0x0e, 0x67, 0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6c, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0c, 0x67, 0x69, 0x6e, 0x4e, 0x75, 0x6c, 0x6c,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf9,
	0x02, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x75, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x42, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x0a, 0x64,
	0x61, 0x74, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x61, 0x74,
	0x75, 0x6d, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00,
	0x52, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x23, 0x0a, 0x0c,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x42, 0x6f,
	0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x61, 0x74, 0x75,
	0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a, 0x0b, 0x64, 0x61, 0x74, 0x75, 0x6d,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a,
	0x64, 0x61, 0x74, 0x75, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0d, 0x64, 0x61,
	0x74, 0x75, 0x6d, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x42, 0x07, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x75, 0x6d, 0x2a, 0x30, 0x0a, 0x10, 0x51, 0x4c,
	0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x12, 0x0d,
	0x0a, 0x09, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x58, 0x10, 0x01, 0x12, 0x0d, 0x0a,
	0x09, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x10, 0x02, 0x2a, 0x94, 0x03, 0x0a,
	0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0c, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0xe7, 0x07, 0x12, 0x13, 0x0a, 0x0f,
	0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x4e, 0x54, 0x31, 0x36, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c,
	0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x07, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x49, 0x4e,
	0x41, 0x52, 0x59, 0x10, 0x09, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41,
	0x4d, 0x50, 0x10, 0x0a, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10,
	0x0b, 0x12, 0x0a, 0x0a, 0x06, 0x56, 0x41, 0x52, 0x49, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x08, 0x0a,
	0x04, 0x49, 0x4e, 0x45, 0x54, 0x10, 0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10,
	0x0e, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x50, 0x10, 0x0f, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x45,
	0x54, 0x10, 0x10, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x10, 0x11, 0x12, 0x0c, 0x0a,
	0x08, 0x54, 0x49, 0x4d, 0x45, 0x55, 0x55, 0x49, 0x44, 0x10, 0x12, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x55, 0x50, 0x4c, 0x45, 0x10, 0x13, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x59, 0x50, 0x45, 0x41, 0x52,
	0x47, 0x53, 0x10, 0x14, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46,
	0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x46,
	0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x16, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10,
	0x17, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x18, 0x12, 0x09, 0x0a, 0x05, 0x4a,
	0x53, 0x4f, 0x4e, 0x42, 0x10, 0x19, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e, 0x54, 0x38, 0x10,
	0x64, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x66, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x10, 0x67, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x49, 0x4e, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x68, 0x2a, 0xbb, 0x03, 0x0a, 0x0a, 0x51, 0x4c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x4f, 0x50,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x53, 0x5f, 0x54, 0x52,
	0x55, 0x45, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x53,
	0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x51, 0x4c, 0x5f, 0x4f,
	0x50, 0x5f, 0x41, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x4c, 0x5f, 0x4f, 0x50,
	0x5f, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x49,
	0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x4c, 0x5f, 0x4f,
	0x50, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x07, 0x12,
	0x0f, 0x0a, 0x0b, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x08,
	0x12, 0x13, 0x0a, 0x0f, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x0a,
	0x12, 0x16, 0x0a, 0x12, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x51, 0x4c, 0x5f, 0x4f,
	0x50, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x10, 0x0c, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x51,
	0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x51,
	0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x10, 0x0f, 0x12,
	0x0c, 0x0a, 0x08, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x49, 0x4e, 0x10, 0x10, 0x12, 0x10, 0x0a,
	0x0c, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x10, 0x11, 0x12,
	0x11, 0x0a, 0x0d, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e,
	0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f,
	0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x10, 0x13, 0x12, 0x10, 0x0a, 0x0c, 0x51, 0x4c, 0x5f,
	0x4f, 0x50, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10, 0x14, 0x12, 0x14, 0x0a, 0x10, 0x51,
	0x4c, 0x5f, 0x4f, 0x50, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x15, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62,
}

var (
	file_yb_common_value_proto_rawDescOnce sync.Once
	file_yb_common_value_proto_rawDescData = file_yb_common_value_proto_rawDesc
)

func file_yb_common_value_proto_rawDescGZIP() []byte {
	file_yb_common_value_proto_rawDescOnce.Do(func() {
		file_yb_common_value_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_common_value_proto_rawDescData)
	})
	return file_yb_common_value_proto_rawDescData
}

var file_yb_common_value_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yb_common_value_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_yb_common_value_proto_goTypes = []interface{}{
	(QLVirtualValuePB)(0),  // 0: yb.QLVirtualValuePB
	(DataType)(0),          // 1: yb.DataType
	(QLOperator)(0),        // 2: yb.QLOperator
	(*QLSeqValuePB)(nil),   // 3: yb.QLSeqValuePB
	(*QLMapValuePB)(nil),   // 4: yb.QLMapValuePB
	(*QLValuePB)(nil),      // 5: yb.QLValuePB
	(*DatumMessagePB)(nil), // 6: yb.DatumMessagePB
}
var file_yb_common_value_proto_depIdxs = []int32{
	5, // 0: yb.QLSeqValuePB.elems:type_name -> yb.QLValuePB
	5, // 1: yb.QLMapValuePB.keys:type_name -> yb.QLValuePB
	5, // 2: yb.QLMapValuePB.values:type_name -> yb.QLValuePB
	4, // 3: yb.QLValuePB.map_value:type_name -> yb.QLMapValuePB
	3, // 4: yb.QLValuePB.set_value:type_name -> yb.QLSeqValuePB
	3, // 5: yb.QLValuePB.list_value:type_name -> yb.QLSeqValuePB
	3, // 6: yb.QLValuePB.frozen_value:type_name -> yb.QLSeqValuePB
	0, // 7: yb.QLValuePB.virtual_value:type_name -> yb.QLVirtualValuePB
	8, // [8:8] is the sub-list for method output_type
	8, // [8:8] is the sub-list for method input_type
	8, // [8:8] is the sub-list for extension type_name
	8, // [8:8] is the sub-list for extension extendee
	0, // [0:8] is the sub-list for field type_name
}

func init() { file_yb_common_value_proto_init() }
func file_yb_common_value_proto_init() {
	if File_yb_common_value_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_yb_common_value_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLSeqValuePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_value_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLMapValuePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_value_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QLValuePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_common_value_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatumMessagePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_yb_common_value_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*QLValuePB_Int8Value)(nil),
		(*QLValuePB_Int16Value)(nil),
		(*QLValuePB_Int32Value)(nil),
		(*QLValuePB_Int64Value)(nil),
		(*QLValuePB_FloatValue)(nil),
		(*QLValuePB_DoubleValue)(nil),
		(*QLValuePB_StringValue)(nil),
		(*QLValuePB_BoolValue)(nil),
		(*QLValuePB_TimestampValue)(nil),
		(*QLValuePB_BinaryValue)(nil),
		(*QLValuePB_InetaddressValue)(nil),
		(*QLValuePB_MapValue)(nil),
		(*QLValuePB_SetValue)(nil),
		(*QLValuePB_ListValue)(nil),
		(*QLValuePB_DecimalValue)(nil),
		(*QLValuePB_VarintValue)(nil),
		(*QLValuePB_FrozenValue)(nil),
		(*QLValuePB_UuidValue)(nil),
		(*QLValuePB_TimeuuidValue)(nil),
		(*QLValuePB_JsonbValue)(nil),
		(*QLValuePB_DateValue)(nil),
		(*QLValuePB_TimeValue)(nil),
		(*QLValuePB_Uint32Value)(nil),
		(*QLValuePB_Uint64Value)(nil),
		(*QLValuePB_VirtualValue)(nil),
		(*QLValuePB_GinNullValue)(nil),
	}
	file_yb_common_value_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*DatumMessagePB_DatumInt32)(nil),
		(*DatumMessagePB_DatumInt64)(nil),
		(*DatumMessagePB_DatumFloat)(nil),
		(*DatumMessagePB_DatumDouble)(nil),
		(*DatumMessagePB_DatumBool)(nil),
		(*DatumMessagePB_DatumString)(nil),
		(*DatumMessagePB_DatumBytes)(nil),
		(*DatumMessagePB_DatumMissing)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_common_value_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_common_value_proto_goTypes,
		DependencyIndexes: file_yb_common_value_proto_depIdxs,
		EnumInfos:         file_yb_common_value_proto_enumTypes,
		MessageInfos:      file_yb_common_value_proto_msgTypes,
	}.Build()
	File_yb_common_value_proto = out.File
	file_yb_common_value_proto_rawDesc = nil
	file_yb_common_value_proto_goTypes = nil
	file_yb_common_value_proto_depIdxs = nil
}
