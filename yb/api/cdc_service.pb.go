// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: yb/cdc/cdc_service.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CDCRecordType int32

const (
	CDCRecordType_CHANGE CDCRecordType = 1
	CDCRecordType_AFTER  CDCRecordType = 2
	CDCRecordType_ALL    CDCRecordType = 3
)

// Enum value maps for CDCRecordType.
var (
	CDCRecordType_name = map[int32]string{
		1: "CHANGE",
		2: "AFTER",
		3: "ALL",
	}
	CDCRecordType_value = map[string]int32{
		"CHANGE": 1,
		"AFTER":  2,
		"ALL":    3,
	}
)

func (x CDCRecordType) Enum() *CDCRecordType {
	p := new(CDCRecordType)
	*p = x
	return p
}

func (x CDCRecordType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCRecordType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[0].Descriptor()
}

func (CDCRecordType) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[0]
}

func (x CDCRecordType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCRecordType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCRecordType(num)
	return nil
}

// Deprecated: Use CDCRecordType.Descriptor instead.
func (CDCRecordType) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{0}
}

type CDCRecordFormat int32

const (
	CDCRecordFormat_JSON CDCRecordFormat = 1
	CDCRecordFormat_WAL  CDCRecordFormat = 2 // Used for 2DC.
)

// Enum value maps for CDCRecordFormat.
var (
	CDCRecordFormat_name = map[int32]string{
		1: "JSON",
		2: "WAL",
	}
	CDCRecordFormat_value = map[string]int32{
		"JSON": 1,
		"WAL":  2,
	}
)

func (x CDCRecordFormat) Enum() *CDCRecordFormat {
	p := new(CDCRecordFormat)
	*p = x
	return p
}

func (x CDCRecordFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCRecordFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[1].Descriptor()
}

func (CDCRecordFormat) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[1]
}

func (x CDCRecordFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCRecordFormat) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCRecordFormat(num)
	return nil
}

// Deprecated: Use CDCRecordFormat.Descriptor instead.
func (CDCRecordFormat) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{1}
}

type CDCErrorPB_Code int32

const (
	// An error which has no more specific error code.
	// The code and message in 'status' may reveal more details.
	//
	// RPCs should avoid returning this, since callers will not be
	// able to easily parse the error.
	CDCErrorPB_UNKNOWN_ERROR        CDCErrorPB_Code = 1
	CDCErrorPB_TABLET_NOT_FOUND     CDCErrorPB_Code = 2
	CDCErrorPB_TABLE_NOT_FOUND      CDCErrorPB_Code = 3
	CDCErrorPB_SUBSCRIBER_NOT_FOUND CDCErrorPB_Code = 4
	CDCErrorPB_CHECKPOINT_TOO_OLD   CDCErrorPB_Code = 5
	CDCErrorPB_TABLET_NOT_RUNNING   CDCErrorPB_Code = 6
	CDCErrorPB_NOT_LEADER           CDCErrorPB_Code = 7 // deprecated. use TABLET_NOT_FOUND
	CDCErrorPB_LEADER_NOT_READY     CDCErrorPB_Code = 11
	CDCErrorPB_NOT_RUNNING          CDCErrorPB_Code = 8
	CDCErrorPB_INTERNAL_ERROR       CDCErrorPB_Code = 9
	CDCErrorPB_INVALID_REQUEST      CDCErrorPB_Code = 10
)

// Enum value maps for CDCErrorPB_Code.
var (
	CDCErrorPB_Code_name = map[int32]string{
		1:  "UNKNOWN_ERROR",
		2:  "TABLET_NOT_FOUND",
		3:  "TABLE_NOT_FOUND",
		4:  "SUBSCRIBER_NOT_FOUND",
		5:  "CHECKPOINT_TOO_OLD",
		6:  "TABLET_NOT_RUNNING",
		7:  "NOT_LEADER",
		11: "LEADER_NOT_READY",
		8:  "NOT_RUNNING",
		9:  "INTERNAL_ERROR",
		10: "INVALID_REQUEST",
	}
	CDCErrorPB_Code_value = map[string]int32{
		"UNKNOWN_ERROR":        1,
		"TABLET_NOT_FOUND":     2,
		"TABLE_NOT_FOUND":      3,
		"SUBSCRIBER_NOT_FOUND": 4,
		"CHECKPOINT_TOO_OLD":   5,
		"TABLET_NOT_RUNNING":   6,
		"NOT_LEADER":           7,
		"LEADER_NOT_READY":     11,
		"NOT_RUNNING":          8,
		"INTERNAL_ERROR":       9,
		"INVALID_REQUEST":      10,
	}
)

func (x CDCErrorPB_Code) Enum() *CDCErrorPB_Code {
	p := new(CDCErrorPB_Code)
	*p = x
	return p
}

func (x CDCErrorPB_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCErrorPB_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[2].Descriptor()
}

func (CDCErrorPB_Code) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[2]
}

func (x CDCErrorPB_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCErrorPB_Code) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCErrorPB_Code(num)
	return nil
}

// Deprecated: Use CDCErrorPB_Code.Descriptor instead.
func (CDCErrorPB_Code) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{0, 0}
}

type CDCRecordPB_OperationType int32

const (
	CDCRecordPB_WRITE  CDCRecordPB_OperationType = 1
	CDCRecordPB_DELETE CDCRecordPB_OperationType = 2
	CDCRecordPB_APPLY  CDCRecordPB_OperationType = 3
)

// Enum value maps for CDCRecordPB_OperationType.
var (
	CDCRecordPB_OperationType_name = map[int32]string{
		1: "WRITE",
		2: "DELETE",
		3: "APPLY",
	}
	CDCRecordPB_OperationType_value = map[string]int32{
		"WRITE":  1,
		"DELETE": 2,
		"APPLY":  3,
	}
)

func (x CDCRecordPB_OperationType) Enum() *CDCRecordPB_OperationType {
	p := new(CDCRecordPB_OperationType)
	*p = x
	return p
}

func (x CDCRecordPB_OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CDCRecordPB_OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_cdc_cdc_service_proto_enumTypes[3].Descriptor()
}

func (CDCRecordPB_OperationType) Type() protoreflect.EnumType {
	return &file_yb_cdc_cdc_service_proto_enumTypes[3]
}

func (x CDCRecordPB_OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *CDCRecordPB_OperationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = CDCRecordPB_OperationType(num)
	return nil
}

// Deprecated: Use CDCRecordPB_OperationType.Descriptor instead.
func (CDCRecordPB_OperationType) EnumDescriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{11, 0}
}

type CDCErrorPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code.
	Code *CDCErrorPB_Code `protobuf:"varint,1,opt,name=code,enum=yb.cdc.CDCErrorPB_Code,def=1" json:"code,omitempty"`
	// The Status object for the error. This will include a textual
	// message that may be more useful to present in log messages, etc,
	// though its error code is less specific.
	Status *AppStatusPB `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

// Default values for CDCErrorPB fields.
const (
	Default_CDCErrorPB_Code = CDCErrorPB_UNKNOWN_ERROR
)

func (x *CDCErrorPB) Reset() {
	*x = CDCErrorPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCErrorPB) ProtoMessage() {}

func (x *CDCErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCErrorPB.ProtoReflect.Descriptor instead.
func (*CDCErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{0}
}

func (x *CDCErrorPB) GetCode() CDCErrorPB_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return Default_CDCErrorPB_Code
}

func (x *CDCErrorPB) GetStatus() *AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type CreateCDCStreamRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Table to set up CDC on.
	TableId      *string          `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	RecordType   *CDCRecordType   `protobuf:"varint,2,opt,name=record_type,json=recordType,enum=yb.cdc.CDCRecordType,def=1" json:"record_type,omitempty"`
	RecordFormat *CDCRecordFormat `protobuf:"varint,3,opt,name=record_format,json=recordFormat,enum=yb.cdc.CDCRecordFormat,def=1" json:"record_format,omitempty"`
}

// Default values for CreateCDCStreamRequestPB fields.
const (
	Default_CreateCDCStreamRequestPB_RecordType   = CDCRecordType_CHANGE
	Default_CreateCDCStreamRequestPB_RecordFormat = CDCRecordFormat_JSON
)

func (x *CreateCDCStreamRequestPB) Reset() {
	*x = CreateCDCStreamRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamRequestPB) ProtoMessage() {}

func (x *CreateCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{1}
}

func (x *CreateCDCStreamRequestPB) GetTableId() string {
	if x != nil && x.TableId != nil {
		return *x.TableId
	}
	return ""
}

func (x *CreateCDCStreamRequestPB) GetRecordType() CDCRecordType {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return Default_CreateCDCStreamRequestPB_RecordType
}

func (x *CreateCDCStreamRequestPB) GetRecordFormat() CDCRecordFormat {
	if x != nil && x.RecordFormat != nil {
		return *x.RecordFormat
	}
	return Default_CreateCDCStreamRequestPB_RecordFormat
}

type CreateCDCStreamResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error    *CDCErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StreamId []byte      `protobuf:"bytes,2,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *CreateCDCStreamResponsePB) Reset() {
	*x = CreateCDCStreamResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCDCStreamResponsePB) ProtoMessage() {}

func (x *CreateCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*CreateCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCDCStreamResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CreateCDCStreamResponsePB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type DeleteCDCStreamRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId [][]byte `protobuf:"bytes,1,rep,name=stream_id,json=streamId" json:"stream_id,omitempty"`
}

func (x *DeleteCDCStreamRequestPB) Reset() {
	*x = DeleteCDCStreamRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCDCStreamRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamRequestPB) ProtoMessage() {}

func (x *DeleteCDCStreamRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteCDCStreamRequestPB) GetStreamId() [][]byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

type DeleteCDCStreamResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *CDCErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteCDCStreamResponsePB) Reset() {
	*x = DeleteCDCStreamResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCDCStreamResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCDCStreamResponsePB) ProtoMessage() {}

func (x *DeleteCDCStreamResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCDCStreamResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteCDCStreamResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteCDCStreamResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type CDCListTabletsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId *string `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// local_only = true will only list tablets local to the tserver that receives the request.
	// local_only = false will list  all tablets for the stream.
	LocalOnly *bool `protobuf:"varint,2,opt,name=local_only,json=localOnly,def=0" json:"local_only,omitempty"`
}

// Default values for CDCListTabletsRequestPB fields.
const (
	Default_CDCListTabletsRequestPB_LocalOnly = bool(false)
)

func (x *CDCListTabletsRequestPB) Reset() {
	*x = CDCListTabletsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCListTabletsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCListTabletsRequestPB) ProtoMessage() {}

func (x *CDCListTabletsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCListTabletsRequestPB.ProtoReflect.Descriptor instead.
func (*CDCListTabletsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{5}
}

func (x *CDCListTabletsRequestPB) GetStreamId() string {
	if x != nil && x.StreamId != nil {
		return *x.StreamId
	}
	return ""
}

func (x *CDCListTabletsRequestPB) GetLocalOnly() bool {
	if x != nil && x.LocalOnly != nil {
		return *x.LocalOnly
	}
	return Default_CDCListTabletsRequestPB_LocalOnly
}

type CDCListTabletsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *CDCErrorPB    `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Tablets []*CDCTabletPB `protobuf:"bytes,2,rep,name=tablets" json:"tablets,omitempty"`
}

func (x *CDCListTabletsResponsePB) Reset() {
	*x = CDCListTabletsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCListTabletsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCListTabletsResponsePB) ProtoMessage() {}

func (x *CDCListTabletsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCListTabletsResponsePB.ProtoReflect.Descriptor instead.
func (*CDCListTabletsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{6}
}

func (x *CDCListTabletsResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CDCListTabletsResponsePB) GetTablets() []*CDCTabletPB {
	if x != nil {
		return x.Tablets
	}
	return nil
}

type CDCTabletPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Tservers holding data for the tablet.
	Tservers []*CDCTabletPB_ReplicaPB `protobuf:"bytes,2,rep,name=tservers" json:"tservers,omitempty"`
}

func (x *CDCTabletPB) Reset() {
	*x = CDCTabletPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCTabletPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCTabletPB) ProtoMessage() {}

func (x *CDCTabletPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCTabletPB.ProtoReflect.Descriptor instead.
func (*CDCTabletPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{7}
}

func (x *CDCTabletPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *CDCTabletPB) GetTservers() []*CDCTabletPB_ReplicaPB {
	if x != nil {
		return x.Tservers
	}
	return nil
}

type CDCCheckpointPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OpId *OpIdPB `protobuf:"bytes,1,opt,name=op_id,json=opId" json:"op_id,omitempty"`
}

func (x *CDCCheckpointPB) Reset() {
	*x = CDCCheckpointPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCCheckpointPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCCheckpointPB) ProtoMessage() {}

func (x *CDCCheckpointPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCCheckpointPB.ProtoReflect.Descriptor instead.
func (*CDCCheckpointPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{8}
}

func (x *CDCCheckpointPB) GetOpId() *OpIdPB {
	if x != nil {
		return x.OpId
	}
	return nil
}

type GetChangesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId []byte `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	// Tablet to get the changes for.
	TabletId []byte `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Checkpoint to start reading from (exclusive).
	// Start reading from the first record after this checkpoint.
	FromCheckpoint *CDCCheckpointPB `protobuf:"bytes,3,opt,name=from_checkpoint,json=fromCheckpoint" json:"from_checkpoint,omitempty"`
	// Maximum records to read.
	MaxRecords *uint32 `protobuf:"varint,4,opt,name=max_records,json=maxRecords" json:"max_records,omitempty"`
	// Whether the caller knows the tablet address or needs to use us as a proxy.
	ServeAsProxy *bool `protobuf:"varint,5,opt,name=serve_as_proxy,json=serveAsProxy,def=1" json:"serve_as_proxy,omitempty"`
}

// Default values for GetChangesRequestPB fields.
const (
	Default_GetChangesRequestPB_ServeAsProxy = bool(true)
)

func (x *GetChangesRequestPB) Reset() {
	*x = GetChangesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChangesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangesRequestPB) ProtoMessage() {}

func (x *GetChangesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangesRequestPB.ProtoReflect.Descriptor instead.
func (*GetChangesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{9}
}

func (x *GetChangesRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *GetChangesRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetChangesRequestPB) GetFromCheckpoint() *CDCCheckpointPB {
	if x != nil {
		return x.FromCheckpoint
	}
	return nil
}

func (x *GetChangesRequestPB) GetMaxRecords() uint32 {
	if x != nil && x.MaxRecords != nil {
		return *x.MaxRecords
	}
	return 0
}

func (x *GetChangesRequestPB) GetServeAsProxy() bool {
	if x != nil && x.ServeAsProxy != nil {
		return *x.ServeAsProxy
	}
	return Default_GetChangesRequestPB_ServeAsProxy
}

type CDCKeyValuePairPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   []byte     `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value *QLValuePB `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
}

func (x *CDCKeyValuePairPB) Reset() {
	*x = CDCKeyValuePairPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCKeyValuePairPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCKeyValuePairPB) ProtoMessage() {}

func (x *CDCKeyValuePairPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCKeyValuePairPB.ProtoReflect.Descriptor instead.
func (*CDCKeyValuePairPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{10}
}

func (x *CDCKeyValuePairPB) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CDCKeyValuePairPB) GetValue() *QLValuePB {
	if x != nil {
		return x.Value
	}
	return nil
}

type CDCRecordPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time      *uint64                    `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Operation *CDCRecordPB_OperationType `protobuf:"varint,2,opt,name=operation,enum=yb.cdc.CDCRecordPB_OperationType" json:"operation,omitempty"`
	// Primary key of the record that changed
	Key []*CDCKeyValuePairPB `protobuf:"bytes,3,rep,name=key" json:"key,omitempty"`
	// Key-value pairs (column_name : value) of changes / before record / after record
	Changes          []*CDCKeyValuePairPB   `protobuf:"bytes,4,rep,name=changes" json:"changes,omitempty"`
	Before           []*CDCKeyValuePairPB   `protobuf:"bytes,5,rep,name=before" json:"before,omitempty"` // NOT CURRENTLY USED
	After            []*CDCKeyValuePairPB   `protobuf:"bytes,6,rep,name=after" json:"after,omitempty"`   // NOT CURRENTLY USED
	TransactionState *TransactionStatePB `protobuf:"bytes,7,opt,name=transaction_state,json=transactionState" json:"transaction_state,omitempty"`
	// If transaction_state.status is APPLYING, then partitions will contain the partition for the
	// tablet being polled.
	Partition *PartitionPB `protobuf:"bytes,9,opt,name=partition" json:"partition,omitempty"`
}

func (x *CDCRecordPB) Reset() {
	*x = CDCRecordPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCRecordPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCRecordPB) ProtoMessage() {}

func (x *CDCRecordPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCRecordPB.ProtoReflect.Descriptor instead.
func (*CDCRecordPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{11}
}

func (x *CDCRecordPB) GetTime() uint64 {
	if x != nil && x.Time != nil {
		return *x.Time
	}
	return 0
}

func (x *CDCRecordPB) GetOperation() CDCRecordPB_OperationType {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return CDCRecordPB_WRITE
}

func (x *CDCRecordPB) GetKey() []*CDCKeyValuePairPB {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CDCRecordPB) GetChanges() []*CDCKeyValuePairPB {
	if x != nil {
		return x.Changes
	}
	return nil
}

func (x *CDCRecordPB) GetBefore() []*CDCKeyValuePairPB {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *CDCRecordPB) GetAfter() []*CDCKeyValuePairPB {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *CDCRecordPB) GetTransactionState() *TransactionStatePB {
	if x != nil {
		return x.TransactionState
	}
	return nil
}

func (x *CDCRecordPB) GetPartition() *PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

type GetChangesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *CDCErrorPB      `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	RecordType   *CDCRecordType   `protobuf:"varint,2,opt,name=record_type,json=recordType,enum=yb.cdc.CDCRecordType,def=1" json:"record_type,omitempty"`
	RecordFormat *CDCRecordFormat `protobuf:"varint,3,opt,name=record_format,json=recordFormat,enum=yb.cdc.CDCRecordFormat" json:"record_format,omitempty"`
	Records      []*CDCRecordPB   `protobuf:"bytes,4,rep,name=records" json:"records,omitempty"`
	// Checkpoint that consumers can send back in GetChanges RPC
	// to mark CDC records until this checkpoint as committed.
	Checkpoint *CDCCheckpointPB `protobuf:"bytes,5,opt,name=checkpoint" json:"checkpoint,omitempty"`
	// In case the tablet is no longer hosted on this tserver, provide the list of tservers holding
	// data for the tablet.
	Tserver []*HostPortPB `protobuf:"bytes,6,rep,name=tserver" json:"tserver,omitempty"`
}

// Default values for GetChangesResponsePB fields.
const (
	Default_GetChangesResponsePB_RecordType = CDCRecordType_CHANGE
)

func (x *GetChangesResponsePB) Reset() {
	*x = GetChangesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChangesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChangesResponsePB) ProtoMessage() {}

func (x *GetChangesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChangesResponsePB.ProtoReflect.Descriptor instead.
func (*GetChangesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{12}
}

func (x *GetChangesResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetChangesResponsePB) GetRecordType() CDCRecordType {
	if x != nil && x.RecordType != nil {
		return *x.RecordType
	}
	return Default_GetChangesResponsePB_RecordType
}

func (x *GetChangesResponsePB) GetRecordFormat() CDCRecordFormat {
	if x != nil && x.RecordFormat != nil {
		return *x.RecordFormat
	}
	return CDCRecordFormat_JSON
}

func (x *GetChangesResponsePB) GetRecords() []*CDCRecordPB {
	if x != nil {
		return x.Records
	}
	return nil
}

func (x *GetChangesResponsePB) GetCheckpoint() *CDCCheckpointPB {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

func (x *GetChangesResponsePB) GetTserver() []*HostPortPB {
	if x != nil {
		return x.Tserver
	}
	return nil
}

type GetCheckpointRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StreamId []byte `protobuf:"bytes,1,opt,name=stream_id,json=streamId" json:"stream_id,omitempty"`
	TabletId []byte `protobuf:"bytes,2,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
}

func (x *GetCheckpointRequestPB) Reset() {
	*x = GetCheckpointRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCheckpointRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckpointRequestPB) ProtoMessage() {}

func (x *GetCheckpointRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckpointRequestPB.ProtoReflect.Descriptor instead.
func (*GetCheckpointRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetCheckpointRequestPB) GetStreamId() []byte {
	if x != nil {
		return x.StreamId
	}
	return nil
}

func (x *GetCheckpointRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type GetCheckpointResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      *CDCErrorPB      `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Checkpoint *CDCCheckpointPB `protobuf:"bytes,2,opt,name=checkpoint" json:"checkpoint,omitempty"`
}

func (x *GetCheckpointResponsePB) Reset() {
	*x = GetCheckpointResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCheckpointResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCheckpointResponsePB) ProtoMessage() {}

func (x *GetCheckpointResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCheckpointResponsePB.ProtoReflect.Descriptor instead.
func (*GetCheckpointResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetCheckpointResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetCheckpointResponsePB) GetCheckpoint() *CDCCheckpointPB {
	if x != nil {
		return x.Checkpoint
	}
	return nil
}

type UpdateCdcReplicatedIndexRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tablet being updated.
	TabletId []byte `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Minimum replicated index across all the streams for this tablet.
	ReplicatedIndex *int64 `protobuf:"varint,2,opt,name=replicated_index,json=replicatedIndex" json:"replicated_index,omitempty"`
}

func (x *UpdateCdcReplicatedIndexRequestPB) Reset() {
	*x = UpdateCdcReplicatedIndexRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCdcReplicatedIndexRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCdcReplicatedIndexRequestPB) ProtoMessage() {}

func (x *UpdateCdcReplicatedIndexRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCdcReplicatedIndexRequestPB.ProtoReflect.Descriptor instead.
func (*UpdateCdcReplicatedIndexRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *UpdateCdcReplicatedIndexRequestPB) GetReplicatedIndex() int64 {
	if x != nil && x.ReplicatedIndex != nil {
		return *x.ReplicatedIndex
	}
	return 0
}

type UpdateCdcReplicatedIndexResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *CDCErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *UpdateCdcReplicatedIndexResponsePB) Reset() {
	*x = UpdateCdcReplicatedIndexResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateCdcReplicatedIndexResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateCdcReplicatedIndexResponsePB) ProtoMessage() {}

func (x *UpdateCdcReplicatedIndexResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateCdcReplicatedIndexResponsePB.ProtoReflect.Descriptor instead.
func (*UpdateCdcReplicatedIndexResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateCdcReplicatedIndexResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type BootstrapProducerRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableIds []string `protobuf:"bytes,1,rep,name=table_ids,json=tableIds" json:"table_ids,omitempty"`
}

func (x *BootstrapProducerRequestPB) Reset() {
	*x = BootstrapProducerRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapProducerRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapProducerRequestPB) ProtoMessage() {}

func (x *BootstrapProducerRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapProducerRequestPB.ProtoReflect.Descriptor instead.
func (*BootstrapProducerRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{17}
}

func (x *BootstrapProducerRequestPB) GetTableIds() []string {
	if x != nil {
		return x.TableIds
	}
	return nil
}

type BootstrapProducerResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           *CDCErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	CdcBootstrapIds [][]byte    `protobuf:"bytes,2,rep,name=cdc_bootstrap_ids,json=cdcBootstrapIds" json:"cdc_bootstrap_ids,omitempty"`
}

func (x *BootstrapProducerResponsePB) Reset() {
	*x = BootstrapProducerResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootstrapProducerResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootstrapProducerResponsePB) ProtoMessage() {}

func (x *BootstrapProducerResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootstrapProducerResponsePB.ProtoReflect.Descriptor instead.
func (*BootstrapProducerResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{18}
}

func (x *BootstrapProducerResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BootstrapProducerResponsePB) GetCdcBootstrapIds() [][]byte {
	if x != nil {
		return x.CdcBootstrapIds
	}
	return nil
}

type GetLatestEntryOpIdRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
}

func (x *GetLatestEntryOpIdRequestPB) Reset() {
	*x = GetLatestEntryOpIdRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestEntryOpIdRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestEntryOpIdRequestPB) ProtoMessage() {}

func (x *GetLatestEntryOpIdRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestEntryOpIdRequestPB.ProtoReflect.Descriptor instead.
func (*GetLatestEntryOpIdRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{19}
}

func (x *GetLatestEntryOpIdRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type GetLatestEntryOpIdResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *CDCErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	OpId  *OpIdPB     `protobuf:"bytes,2,opt,name=op_id,json=opId" json:"op_id,omitempty"`
}

func (x *GetLatestEntryOpIdResponsePB) Reset() {
	*x = GetLatestEntryOpIdResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLatestEntryOpIdResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLatestEntryOpIdResponsePB) ProtoMessage() {}

func (x *GetLatestEntryOpIdResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLatestEntryOpIdResponsePB.ProtoReflect.Descriptor instead.
func (*GetLatestEntryOpIdResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{20}
}

func (x *GetLatestEntryOpIdResponsePB) GetError() *CDCErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLatestEntryOpIdResponsePB) GetOpId() *OpIdPB {
	if x != nil {
		return x.OpId
	}
	return nil
}

type CDCTabletPB_ReplicaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BroadcastAddresses []*HostPortPB `protobuf:"bytes,1,rep,name=broadcast_addresses,json=broadcastAddresses" json:"broadcast_addresses,omitempty"` // Don't use private_rpc_addresses since we're cross-universe
}

func (x *CDCTabletPB_ReplicaPB) Reset() {
	*x = CDCTabletPB_ReplicaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_cdc_cdc_service_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CDCTabletPB_ReplicaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CDCTabletPB_ReplicaPB) ProtoMessage() {}

func (x *CDCTabletPB_ReplicaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_cdc_cdc_service_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CDCTabletPB_ReplicaPB.ProtoReflect.Descriptor instead.
func (*CDCTabletPB_ReplicaPB) Descriptor() ([]byte, []int) {
	return file_yb_cdc_cdc_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *CDCTabletPB_ReplicaPB) GetBroadcastAddresses() []*HostPortPB {
	if x != nil {
		return x.BroadcastAddresses
	}
	return nil
}

var File_yb_cdc_cdc_service_proto protoreflect.FileDescriptor

var file_yb_cdc_cdc_service_proto_rawDesc = []byte{
	0x0a, 0x18, 0x79, 0x62, 0x2f, 0x63, 0x64, 0x63, 0x2f, 0x63, 0x64, 0x63, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x18, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x79, 0x62, 0x2f,
	0x75, 0x74, 0x69, 0x6c, 0x2f, 0x6f, 0x70, 0x69, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xe2, 0x02, 0x0a, 0x0a, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x3a,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x3a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e,
	0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0xee, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x55,
	0x42, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55,
	0x4e, 0x44, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x50, 0x4f, 0x49,
	0x4e, 0x54, 0x5f, 0x54, 0x4f, 0x4f, 0x5f, 0x4f, 0x4c, 0x44, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x10, 0x06, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x54, 0x5f, 0x4c, 0x45, 0x41, 0x44,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x45, 0x41, 0x44, 0x45, 0x52, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x0b, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f,
	0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x12,
	0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x45,
	0x53, 0x54, 0x10, 0x0a, 0x22, 0xb9, 0x01, 0x0a, 0x18, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x0b,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45,
	0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x42, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x3a, 0x04, 0x4a, 0x53,
	0x4f, 0x4e, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x22, 0x62, 0x0a, 0x19, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44,
	0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x22, 0x45, 0x0a,
	0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0x59, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0a, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4f, 0x6e, 0x6c, 0x79, 0x22,
	0x70, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x2d, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50, 0x42, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x22, 0xb3, 0x01, 0x0a, 0x0b, 0x43, 0x44, 0x43, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x50,
	0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x39,
	0x0a, 0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x50, 0x42, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x50, 0x42, 0x52,
	0x08, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x1a, 0x4c, 0x0a, 0x09, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x50, 0x42, 0x12, 0x3f, 0x0a, 0x13, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63,
	0x61, 0x73, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72,
	0x74, 0x50, 0x42, 0x52, 0x12, 0x62, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x0f, 0x43, 0x44, 0x43, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x12, 0x1f, 0x0a, 0x05, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e, 0x4f,
	0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x22, 0xde, 0x01, 0x0a, 0x13,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x40, 0x0a,
	0x0f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x43, 0x44, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52,
	0x0e, 0x66, 0x72, 0x6f, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x2a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x5f, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x6f,
	0x78, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x41, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x22, 0x47, 0x0a, 0x0e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x42, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xcb, 0x03, 0x0a, 0x0b, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x50, 0x42, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50,
	0x42, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x65, 0x66, 0x6f, 0x72, 0x65,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x06,
	0x62, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x12, 0x2c, 0x0a, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x50, 0x61, 0x69, 0x72, 0x50, 0x42, 0x52, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52,
	0x10, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x2d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x31, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x52, 0x49, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x50, 0x50, 0x4c,
	0x59, 0x10, 0x03, 0x22, 0xd0, 0x02, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0b, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62,
	0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x3a, 0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x0a, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3c, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43,
	0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x50, 0x42, 0x52, 0x07, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x43, 0x44, 0x43, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42,
	0x52, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x07,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x79, 0x62, 0x2e, 0x48, 0x6f, 0x73, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x42, 0x52, 0x07, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x52, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x7c, 0x0a, 0x17, 0x47, 0x65,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44,
	0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12,
	0x37, 0x0a, 0x0a, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x42, 0x52, 0x0a, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x6b, 0x0a, 0x21, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x43, 0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x29, 0x0a, 0x10, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x4e, 0x0a, 0x22, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43,
	0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e,
	0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x39, 0x0a, 0x1a, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x73,
	0x22, 0x73, 0x0a, 0x1b, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x64, 0x63,
	0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x64, 0x63, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x49, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65,
	0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x69, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x28, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43, 0x44, 0x43, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x6f,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x79, 0x62, 0x2e,
	0x4f, 0x70, 0x49, 0x64, 0x50, 0x42, 0x52, 0x04, 0x6f, 0x70, 0x49, 0x64, 0x2a, 0x2f, 0x0a, 0x0d,
	0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x46, 0x54,
	0x45, 0x52, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4c, 0x4c, 0x10, 0x03, 0x2a, 0x24, 0x0a,
	0x0f, 0x43, 0x44, 0x43, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x53, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x41,
	0x4c, 0x10, 0x02, 0x32, 0xd5, 0x05, 0x0a, 0x0a, 0x43, 0x44, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x56, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x0f, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x20, 0x2e,
	0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x44, 0x43,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x21, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x44, 0x43, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x4a, 0x0a, 0x0b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x12, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x47,
	0x0a, 0x0a, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x1b, 0x2e, 0x79,
	0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64,
	0x63, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x71, 0x0a, 0x18, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x43, 0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x64, 0x63, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5c, 0x0a, 0x11,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x72, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x42,
	0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x5f, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64,
	0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x61, 0x74,
	0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x70, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x42, 0x0c, 0x0a, 0x0a, 0x6f,
	0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x64, 0x63,
}

var (
	file_yb_cdc_cdc_service_proto_rawDescOnce sync.Once
	file_yb_cdc_cdc_service_proto_rawDescData = file_yb_cdc_cdc_service_proto_rawDesc
)

func file_yb_cdc_cdc_service_proto_rawDescGZIP() []byte {
	file_yb_cdc_cdc_service_proto_rawDescOnce.Do(func() {
		file_yb_cdc_cdc_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_cdc_cdc_service_proto_rawDescData)
	})
	return file_yb_cdc_cdc_service_proto_rawDescData
}

var file_yb_cdc_cdc_service_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_yb_cdc_cdc_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_yb_cdc_cdc_service_proto_goTypes = []interface{}{
	(CDCRecordType)(0),                         // 0: yb.cdc.CDCRecordType
	(CDCRecordFormat)(0),                       // 1: yb.cdc.CDCRecordFormat
	(CDCErrorPB_Code)(0),                       // 2: yb.cdc.CDCErrorPB.Code
	(CDCRecordPB_OperationType)(0),             // 3: yb.cdc.CDCRecordPB.OperationType
	(*CDCErrorPB)(nil),                         // 4: yb.cdc.CDCErrorPB
	(*CreateCDCStreamRequestPB)(nil),           // 5: yb.cdc.CreateCDCStreamRequestPB
	(*CreateCDCStreamResponsePB)(nil),          // 6: yb.cdc.CreateCDCStreamResponsePB
	(*DeleteCDCStreamRequestPB)(nil),           // 7: yb.cdc.DeleteCDCStreamRequestPB
	(*DeleteCDCStreamResponsePB)(nil),          // 8: yb.cdc.DeleteCDCStreamResponsePB
	(*CDCListTabletsRequestPB)(nil),               // 9: yb.cdc.CDCListTabletsRequestPB
	(*CDCListTabletsResponsePB)(nil),              // 10: yb.cdc.CDCListTabletsResponsePB
	(*CDCTabletPB)(nil),                        // 11: yb.cdc.CDCTabletPB
	(*CDCCheckpointPB)(nil),                    // 12: yb.cdc.CDCCheckpointPB
	(*GetChangesRequestPB)(nil),                // 13: yb.cdc.GetChangesRequestPB
	(*CDCKeyValuePairPB)(nil),                     // 14: yb.cdc.CDCKeyValuePairPB
	(*CDCRecordPB)(nil),                        // 15: yb.cdc.CDCRecordPB
	(*GetChangesResponsePB)(nil),               // 16: yb.cdc.GetChangesResponsePB
	(*GetCheckpointRequestPB)(nil),             // 17: yb.cdc.GetCheckpointRequestPB
	(*GetCheckpointResponsePB)(nil),            // 18: yb.cdc.GetCheckpointResponsePB
	(*UpdateCdcReplicatedIndexRequestPB)(nil),  // 19: yb.cdc.UpdateCdcReplicatedIndexRequestPB
	(*UpdateCdcReplicatedIndexResponsePB)(nil), // 20: yb.cdc.UpdateCdcReplicatedIndexResponsePB
	(*BootstrapProducerRequestPB)(nil),         // 21: yb.cdc.BootstrapProducerRequestPB
	(*BootstrapProducerResponsePB)(nil),        // 22: yb.cdc.BootstrapProducerResponsePB
	(*GetLatestEntryOpIdRequestPB)(nil),        // 23: yb.cdc.GetLatestEntryOpIdRequestPB
	(*GetLatestEntryOpIdResponsePB)(nil),       // 24: yb.cdc.GetLatestEntryOpIdResponsePB
	(*CDCTabletPB_ReplicaPB)(nil),              // 25: yb.cdc.CDCTabletPB.ReplicaPB
	(*AppStatusPB)(nil),                        // 26: yb.AppStatusPB
	(*OpIdPB)(nil),                             // 27: yb.OpIdPB
	(*QLValuePB)(nil),                          // 28: yb.QLValuePB
	(*TransactionStatePB)(nil),                 // 29: yb.tserver.TransactionStatePB
	(*PartitionPB)(nil),                        // 30: yb.PartitionPB
	(*HostPortPB)(nil),                         // 31: yb.HostPortPB
}
var file_yb_cdc_cdc_service_proto_depIdxs = []int32{
	2,  // 0: yb.cdc.CDCErrorPB.code:type_name -> yb.cdc.CDCErrorPB.Code
	26, // 1: yb.cdc.CDCErrorPB.status:type_name -> yb.AppStatusPB
	0,  // 2: yb.cdc.CreateCDCStreamRequestPB.record_type:type_name -> yb.cdc.CDCRecordType
	1,  // 3: yb.cdc.CreateCDCStreamRequestPB.record_format:type_name -> yb.cdc.CDCRecordFormat
	4,  // 4: yb.cdc.CreateCDCStreamResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	4,  // 5: yb.cdc.DeleteCDCStreamResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	4,  // 6: yb.cdc.CDCListTabletsResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	11, // 7: yb.cdc.CDCListTabletsResponsePB.tablets:type_name -> yb.cdc.CDCTabletPB
	25, // 8: yb.cdc.CDCTabletPB.tservers:type_name -> yb.cdc.CDCTabletPB.ReplicaPB
	27, // 9: yb.cdc.CDCCheckpointPB.op_id:type_name -> yb.OpIdPB
	12, // 10: yb.cdc.GetChangesRequestPB.from_checkpoint:type_name -> yb.cdc.CDCCheckpointPB
	28, // 11: yb.cdc.CDCKeyValuePairPB.value:type_name -> yb.QLValuePB
	3,  // 12: yb.cdc.CDCRecordPB.operation:type_name -> yb.cdc.CDCRecordPB.OperationType
	14, // 13: yb.cdc.CDCRecordPB.key:type_name -> yb.cdc.CDCKeyValuePairPB
	14, // 14: yb.cdc.CDCRecordPB.changes:type_name -> yb.cdc.CDCKeyValuePairPB
	14, // 15: yb.cdc.CDCRecordPB.before:type_name -> yb.cdc.CDCKeyValuePairPB
	14, // 16: yb.cdc.CDCRecordPB.after:type_name -> yb.cdc.CDCKeyValuePairPB
	29, // 17: yb.cdc.CDCRecordPB.transaction_state:type_name -> yb.tserver.TransactionStatePB
	30, // 18: yb.cdc.CDCRecordPB.partition:type_name -> yb.PartitionPB
	4,  // 19: yb.cdc.GetChangesResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	0,  // 20: yb.cdc.GetChangesResponsePB.record_type:type_name -> yb.cdc.CDCRecordType
	1,  // 21: yb.cdc.GetChangesResponsePB.record_format:type_name -> yb.cdc.CDCRecordFormat
	15, // 22: yb.cdc.GetChangesResponsePB.records:type_name -> yb.cdc.CDCRecordPB
	12, // 23: yb.cdc.GetChangesResponsePB.checkpoint:type_name -> yb.cdc.CDCCheckpointPB
	31, // 24: yb.cdc.GetChangesResponsePB.tserver:type_name -> yb.HostPortPB
	4,  // 25: yb.cdc.GetCheckpointResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	12, // 26: yb.cdc.GetCheckpointResponsePB.checkpoint:type_name -> yb.cdc.CDCCheckpointPB
	4,  // 27: yb.cdc.UpdateCdcReplicatedIndexResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	4,  // 28: yb.cdc.BootstrapProducerResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	4,  // 29: yb.cdc.GetLatestEntryOpIdResponsePB.error:type_name -> yb.cdc.CDCErrorPB
	27, // 30: yb.cdc.GetLatestEntryOpIdResponsePB.op_id:type_name -> yb.OpIdPB
	31, // 31: yb.cdc.CDCTabletPB.ReplicaPB.broadcast_addresses:type_name -> yb.HostPortPB
	5,  // 32: yb.cdc.CDCService.CreateCDCStream:input_type -> yb.cdc.CreateCDCStreamRequestPB
	7,  // 33: yb.cdc.CDCService.DeleteCDCStream:input_type -> yb.cdc.DeleteCDCStreamRequestPB
	9,  // 34: yb.cdc.CDCService.ListTablets:input_type -> yb.cdc.CDCListTabletsRequestPB
	13, // 35: yb.cdc.CDCService.GetChanges:input_type -> yb.cdc.GetChangesRequestPB
	17, // 36: yb.cdc.CDCService.GetCheckpoint:input_type -> yb.cdc.GetCheckpointRequestPB
	19, // 37: yb.cdc.CDCService.UpdateCdcReplicatedIndex:input_type -> yb.cdc.UpdateCdcReplicatedIndexRequestPB
	21, // 38: yb.cdc.CDCService.BootstrapProducer:input_type -> yb.cdc.BootstrapProducerRequestPB
	23, // 39: yb.cdc.CDCService.GetLatestEntryOpId:input_type -> yb.cdc.GetLatestEntryOpIdRequestPB
	6,  // 40: yb.cdc.CDCService.CreateCDCStream:output_type -> yb.cdc.CreateCDCStreamResponsePB
	8,  // 41: yb.cdc.CDCService.DeleteCDCStream:output_type -> yb.cdc.DeleteCDCStreamResponsePB
	10, // 42: yb.cdc.CDCService.ListTablets:output_type -> yb.cdc.CDCListTabletsResponsePB
	16, // 43: yb.cdc.CDCService.GetChanges:output_type -> yb.cdc.GetChangesResponsePB
	18, // 44: yb.cdc.CDCService.GetCheckpoint:output_type -> yb.cdc.GetCheckpointResponsePB
	20, // 45: yb.cdc.CDCService.UpdateCdcReplicatedIndex:output_type -> yb.cdc.UpdateCdcReplicatedIndexResponsePB
	22, // 46: yb.cdc.CDCService.BootstrapProducer:output_type -> yb.cdc.BootstrapProducerResponsePB
	24, // 47: yb.cdc.CDCService.GetLatestEntryOpId:output_type -> yb.cdc.GetLatestEntryOpIdResponsePB
	40, // [40:48] is the sub-list for method output_type
	32, // [32:40] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_yb_cdc_cdc_service_proto_init() }
func file_yb_cdc_cdc_service_proto_init() {
	if File_yb_cdc_cdc_service_proto != nil {
		return
	}
	file_yb_common_common_proto_init()
	file_yb_common_wire_protocol_proto_init()
	file_yb_master_master_proto_init()
	file_yb_tserver_tserver_proto_init()
	file_yb_util_opid_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_cdc_cdc_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCErrorPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCDCStreamRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateCDCStreamResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCDCStreamRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCDCStreamResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCListTabletsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCListTabletsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCTabletPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCCheckpointPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChangesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCKeyValuePairPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCRecordPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChangesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCheckpointRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCheckpointResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCdcReplicatedIndexRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateCdcReplicatedIndexResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapProducerRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootstrapProducerResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestEntryOpIdRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLatestEntryOpIdResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_cdc_cdc_service_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CDCTabletPB_ReplicaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_cdc_cdc_service_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_cdc_cdc_service_proto_goTypes,
		DependencyIndexes: file_yb_cdc_cdc_service_proto_depIdxs,
		EnumInfos:         file_yb_cdc_cdc_service_proto_enumTypes,
		MessageInfos:      file_yb_cdc_cdc_service_proto_msgTypes,
	}.Build()
	File_yb_cdc_cdc_service_proto = out.File
	file_yb_cdc_cdc_service_proto_rawDesc = nil
	file_yb_cdc_cdc_service_proto_goTypes = nil
	file_yb_cdc_cdc_service_proto_depIdxs = nil
}
