// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/master/master_replication.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterReplicationClient is the client API for MasterReplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterReplicationClient interface {
	ValidateReplicationInfo(ctx context.Context, in *ValidateReplicationInfoRequestPB, opts ...grpc.CallOption) (*ValidateReplicationInfoResponsePB, error)
	// CDC stream RPCs.
	CreateCDCStream(ctx context.Context, in *CreateCDCStreamRequestPB, opts ...grpc.CallOption) (*CreateCDCStreamResponsePB, error)
	DeleteCDCStream(ctx context.Context, in *DeleteCDCStreamRequestPB, opts ...grpc.CallOption) (*DeleteCDCStreamResponsePB, error)
	ListCDCStreams(ctx context.Context, in *ListCDCStreamsRequestPB, opts ...grpc.CallOption) (*ListCDCStreamsResponsePB, error)
	GetCDCStream(ctx context.Context, in *GetCDCStreamRequestPB, opts ...grpc.CallOption) (*GetCDCStreamResponsePB, error)
	GetCDCDBStreamInfo(ctx context.Context, in *GetCDCDBStreamInfoRequestPB, opts ...grpc.CallOption) (*GetCDCDBStreamInfoResponsePB, error)
	UpdateCDCStream(ctx context.Context, in *UpdateCDCStreamRequestPB, opts ...grpc.CallOption) (*UpdateCDCStreamResponsePB, error)
	SetupUniverseReplication(ctx context.Context, in *SetupUniverseReplicationRequestPB, opts ...grpc.CallOption) (*SetupUniverseReplicationResponsePB, error)
	DeleteUniverseReplication(ctx context.Context, in *DeleteUniverseReplicationRequestPB, opts ...grpc.CallOption) (*DeleteUniverseReplicationResponsePB, error)
	AlterUniverseReplication(ctx context.Context, in *AlterUniverseReplicationRequestPB, opts ...grpc.CallOption) (*AlterUniverseReplicationResponsePB, error)
	SetUniverseReplicationEnabled(ctx context.Context, in *SetUniverseReplicationEnabledRequestPB, opts ...grpc.CallOption) (*SetUniverseReplicationEnabledResponsePB, error)
	GetUniverseReplication(ctx context.Context, in *GetUniverseReplicationRequestPB, opts ...grpc.CallOption) (*GetUniverseReplicationResponsePB, error)
	IsSetupUniverseReplicationDone(ctx context.Context, in *IsSetupUniverseReplicationDoneRequestPB, opts ...grpc.CallOption) (*IsSetupUniverseReplicationDoneResponsePB, error)
	UpdateConsumerOnProducerSplit(ctx context.Context, in *UpdateConsumerOnProducerSplitRequestPB, opts ...grpc.CallOption) (*UpdateConsumerOnProducerSplitResponsePB, error)
}

type masterReplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterReplicationClient(cc grpc.ClientConnInterface) MasterReplicationClient {
	return &masterReplicationClient{cc}
}

func (c *masterReplicationClient) ValidateReplicationInfo(ctx context.Context, in *ValidateReplicationInfoRequestPB, opts ...grpc.CallOption) (*ValidateReplicationInfoResponsePB, error) {
	out := new(ValidateReplicationInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/ValidateReplicationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) CreateCDCStream(ctx context.Context, in *CreateCDCStreamRequestPB, opts ...grpc.CallOption) (*CreateCDCStreamResponsePB, error) {
	out := new(CreateCDCStreamResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/CreateCDCStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) DeleteCDCStream(ctx context.Context, in *DeleteCDCStreamRequestPB, opts ...grpc.CallOption) (*DeleteCDCStreamResponsePB, error) {
	out := new(DeleteCDCStreamResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/DeleteCDCStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) ListCDCStreams(ctx context.Context, in *ListCDCStreamsRequestPB, opts ...grpc.CallOption) (*ListCDCStreamsResponsePB, error) {
	out := new(ListCDCStreamsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/ListCDCStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) GetCDCStream(ctx context.Context, in *GetCDCStreamRequestPB, opts ...grpc.CallOption) (*GetCDCStreamResponsePB, error) {
	out := new(GetCDCStreamResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/GetCDCStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) GetCDCDBStreamInfo(ctx context.Context, in *GetCDCDBStreamInfoRequestPB, opts ...grpc.CallOption) (*GetCDCDBStreamInfoResponsePB, error) {
	out := new(GetCDCDBStreamInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/GetCDCDBStreamInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) UpdateCDCStream(ctx context.Context, in *UpdateCDCStreamRequestPB, opts ...grpc.CallOption) (*UpdateCDCStreamResponsePB, error) {
	out := new(UpdateCDCStreamResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/UpdateCDCStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) SetupUniverseReplication(ctx context.Context, in *SetupUniverseReplicationRequestPB, opts ...grpc.CallOption) (*SetupUniverseReplicationResponsePB, error) {
	out := new(SetupUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/SetupUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) DeleteUniverseReplication(ctx context.Context, in *DeleteUniverseReplicationRequestPB, opts ...grpc.CallOption) (*DeleteUniverseReplicationResponsePB, error) {
	out := new(DeleteUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/DeleteUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) AlterUniverseReplication(ctx context.Context, in *AlterUniverseReplicationRequestPB, opts ...grpc.CallOption) (*AlterUniverseReplicationResponsePB, error) {
	out := new(AlterUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/AlterUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) SetUniverseReplicationEnabled(ctx context.Context, in *SetUniverseReplicationEnabledRequestPB, opts ...grpc.CallOption) (*SetUniverseReplicationEnabledResponsePB, error) {
	out := new(SetUniverseReplicationEnabledResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/SetUniverseReplicationEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) GetUniverseReplication(ctx context.Context, in *GetUniverseReplicationRequestPB, opts ...grpc.CallOption) (*GetUniverseReplicationResponsePB, error) {
	out := new(GetUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/GetUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) IsSetupUniverseReplicationDone(ctx context.Context, in *IsSetupUniverseReplicationDoneRequestPB, opts ...grpc.CallOption) (*IsSetupUniverseReplicationDoneResponsePB, error) {
	out := new(IsSetupUniverseReplicationDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/IsSetupUniverseReplicationDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterReplicationClient) UpdateConsumerOnProducerSplit(ctx context.Context, in *UpdateConsumerOnProducerSplitRequestPB, opts ...grpc.CallOption) (*UpdateConsumerOnProducerSplitResponsePB, error) {
	out := new(UpdateConsumerOnProducerSplitResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterReplication/UpdateConsumerOnProducerSplit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterReplicationServer is the server API for MasterReplication service.
// All implementations should embed UnimplementedMasterReplicationServer
// for forward compatibility
type MasterReplicationServer interface {
	ValidateReplicationInfo(context.Context, *ValidateReplicationInfoRequestPB) (*ValidateReplicationInfoResponsePB, error)
	// CDC stream RPCs.
	CreateCDCStream(context.Context, *CreateCDCStreamRequestPB) (*CreateCDCStreamResponsePB, error)
	DeleteCDCStream(context.Context, *DeleteCDCStreamRequestPB) (*DeleteCDCStreamResponsePB, error)
	ListCDCStreams(context.Context, *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error)
	GetCDCStream(context.Context, *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error)
	GetCDCDBStreamInfo(context.Context, *GetCDCDBStreamInfoRequestPB) (*GetCDCDBStreamInfoResponsePB, error)
	UpdateCDCStream(context.Context, *UpdateCDCStreamRequestPB) (*UpdateCDCStreamResponsePB, error)
	SetupUniverseReplication(context.Context, *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error)
	DeleteUniverseReplication(context.Context, *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error)
	AlterUniverseReplication(context.Context, *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error)
	SetUniverseReplicationEnabled(context.Context, *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error)
	GetUniverseReplication(context.Context, *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error)
	IsSetupUniverseReplicationDone(context.Context, *IsSetupUniverseReplicationDoneRequestPB) (*IsSetupUniverseReplicationDoneResponsePB, error)
	UpdateConsumerOnProducerSplit(context.Context, *UpdateConsumerOnProducerSplitRequestPB) (*UpdateConsumerOnProducerSplitResponsePB, error)
}

// UnimplementedMasterReplicationServer should be embedded to have forward compatible implementations.
type UnimplementedMasterReplicationServer struct {
}

func (UnimplementedMasterReplicationServer) ValidateReplicationInfo(context.Context, *ValidateReplicationInfoRequestPB) (*ValidateReplicationInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidateReplicationInfo not implemented")
}
func (UnimplementedMasterReplicationServer) CreateCDCStream(context.Context, *CreateCDCStreamRequestPB) (*CreateCDCStreamResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCDCStream not implemented")
}
func (UnimplementedMasterReplicationServer) DeleteCDCStream(context.Context, *DeleteCDCStreamRequestPB) (*DeleteCDCStreamResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCDCStream not implemented")
}
func (UnimplementedMasterReplicationServer) ListCDCStreams(context.Context, *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCDCStreams not implemented")
}
func (UnimplementedMasterReplicationServer) GetCDCStream(context.Context, *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDCStream not implemented")
}
func (UnimplementedMasterReplicationServer) GetCDCDBStreamInfo(context.Context, *GetCDCDBStreamInfoRequestPB) (*GetCDCDBStreamInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDCDBStreamInfo not implemented")
}
func (UnimplementedMasterReplicationServer) UpdateCDCStream(context.Context, *UpdateCDCStreamRequestPB) (*UpdateCDCStreamResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCDCStream not implemented")
}
func (UnimplementedMasterReplicationServer) SetupUniverseReplication(context.Context, *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupUniverseReplication not implemented")
}
func (UnimplementedMasterReplicationServer) DeleteUniverseReplication(context.Context, *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUniverseReplication not implemented")
}
func (UnimplementedMasterReplicationServer) AlterUniverseReplication(context.Context, *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterUniverseReplication not implemented")
}
func (UnimplementedMasterReplicationServer) SetUniverseReplicationEnabled(context.Context, *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUniverseReplicationEnabled not implemented")
}
func (UnimplementedMasterReplicationServer) GetUniverseReplication(context.Context, *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniverseReplication not implemented")
}
func (UnimplementedMasterReplicationServer) IsSetupUniverseReplicationDone(context.Context, *IsSetupUniverseReplicationDoneRequestPB) (*IsSetupUniverseReplicationDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSetupUniverseReplicationDone not implemented")
}
func (UnimplementedMasterReplicationServer) UpdateConsumerOnProducerSplit(context.Context, *UpdateConsumerOnProducerSplitRequestPB) (*UpdateConsumerOnProducerSplitResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumerOnProducerSplit not implemented")
}

// UnsafeMasterReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterReplicationServer will
// result in compilation errors.
type UnsafeMasterReplicationServer interface {
	mustEmbedUnimplementedMasterReplicationServer()
}

func RegisterMasterReplicationServer(s grpc.ServiceRegistrar, srv MasterReplicationServer) {
	s.RegisterService(&MasterReplication_ServiceDesc, srv)
}

func _MasterReplication_ValidateReplicationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidateReplicationInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).ValidateReplicationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/ValidateReplicationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).ValidateReplicationInfo(ctx, req.(*ValidateReplicationInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_CreateCDCStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCDCStreamRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).CreateCDCStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/CreateCDCStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).CreateCDCStream(ctx, req.(*CreateCDCStreamRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_DeleteCDCStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCDCStreamRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).DeleteCDCStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/DeleteCDCStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).DeleteCDCStream(ctx, req.(*DeleteCDCStreamRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_ListCDCStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCDCStreamsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).ListCDCStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/ListCDCStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).ListCDCStreams(ctx, req.(*ListCDCStreamsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_GetCDCStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCDCStreamRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).GetCDCStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/GetCDCStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).GetCDCStream(ctx, req.(*GetCDCStreamRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_GetCDCDBStreamInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCDCDBStreamInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).GetCDCDBStreamInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/GetCDCDBStreamInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).GetCDCDBStreamInfo(ctx, req.(*GetCDCDBStreamInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_UpdateCDCStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCDCStreamRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).UpdateCDCStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/UpdateCDCStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).UpdateCDCStream(ctx, req.(*UpdateCDCStreamRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_SetupUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).SetupUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/SetupUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).SetupUniverseReplication(ctx, req.(*SetupUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_DeleteUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).DeleteUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/DeleteUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).DeleteUniverseReplication(ctx, req.(*DeleteUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_AlterUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).AlterUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/AlterUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).AlterUniverseReplication(ctx, req.(*AlterUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_SetUniverseReplicationEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUniverseReplicationEnabledRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).SetUniverseReplicationEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/SetUniverseReplicationEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).SetUniverseReplicationEnabled(ctx, req.(*SetUniverseReplicationEnabledRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_GetUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).GetUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/GetUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).GetUniverseReplication(ctx, req.(*GetUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_IsSetupUniverseReplicationDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSetupUniverseReplicationDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).IsSetupUniverseReplicationDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/IsSetupUniverseReplicationDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).IsSetupUniverseReplicationDone(ctx, req.(*IsSetupUniverseReplicationDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterReplication_UpdateConsumerOnProducerSplit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateConsumerOnProducerSplitRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterReplicationServer).UpdateConsumerOnProducerSplit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterReplication/UpdateConsumerOnProducerSplit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterReplicationServer).UpdateConsumerOnProducerSplit(ctx, req.(*UpdateConsumerOnProducerSplitRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterReplication_ServiceDesc is the grpc.ServiceDesc for MasterReplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterReplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.master.MasterReplication",
	HandlerType: (*MasterReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidateReplicationInfo",
			Handler:    _MasterReplication_ValidateReplicationInfo_Handler,
		},
		{
			MethodName: "CreateCDCStream",
			Handler:    _MasterReplication_CreateCDCStream_Handler,
		},
		{
			MethodName: "DeleteCDCStream",
			Handler:    _MasterReplication_DeleteCDCStream_Handler,
		},
		{
			MethodName: "ListCDCStreams",
			Handler:    _MasterReplication_ListCDCStreams_Handler,
		},
		{
			MethodName: "GetCDCStream",
			Handler:    _MasterReplication_GetCDCStream_Handler,
		},
		{
			MethodName: "GetCDCDBStreamInfo",
			Handler:    _MasterReplication_GetCDCDBStreamInfo_Handler,
		},
		{
			MethodName: "UpdateCDCStream",
			Handler:    _MasterReplication_UpdateCDCStream_Handler,
		},
		{
			MethodName: "SetupUniverseReplication",
			Handler:    _MasterReplication_SetupUniverseReplication_Handler,
		},
		{
			MethodName: "DeleteUniverseReplication",
			Handler:    _MasterReplication_DeleteUniverseReplication_Handler,
		},
		{
			MethodName: "AlterUniverseReplication",
			Handler:    _MasterReplication_AlterUniverseReplication_Handler,
		},
		{
			MethodName: "SetUniverseReplicationEnabled",
			Handler:    _MasterReplication_SetUniverseReplicationEnabled_Handler,
		},
		{
			MethodName: "GetUniverseReplication",
			Handler:    _MasterReplication_GetUniverseReplication_Handler,
		},
		{
			MethodName: "IsSetupUniverseReplicationDone",
			Handler:    _MasterReplication_IsSetupUniverseReplicationDone_Handler,
		},
		{
			MethodName: "UpdateConsumerOnProducerSplit",
			Handler:    _MasterReplication_UpdateConsumerOnProducerSplit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/master/master_replication.proto",
}
