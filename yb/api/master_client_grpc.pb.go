// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/master/master_client.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterClientClient is the client API for MasterClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClientClient interface {
	// Client->Master RPCs
	GetTabletLocations(ctx context.Context, in *GetTabletLocationsRequestPB, opts ...grpc.CallOption) (*GetTabletLocationsResponsePB, error)
	GetTableLocations(ctx context.Context, in *GetTableLocationsRequestPB, opts ...grpc.CallOption) (*GetTableLocationsResponsePB, error)
	// For Postgres:
	ReservePgsqlOids(ctx context.Context, in *ReservePgsqlOidsRequestPB, opts ...grpc.CallOption) (*ReservePgsqlOidsResponsePB, error)
	GetYsqlCatalogConfig(ctx context.Context, in *GetYsqlCatalogConfigRequestPB, opts ...grpc.CallOption) (*GetYsqlCatalogConfigResponsePB, error)
	// Redis Config
	RedisConfigSet(ctx context.Context, in *RedisConfigSetRequestPB, opts ...grpc.CallOption) (*RedisConfigSetResponsePB, error)
	RedisConfigGet(ctx context.Context, in *RedisConfigGetRequestPB, opts ...grpc.CallOption) (*RedisConfigGetResponsePB, error)
}

type masterClientClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClientClient(cc grpc.ClientConnInterface) MasterClientClient {
	return &masterClientClient{cc}
}

func (c *masterClientClient) GetTabletLocations(ctx context.Context, in *GetTabletLocationsRequestPB, opts ...grpc.CallOption) (*GetTabletLocationsResponsePB, error) {
	out := new(GetTabletLocationsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterClient/GetTabletLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClientClient) GetTableLocations(ctx context.Context, in *GetTableLocationsRequestPB, opts ...grpc.CallOption) (*GetTableLocationsResponsePB, error) {
	out := new(GetTableLocationsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterClient/GetTableLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClientClient) ReservePgsqlOids(ctx context.Context, in *ReservePgsqlOidsRequestPB, opts ...grpc.CallOption) (*ReservePgsqlOidsResponsePB, error) {
	out := new(ReservePgsqlOidsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterClient/ReservePgsqlOids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClientClient) GetYsqlCatalogConfig(ctx context.Context, in *GetYsqlCatalogConfigRequestPB, opts ...grpc.CallOption) (*GetYsqlCatalogConfigResponsePB, error) {
	out := new(GetYsqlCatalogConfigResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterClient/GetYsqlCatalogConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClientClient) RedisConfigSet(ctx context.Context, in *RedisConfigSetRequestPB, opts ...grpc.CallOption) (*RedisConfigSetResponsePB, error) {
	out := new(RedisConfigSetResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterClient/RedisConfigSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClientClient) RedisConfigGet(ctx context.Context, in *RedisConfigGetRequestPB, opts ...grpc.CallOption) (*RedisConfigGetResponsePB, error) {
	out := new(RedisConfigGetResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterClient/RedisConfigGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterClientServer is the server API for MasterClient service.
// All implementations should embed UnimplementedMasterClientServer
// for forward compatibility
type MasterClientServer interface {
	// Client->Master RPCs
	GetTabletLocations(context.Context, *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error)
	GetTableLocations(context.Context, *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error)
	// For Postgres:
	ReservePgsqlOids(context.Context, *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error)
	GetYsqlCatalogConfig(context.Context, *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error)
	// Redis Config
	RedisConfigSet(context.Context, *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error)
	RedisConfigGet(context.Context, *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error)
}

// UnimplementedMasterClientServer should be embedded to have forward compatible implementations.
type UnimplementedMasterClientServer struct {
}

func (UnimplementedMasterClientServer) GetTabletLocations(context.Context, *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTabletLocations not implemented")
}
func (UnimplementedMasterClientServer) GetTableLocations(context.Context, *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableLocations not implemented")
}
func (UnimplementedMasterClientServer) ReservePgsqlOids(context.Context, *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReservePgsqlOids not implemented")
}
func (UnimplementedMasterClientServer) GetYsqlCatalogConfig(context.Context, *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYsqlCatalogConfig not implemented")
}
func (UnimplementedMasterClientServer) RedisConfigSet(context.Context, *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisConfigSet not implemented")
}
func (UnimplementedMasterClientServer) RedisConfigGet(context.Context, *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisConfigGet not implemented")
}

// UnsafeMasterClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterClientServer will
// result in compilation errors.
type UnsafeMasterClientServer interface {
	mustEmbedUnimplementedMasterClientServer()
}

func RegisterMasterClientServer(s grpc.ServiceRegistrar, srv MasterClientServer) {
	s.RegisterService(&MasterClient_ServiceDesc, srv)
}

func _MasterClient_GetTabletLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTabletLocationsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClientServer).GetTabletLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterClient/GetTabletLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClientServer).GetTabletLocations(ctx, req.(*GetTabletLocationsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterClient_GetTableLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableLocationsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClientServer).GetTableLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterClient/GetTableLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClientServer).GetTableLocations(ctx, req.(*GetTableLocationsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterClient_ReservePgsqlOids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservePgsqlOidsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClientServer).ReservePgsqlOids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterClient/ReservePgsqlOids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClientServer).ReservePgsqlOids(ctx, req.(*ReservePgsqlOidsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterClient_GetYsqlCatalogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYsqlCatalogConfigRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClientServer).GetYsqlCatalogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterClient/GetYsqlCatalogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClientServer).GetYsqlCatalogConfig(ctx, req.(*GetYsqlCatalogConfigRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterClient_RedisConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisConfigSetRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClientServer).RedisConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterClient/RedisConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClientServer).RedisConfigSet(ctx, req.(*RedisConfigSetRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterClient_RedisConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisConfigGetRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClientServer).RedisConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterClient/RedisConfigGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClientServer).RedisConfigGet(ctx, req.(*RedisConfigGetRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterClient_ServiceDesc is the grpc.ServiceDesc for MasterClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.master.MasterClient",
	HandlerType: (*MasterClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTabletLocations",
			Handler:    _MasterClient_GetTabletLocations_Handler,
		},
		{
			MethodName: "GetTableLocations",
			Handler:    _MasterClient_GetTableLocations_Handler,
		},
		{
			MethodName: "ReservePgsqlOids",
			Handler:    _MasterClient_ReservePgsqlOids_Handler,
		},
		{
			MethodName: "GetYsqlCatalogConfig",
			Handler:    _MasterClient_GetYsqlCatalogConfig_Handler,
		},
		{
			MethodName: "RedisConfigSet",
			Handler:    _MasterClient_RedisConfigSet_Handler,
		},
		{
			MethodName: "RedisConfigGet",
			Handler:    _MasterClient_RedisConfigGet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/master/master_client.proto",
}
