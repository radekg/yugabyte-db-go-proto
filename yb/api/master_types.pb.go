// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/master/master_types.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RelationType int32

const (
	RelationType_SYSTEM_TABLE_RELATION RelationType = 1
	RelationType_USER_TABLE_RELATION   RelationType = 2
	RelationType_INDEX_TABLE_RELATION  RelationType = 3
)

// Enum value maps for RelationType.
var (
	RelationType_name = map[int32]string{
		1: "SYSTEM_TABLE_RELATION",
		2: "USER_TABLE_RELATION",
		3: "INDEX_TABLE_RELATION",
	}
	RelationType_value = map[string]int32{
		"SYSTEM_TABLE_RELATION": 1,
		"USER_TABLE_RELATION":   2,
		"INDEX_TABLE_RELATION":  3,
	}
)

func (x RelationType) Enum() *RelationType {
	p := new(RelationType)
	*p = x
	return p
}

func (x RelationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelationType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_types_proto_enumTypes[0].Descriptor()
}

func (RelationType) Type() protoreflect.EnumType {
	return &file_yb_master_master_types_proto_enumTypes[0]
}

func (x RelationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RelationType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RelationType(num)
	return nil
}

// Deprecated: Use RelationType.Descriptor instead.
func (RelationType) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{0}
}

type SysRowEntryType int32

const (
	SysRowEntryType_UNKNOWN              SysRowEntryType = 0
	SysRowEntryType_TABLE                SysRowEntryType = 1
	SysRowEntryType_TABLET               SysRowEntryType = 2
	SysRowEntryType_CLUSTER_CONFIG       SysRowEntryType = 3
	SysRowEntryType_NAMESPACE            SysRowEntryType = 4
	SysRowEntryType_UDTYPE               SysRowEntryType = 5
	SysRowEntryType_ROLE                 SysRowEntryType = 6
	SysRowEntryType_SNAPSHOT             SysRowEntryType = 7
	SysRowEntryType_REDIS_CONFIG         SysRowEntryType = 8
	SysRowEntryType_SYS_CONFIG           SysRowEntryType = 9
	SysRowEntryType_CDC_STREAM           SysRowEntryType = 10
	SysRowEntryType_UNIVERSE_REPLICATION SysRowEntryType = 11
	SysRowEntryType_SNAPSHOT_SCHEDULE    SysRowEntryType = 12
	SysRowEntryType_DDL_LOG_ENTRY        SysRowEntryType = 13
)

// Enum value maps for SysRowEntryType.
var (
	SysRowEntryType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "TABLE",
		2:  "TABLET",
		3:  "CLUSTER_CONFIG",
		4:  "NAMESPACE",
		5:  "UDTYPE",
		6:  "ROLE",
		7:  "SNAPSHOT",
		8:  "REDIS_CONFIG",
		9:  "SYS_CONFIG",
		10: "CDC_STREAM",
		11: "UNIVERSE_REPLICATION",
		12: "SNAPSHOT_SCHEDULE",
		13: "DDL_LOG_ENTRY",
	}
	SysRowEntryType_value = map[string]int32{
		"UNKNOWN":              0,
		"TABLE":                1,
		"TABLET":               2,
		"CLUSTER_CONFIG":       3,
		"NAMESPACE":            4,
		"UDTYPE":               5,
		"ROLE":                 6,
		"SNAPSHOT":             7,
		"REDIS_CONFIG":         8,
		"SYS_CONFIG":           9,
		"CDC_STREAM":           10,
		"UNIVERSE_REPLICATION": 11,
		"SNAPSHOT_SCHEDULE":    12,
		"DDL_LOG_ENTRY":        13,
	}
)

func (x SysRowEntryType) Enum() *SysRowEntryType {
	p := new(SysRowEntryType)
	*p = x
	return p
}

func (x SysRowEntryType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SysRowEntryType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_types_proto_enumTypes[1].Descriptor()
}

func (SysRowEntryType) Type() protoreflect.EnumType {
	return &file_yb_master_master_types_proto_enumTypes[1]
}

func (x SysRowEntryType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *SysRowEntryType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = SysRowEntryType(num)
	return nil
}

// Deprecated: Use SysRowEntryType.Descriptor instead.
func (SysRowEntryType) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{1}
}

type MasterErrorPB_Code int32

const (
	// An error which has no more specific error code.
	// The code and message in 'status' may reveal more details.
	//
	// RPCs should avoid returning this, since callers will not be
	// able to easily parse the error.
	MasterErrorPB_UNKNOWN_ERROR MasterErrorPB_Code = 1
	// The schema provided for a request was not well-formed.
	MasterErrorPB_INVALID_SCHEMA MasterErrorPB_Code = 2
	// The requested table or index does not exist
	MasterErrorPB_OBJECT_NOT_FOUND MasterErrorPB_Code = 3
	// The name requested for the table or index is already in use
	MasterErrorPB_OBJECT_ALREADY_PRESENT MasterErrorPB_Code = 4
	// The number of tablets requested for a new table is over the per TS limit.
	MasterErrorPB_TOO_MANY_TABLETS MasterErrorPB_Code = 5
	// Catalog manager is not yet initialized.
	MasterErrorPB_CATALOG_MANAGER_NOT_INITIALIZED MasterErrorPB_Code = 6
	// The operation attempted can only be invoked against either the
	// leader or a single non-distributed master, which this node
	// isn't.
	MasterErrorPB_NOT_THE_LEADER MasterErrorPB_Code = 7
	// The number of replicas requested is greater than the number of live servers
	// in the cluster.
	MasterErrorPB_REPLICATION_FACTOR_TOO_HIGH MasterErrorPB_Code = 8
	// Change config should always be issued with the latest config version set.
	// If the client fails to do so, or there is a concurrent change, we will
	// set this error code.
	MasterErrorPB_CONFIG_VERSION_MISMATCH MasterErrorPB_Code = 9
	// If there is an operation in progress causing the current rpc to be in an indeterminate state,
	// we return this error code. Client can retry on a case by case basis as needed.
	MasterErrorPB_IN_TRANSITION_CAN_RETRY MasterErrorPB_Code = 10
	// Invalid namespace name or id for the namespace operation.
	MasterErrorPB_NAMESPACE_NOT_FOUND       MasterErrorPB_Code = 11
	MasterErrorPB_NAMESPACE_ALREADY_PRESENT MasterErrorPB_Code = 12
	MasterErrorPB_NO_NAMESPACE_USED         MasterErrorPB_Code = 13
	MasterErrorPB_NAMESPACE_IS_NOT_EMPTY    MasterErrorPB_Code = 14
	// Client set some fields incorrectly in the cluster config proto.
	MasterErrorPB_INVALID_CLUSTER_CONFIG MasterErrorPB_Code = 15
	// Indicator to client that the load balance operation can be retried.
	MasterErrorPB_CAN_RETRY_LOAD_BALANCE_CHECK MasterErrorPB_Code = 16
	// Invalid (User-Defined) Type operation
	MasterErrorPB_TYPE_NOT_FOUND       MasterErrorPB_Code = 17
	MasterErrorPB_INVALID_TYPE         MasterErrorPB_Code = 18
	MasterErrorPB_TYPE_ALREADY_PRESENT MasterErrorPB_Code = 19
	// Snapshot related errors.
	MasterErrorPB_INVALID_TABLE_TYPE            MasterErrorPB_Code = 20
	MasterErrorPB_TABLE_CREATION_IS_IN_PROGRESS MasterErrorPB_Code = 21
	MasterErrorPB_SNAPSHOT_NOT_FOUND            MasterErrorPB_Code = 22
	MasterErrorPB_SNAPSHOT_FAILED               MasterErrorPB_Code = 23
	MasterErrorPB_SNAPSHOT_CANCELLED            MasterErrorPB_Code = 24
	MasterErrorPB_PARALLEL_SNAPSHOT_OPERATION   MasterErrorPB_Code = 25
	MasterErrorPB_SNAPSHOT_IS_NOT_READY         MasterErrorPB_Code = 26
	// Roles and permissions errors.
	MasterErrorPB_ROLE_ALREADY_PRESENT MasterErrorPB_Code = 27
	MasterErrorPB_ROLE_NOT_FOUND       MasterErrorPB_Code = 28
	MasterErrorPB_INVALID_REQUEST      MasterErrorPB_Code = 29
	MasterErrorPB_NOT_AUTHORIZED       MasterErrorPB_Code = 32
	// Indicator to client that the are leaders on preferred only operation can be retried.
	MasterErrorPB_CAN_RETRY_ARE_LEADERS_ON_PREFERRED_ONLY_CHECK MasterErrorPB_Code = 30
	MasterErrorPB_REDIS_CONFIG_NOT_FOUND                        MasterErrorPB_Code = 31
	// Indicator to client that load balancer was recently active.
	MasterErrorPB_LOAD_BALANCER_RECENTLY_ACTIVE MasterErrorPB_Code = 33
	MasterErrorPB_INTERNAL_ERROR                MasterErrorPB_Code = 34
	// Client set some fields in the table replication info incorrectly.
	MasterErrorPB_INVALID_TABLE_REPLICATION_INFO MasterErrorPB_Code = 35
	MasterErrorPB_REACHED_SPLIT_LIMIT            MasterErrorPB_Code = 36
	MasterErrorPB_SPLIT_OR_BACKFILL_IN_PROGRESS  MasterErrorPB_Code = 37
	// Error in case a tablet-level operation was attempted on a tablet which is not running.
	MasterErrorPB_TABLET_NOT_RUNNING MasterErrorPB_Code = 38
	MasterErrorPB_TABLE_NOT_RUNNING  MasterErrorPB_Code = 39
)

// Enum value maps for MasterErrorPB_Code.
var (
	MasterErrorPB_Code_name = map[int32]string{
		1:  "UNKNOWN_ERROR",
		2:  "INVALID_SCHEMA",
		3:  "OBJECT_NOT_FOUND",
		4:  "OBJECT_ALREADY_PRESENT",
		5:  "TOO_MANY_TABLETS",
		6:  "CATALOG_MANAGER_NOT_INITIALIZED",
		7:  "NOT_THE_LEADER",
		8:  "REPLICATION_FACTOR_TOO_HIGH",
		9:  "CONFIG_VERSION_MISMATCH",
		10: "IN_TRANSITION_CAN_RETRY",
		11: "NAMESPACE_NOT_FOUND",
		12: "NAMESPACE_ALREADY_PRESENT",
		13: "NO_NAMESPACE_USED",
		14: "NAMESPACE_IS_NOT_EMPTY",
		15: "INVALID_CLUSTER_CONFIG",
		16: "CAN_RETRY_LOAD_BALANCE_CHECK",
		17: "TYPE_NOT_FOUND",
		18: "INVALID_TYPE",
		19: "TYPE_ALREADY_PRESENT",
		20: "INVALID_TABLE_TYPE",
		21: "TABLE_CREATION_IS_IN_PROGRESS",
		22: "SNAPSHOT_NOT_FOUND",
		23: "SNAPSHOT_FAILED",
		24: "SNAPSHOT_CANCELLED",
		25: "PARALLEL_SNAPSHOT_OPERATION",
		26: "SNAPSHOT_IS_NOT_READY",
		27: "ROLE_ALREADY_PRESENT",
		28: "ROLE_NOT_FOUND",
		29: "INVALID_REQUEST",
		32: "NOT_AUTHORIZED",
		30: "CAN_RETRY_ARE_LEADERS_ON_PREFERRED_ONLY_CHECK",
		31: "REDIS_CONFIG_NOT_FOUND",
		33: "LOAD_BALANCER_RECENTLY_ACTIVE",
		34: "INTERNAL_ERROR",
		35: "INVALID_TABLE_REPLICATION_INFO",
		36: "REACHED_SPLIT_LIMIT",
		37: "SPLIT_OR_BACKFILL_IN_PROGRESS",
		38: "TABLET_NOT_RUNNING",
		39: "TABLE_NOT_RUNNING",
	}
	MasterErrorPB_Code_value = map[string]int32{
		"UNKNOWN_ERROR":                                 1,
		"INVALID_SCHEMA":                                2,
		"OBJECT_NOT_FOUND":                              3,
		"OBJECT_ALREADY_PRESENT":                        4,
		"TOO_MANY_TABLETS":                              5,
		"CATALOG_MANAGER_NOT_INITIALIZED":               6,
		"NOT_THE_LEADER":                                7,
		"REPLICATION_FACTOR_TOO_HIGH":                   8,
		"CONFIG_VERSION_MISMATCH":                       9,
		"IN_TRANSITION_CAN_RETRY":                       10,
		"NAMESPACE_NOT_FOUND":                           11,
		"NAMESPACE_ALREADY_PRESENT":                     12,
		"NO_NAMESPACE_USED":                             13,
		"NAMESPACE_IS_NOT_EMPTY":                        14,
		"INVALID_CLUSTER_CONFIG":                        15,
		"CAN_RETRY_LOAD_BALANCE_CHECK":                  16,
		"TYPE_NOT_FOUND":                                17,
		"INVALID_TYPE":                                  18,
		"TYPE_ALREADY_PRESENT":                          19,
		"INVALID_TABLE_TYPE":                            20,
		"TABLE_CREATION_IS_IN_PROGRESS":                 21,
		"SNAPSHOT_NOT_FOUND":                            22,
		"SNAPSHOT_FAILED":                               23,
		"SNAPSHOT_CANCELLED":                            24,
		"PARALLEL_SNAPSHOT_OPERATION":                   25,
		"SNAPSHOT_IS_NOT_READY":                         26,
		"ROLE_ALREADY_PRESENT":                          27,
		"ROLE_NOT_FOUND":                                28,
		"INVALID_REQUEST":                               29,
		"NOT_AUTHORIZED":                                32,
		"CAN_RETRY_ARE_LEADERS_ON_PREFERRED_ONLY_CHECK": 30,
		"REDIS_CONFIG_NOT_FOUND":                        31,
		"LOAD_BALANCER_RECENTLY_ACTIVE":                 33,
		"INTERNAL_ERROR":                                34,
		"INVALID_TABLE_REPLICATION_INFO":                35,
		"REACHED_SPLIT_LIMIT":                           36,
		"SPLIT_OR_BACKFILL_IN_PROGRESS":                 37,
		"TABLET_NOT_RUNNING":                            38,
		"TABLE_NOT_RUNNING":                             39,
	}
)

func (x MasterErrorPB_Code) Enum() *MasterErrorPB_Code {
	p := new(MasterErrorPB_Code)
	*p = x
	return p
}

func (x MasterErrorPB_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MasterErrorPB_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_master_master_types_proto_enumTypes[2].Descriptor()
}

func (MasterErrorPB_Code) Type() protoreflect.EnumType {
	return &file_yb_master_master_types_proto_enumTypes[2]
}

func (x MasterErrorPB_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *MasterErrorPB_Code) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = MasterErrorPB_Code(num)
	return nil
}

// Deprecated: Use MasterErrorPB_Code.Descriptor instead.
func (MasterErrorPB_Code) EnumDescriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{0, 0}
}

// Master specific errors use this protobuf.
type MasterErrorPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code.
	Code *MasterErrorPB_Code `protobuf:"varint,1,req,name=code,enum=yb.master.MasterErrorPB_Code" json:"code,omitempty"`
	// The Status object for the error. This will include a textual
	// message that may be more useful to present in log messages, etc,
	// though its error code is less specific.
	Status *AppStatusPB `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
}

func (x *MasterErrorPB) Reset() {
	*x = MasterErrorPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MasterErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MasterErrorPB) ProtoMessage() {}

func (x *MasterErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MasterErrorPB.ProtoReflect.Descriptor instead.
func (*MasterErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{0}
}

func (x *MasterErrorPB) GetCode() MasterErrorPB_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return MasterErrorPB_UNKNOWN_ERROR
}

func (x *MasterErrorPB) GetStatus() *AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type NamespaceIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The namespace ID to fetch info.
	Id []byte `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	// The namespace name to fetch info.
	Name *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// Database type.
	DatabaseType *YQLDatabase `protobuf:"varint,3,opt,name=database_type,json=databaseType,enum=yb.YQLDatabase,def=2" json:"database_type,omitempty"`
}

// Default values for NamespaceIdentifierPB fields.
const (
	Default_NamespaceIdentifierPB_DatabaseType = YQLDatabase_YQL_DATABASE_CQL
)

func (x *NamespaceIdentifierPB) Reset() {
	*x = NamespaceIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceIdentifierPB) ProtoMessage() {}

func (x *NamespaceIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceIdentifierPB.ProtoReflect.Descriptor instead.
func (*NamespaceIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{1}
}

func (x *NamespaceIdentifierPB) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NamespaceIdentifierPB) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *NamespaceIdentifierPB) GetDatabaseType() YQLDatabase {
	if x != nil && x.DatabaseType != nil {
		return *x.DatabaseType
	}
	return Default_NamespaceIdentifierPB_DatabaseType
}

type TableIdentifierPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The table ID to fetch info.
	TableId []byte `protobuf:"bytes,1,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	// The table name to fetch info.
	TableName *string `protobuf:"bytes,2,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
	// The table namespace (if empty - using default namespace).
	Namespace *NamespaceIdentifierPB `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (x *TableIdentifierPB) Reset() {
	*x = TableIdentifierPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableIdentifierPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableIdentifierPB) ProtoMessage() {}

func (x *TableIdentifierPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableIdentifierPB.ProtoReflect.Descriptor instead.
func (*TableIdentifierPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{2}
}

func (x *TableIdentifierPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *TableIdentifierPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *TableIdentifierPB) GetNamespace() *NamespaceIdentifierPB {
	if x != nil {
		return x.Namespace
	}
	return nil
}

// Sent by the TS when it first heartbeats with a master. This sends the
// master all of the necessary information about the current instance
// of the TS.
type TSRegistrationPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Common *ServerRegistrationPB `protobuf:"bytes,1,opt,name=common" json:"common,omitempty"`
	// Capabilities supported byt this TS.
	Capabilities []uint32 `protobuf:"fixed32,2,rep,name=capabilities" json:"capabilities,omitempty"`
}

func (x *TSRegistrationPB) Reset() {
	*x = TSRegistrationPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TSRegistrationPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TSRegistrationPB) ProtoMessage() {}

func (x *TSRegistrationPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TSRegistrationPB.ProtoReflect.Descriptor instead.
func (*TSRegistrationPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{3}
}

func (x *TSRegistrationPB) GetCommon() *ServerRegistrationPB {
	if x != nil {
		return x.Common
	}
	return nil
}

func (x *TSRegistrationPB) GetCapabilities() []uint32 {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

type TServerMetricsPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalSstFileSize        *int64                          `protobuf:"varint,1,opt,name=total_sst_file_size,json=totalSstFileSize" json:"total_sst_file_size,omitempty"`
	TotalRamUsage           *int64                          `protobuf:"varint,2,opt,name=total_ram_usage,json=totalRamUsage" json:"total_ram_usage,omitempty"`
	ReadOpsPerSec           *float64                        `protobuf:"fixed64,3,opt,name=read_ops_per_sec,json=readOpsPerSec" json:"read_ops_per_sec,omitempty"`
	WriteOpsPerSec          *float64                        `protobuf:"fixed64,4,opt,name=write_ops_per_sec,json=writeOpsPerSec" json:"write_ops_per_sec,omitempty"`
	UncompressedSstFileSize *int64                          `protobuf:"varint,5,opt,name=uncompressed_sst_file_size,json=uncompressedSstFileSize" json:"uncompressed_sst_file_size,omitempty"`
	UptimeSeconds           *uint64                         `protobuf:"varint,6,opt,name=uptime_seconds,json=uptimeSeconds" json:"uptime_seconds,omitempty"`
	NumSstFiles             *uint64                         `protobuf:"varint,7,opt,name=num_sst_files,json=numSstFiles" json:"num_sst_files,omitempty"`
	PathMetrics             []*TServerMetricsPB_PathMetrics `protobuf:"bytes,8,rep,name=path_metrics,json=pathMetrics" json:"path_metrics,omitempty"`
}

func (x *TServerMetricsPB) Reset() {
	*x = TServerMetricsPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerMetricsPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerMetricsPB) ProtoMessage() {}

func (x *TServerMetricsPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerMetricsPB.ProtoReflect.Descriptor instead.
func (*TServerMetricsPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{4}
}

func (x *TServerMetricsPB) GetTotalSstFileSize() int64 {
	if x != nil && x.TotalSstFileSize != nil {
		return *x.TotalSstFileSize
	}
	return 0
}

func (x *TServerMetricsPB) GetTotalRamUsage() int64 {
	if x != nil && x.TotalRamUsage != nil {
		return *x.TotalRamUsage
	}
	return 0
}

func (x *TServerMetricsPB) GetReadOpsPerSec() float64 {
	if x != nil && x.ReadOpsPerSec != nil {
		return *x.ReadOpsPerSec
	}
	return 0
}

func (x *TServerMetricsPB) GetWriteOpsPerSec() float64 {
	if x != nil && x.WriteOpsPerSec != nil {
		return *x.WriteOpsPerSec
	}
	return 0
}

func (x *TServerMetricsPB) GetUncompressedSstFileSize() int64 {
	if x != nil && x.UncompressedSstFileSize != nil {
		return *x.UncompressedSstFileSize
	}
	return 0
}

func (x *TServerMetricsPB) GetUptimeSeconds() uint64 {
	if x != nil && x.UptimeSeconds != nil {
		return *x.UptimeSeconds
	}
	return 0
}

func (x *TServerMetricsPB) GetNumSstFiles() uint64 {
	if x != nil && x.NumSstFiles != nil {
		return *x.NumSstFiles
	}
	return 0
}

func (x *TServerMetricsPB) GetPathMetrics() []*TServerMetricsPB_PathMetrics {
	if x != nil {
		return x.PathMetrics
	}
	return nil
}

type TServerMetricsPB_PathMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Device path provided by user in --fs_data_dirs
	PathId     []byte  `protobuf:"bytes,1,req,name=path_id,json=pathId" json:"path_id,omitempty"`
	UsedSpace  *uint64 `protobuf:"varint,2,opt,name=used_space,json=usedSpace" json:"used_space,omitempty"`
	TotalSpace *uint64 `protobuf:"varint,3,opt,name=total_space,json=totalSpace" json:"total_space,omitempty"`
}

func (x *TServerMetricsPB_PathMetrics) Reset() {
	*x = TServerMetricsPB_PathMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TServerMetricsPB_PathMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TServerMetricsPB_PathMetrics) ProtoMessage() {}

func (x *TServerMetricsPB_PathMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TServerMetricsPB_PathMetrics.ProtoReflect.Descriptor instead.
func (*TServerMetricsPB_PathMetrics) Descriptor() ([]byte, []int) {
	return file_yb_master_master_types_proto_rawDescGZIP(), []int{4, 0}
}

func (x *TServerMetricsPB_PathMetrics) GetPathId() []byte {
	if x != nil {
		return x.PathId
	}
	return nil
}

func (x *TServerMetricsPB_PathMetrics) GetUsedSpace() uint64 {
	if x != nil && x.UsedSpace != nil {
		return *x.UsedSpace
	}
	return 0
}

func (x *TServerMetricsPB_PathMetrics) GetTotalSpace() uint64 {
	if x != nil && x.TotalSpace != nil {
		return *x.TotalSpace
	}
	return 0
}

var File_yb_master_master_types_proto protoreflect.FileDescriptor

var file_yb_master_master_types_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x09, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x2e, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x22, 0x9a, 0x08, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a,
	0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x43, 0x48, 0x45,
	0x4d, 0x41, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4f, 0x42, 0x4a, 0x45, 0x43, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x4f, 0x42,
	0x4a, 0x45, 0x43, 0x54, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x52, 0x45,
	0x53, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x4f, 0x4f, 0x5f, 0x4d, 0x41,
	0x4e, 0x59, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x53, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f,
	0x43, 0x41, 0x54, 0x41, 0x4c, 0x4f, 0x47, 0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x10,
	0x06, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f, 0x54, 0x48, 0x45, 0x5f, 0x4c, 0x45, 0x41,
	0x44, 0x45, 0x52, 0x10, 0x07, 0x12, 0x1f, 0x0a, 0x1b, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x54, 0x4f, 0x4f, 0x5f,
	0x48, 0x49, 0x47, 0x48, 0x10, 0x08, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47,
	0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43,
	0x48, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x4e, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x49,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x10, 0x0a,
	0x12, 0x17, 0x0a, 0x13, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x4e, 0x4f,
	0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x0b, 0x12, 0x1d, 0x0a, 0x19, 0x4e, 0x41, 0x4d,
	0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50,
	0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x4e, 0x4f, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x55, 0x53, 0x45, 0x44, 0x10, 0x0d, 0x12,
	0x1a, 0x0a, 0x16, 0x4e, 0x41, 0x4d, 0x45, 0x53, 0x50, 0x41, 0x43, 0x45, 0x5f, 0x49, 0x53, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x0e, 0x12, 0x1a, 0x0a, 0x16, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x41, 0x4e, 0x5f, 0x52,
	0x45, 0x54, 0x52, 0x59, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43,
	0x45, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x59, 0x50,
	0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x11, 0x12, 0x10, 0x0a,
	0x0c, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x12, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f,
	0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x13, 0x12, 0x16, 0x0a, 0x12, 0x49, 0x4e, 0x56,
	0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10,
	0x14, 0x12, 0x21, 0x0a, 0x1d, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x53, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x16, 0x12, 0x13, 0x0a, 0x0f,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10,
	0x17, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x18, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x52,
	0x41, 0x4c, 0x4c, 0x45, 0x4c, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x4f,
	0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x4e,
	0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x45,
	0x41, 0x44, 0x59, 0x10, 0x1a, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x1b, 0x12,
	0x12, 0x0a, 0x0e, 0x52, 0x4f, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x1c, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52,
	0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x54, 0x5f,
	0x41, 0x55, 0x54, 0x48, 0x4f, 0x52, 0x49, 0x5a, 0x45, 0x44, 0x10, 0x20, 0x12, 0x31, 0x0a, 0x2d,
	0x43, 0x41, 0x4e, 0x5f, 0x52, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x41, 0x52, 0x45, 0x5f, 0x4c, 0x45,
	0x41, 0x44, 0x45, 0x52, 0x53, 0x5f, 0x4f, 0x4e, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x45, 0x52, 0x52,
	0x45, 0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x5f, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x10, 0x1e, 0x12,
	0x1a, 0x0a, 0x16, 0x52, 0x45, 0x44, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x1f, 0x12, 0x21, 0x0a, 0x1d, 0x4c,
	0x4f, 0x41, 0x44, 0x5f, 0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x52, 0x5f, 0x52, 0x45, 0x43,
	0x45, 0x4e, 0x54, 0x4c, 0x59, 0x5f, 0x41, 0x43, 0x54, 0x49, 0x56, 0x45, 0x10, 0x21, 0x12, 0x12,
	0x0a, 0x0e, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x10, 0x22, 0x12, 0x22, 0x0a, 0x1e, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x49, 0x4e, 0x46, 0x4f, 0x10, 0x23, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x45, 0x41, 0x43, 0x48, 0x45,
	0x44, 0x5f, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x24, 0x12,
	0x21, 0x0a, 0x1d, 0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x42, 0x41, 0x43, 0x4b,
	0x46, 0x49, 0x4c, 0x4c, 0x5f, 0x49, 0x4e, 0x5f, 0x50, 0x52, 0x4f, 0x47, 0x52, 0x45, 0x53, 0x53,
	0x10, 0x25, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x26, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x27, 0x22, 0x83, 0x01, 0x0a, 0x15, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x46, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x59, 0x51, 0x4c, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x3a, 0x10, 0x59, 0x51, 0x4c, 0x5f, 0x44, 0x41, 0x54,
	0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x43, 0x51, 0x4c, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x61, 0x62,
	0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x8d, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x42, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x10, 0x54, 0x53, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x06, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x07, 0x52, 0x0c, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x22, 0xf9, 0x03, 0x0a, 0x10, 0x54, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x61, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x27, 0x0a,
	0x10, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6f, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x64, 0x4f, 0x70, 0x73,
	0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x12, 0x29, 0x0a, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x6f, 0x70, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x73, 0x50, 0x65, 0x72, 0x53, 0x65,
	0x63, 0x12, 0x3b, 0x0a, 0x1a, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x64, 0x5f, 0x73, 0x73, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x75, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x25,
	0x0a, 0x0e, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x73, 0x74,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x6e, 0x75,
	0x6d, 0x53, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0c, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x2e, 0x50, 0x61, 0x74,
	0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x66, 0x0a, 0x0b, 0x50, 0x61, 0x74, 0x68, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x06, 0x70, 0x61, 0x74, 0x68, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x09, 0x75, 0x73, 0x65, 0x64, 0x53, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x53, 0x70, 0x61, 0x63, 0x65, 0x2a, 0x5c, 0x0a,
	0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45,
	0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10,
	0x02, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x03, 0x2a, 0xf2, 0x01, 0x0a, 0x0f,
	0x53, 0x79, 0x73, 0x52, 0x6f, 0x77, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x54, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x4c, 0x55, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4e, 0x41, 0x4d, 0x45, 0x53,
	0x50, 0x41, 0x43, 0x45, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x44, 0x54, 0x59, 0x50, 0x45,
	0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x4f, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45,
	0x44, 0x49, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x08, 0x12, 0x0e, 0x0a, 0x0a,
	0x53, 0x59, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x09, 0x12, 0x0e, 0x0a, 0x0a,
	0x43, 0x44, 0x43, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x10, 0x0a, 0x12, 0x18, 0x0a, 0x14,
	0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48,
	0x4f, 0x54, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x44, 0x55, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x11, 0x0a,
	0x0d, 0x44, 0x44, 0x4c, 0x5f, 0x4c, 0x4f, 0x47, 0x5f, 0x45, 0x4e, 0x54, 0x52, 0x59, 0x10, 0x0d,
	0x42, 0x0f, 0x0a, 0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72,
}

var (
	file_yb_master_master_types_proto_rawDescOnce sync.Once
	file_yb_master_master_types_proto_rawDescData = file_yb_master_master_types_proto_rawDesc
)

func file_yb_master_master_types_proto_rawDescGZIP() []byte {
	file_yb_master_master_types_proto_rawDescOnce.Do(func() {
		file_yb_master_master_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_master_master_types_proto_rawDescData)
	})
	return file_yb_master_master_types_proto_rawDescData
}

var file_yb_master_master_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_yb_master_master_types_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_yb_master_master_types_proto_goTypes = []interface{}{
	(RelationType)(0),                    // 0: yb.master.RelationType
	(SysRowEntryType)(0),                 // 1: yb.master.SysRowEntryType
	(MasterErrorPB_Code)(0),              // 2: yb.master.MasterErrorPB.Code
	(*MasterErrorPB)(nil),                // 3: yb.master.MasterErrorPB
	(*NamespaceIdentifierPB)(nil),        // 4: yb.master.NamespaceIdentifierPB
	(*TableIdentifierPB)(nil),            // 5: yb.master.TableIdentifierPB
	(*TSRegistrationPB)(nil),             // 6: yb.master.TSRegistrationPB
	(*TServerMetricsPB)(nil),             // 7: yb.master.TServerMetricsPB
	(*TServerMetricsPB_PathMetrics)(nil), // 8: yb.master.TServerMetricsPB.PathMetrics
	(*AppStatusPB)(nil),                  // 9: yb.AppStatusPB
	(YQLDatabase)(0),                     // 10: yb.YQLDatabase
	(*ServerRegistrationPB)(nil),         // 11: yb.ServerRegistrationPB
}
var file_yb_master_master_types_proto_depIdxs = []int32{
	2,  // 0: yb.master.MasterErrorPB.code:type_name -> yb.master.MasterErrorPB.Code
	9,  // 1: yb.master.MasterErrorPB.status:type_name -> yb.AppStatusPB
	10, // 2: yb.master.NamespaceIdentifierPB.database_type:type_name -> yb.YQLDatabase
	4,  // 3: yb.master.TableIdentifierPB.namespace:type_name -> yb.master.NamespaceIdentifierPB
	11, // 4: yb.master.TSRegistrationPB.common:type_name -> yb.ServerRegistrationPB
	8,  // 5: yb.master.TServerMetricsPB.path_metrics:type_name -> yb.master.TServerMetricsPB.PathMetrics
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_yb_master_master_types_proto_init() }
func file_yb_master_master_types_proto_init() {
	if File_yb_master_master_types_proto != nil {
		return
	}
	file_yb_common_common_types_proto_init()
	file_yb_common_wire_protocol_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_master_master_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MasterErrorPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableIdentifierPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TSRegistrationPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerMetricsPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TServerMetricsPB_PathMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_master_master_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_master_master_types_proto_goTypes,
		DependencyIndexes: file_yb_master_master_types_proto_depIdxs,
		EnumInfos:         file_yb_master_master_types_proto_enumTypes,
		MessageInfos:      file_yb_master_master_types_proto_msgTypes,
	}.Build()
	File_yb_master_master_types_proto = out.File
	file_yb_master_master_types_proto_rawDesc = nil
	file_yb_master_master_types_proto_goTypes = nil
	file_yb_master_master_types_proto_depIdxs = nil
}
