// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/tserver/tserver.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A batched set of insert/mutate requests.
type WriteRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// When replicating RocksDB write operations through Raft for single-shard transactions,
	// we put a write batch here.
	WriteBatch *KeyValueWriteBatchPB `protobuf:"bytes,7,opt,name=write_batch,json=writeBatch" json:"write_batch,omitempty"`
	// A batch of redis operations.
	RedisWriteBatch []*RedisWriteRequestPB `protobuf:"bytes,8,rep,name=redis_write_batch,json=redisWriteBatch" json:"redis_write_batch,omitempty"`
	// A batch of QL operations.
	QlWriteBatch []*QLWriteRequestPB `protobuf:"bytes,10,rep,name=ql_write_batch,json=qlWriteBatch" json:"ql_write_batch,omitempty"`
	// A batch of Pgsql operations.
	PgsqlWriteBatch []*PgsqlWriteRequestPB `protobuf:"bytes,13,rep,name=pgsql_write_batch,json=pgsqlWriteBatch" json:"pgsql_write_batch,omitempty"`
	// A hybrid_time obtained by the client from a previous request.
	// TODO crypto sign this and propagate the signature along with
	// the hybrid_time.
	PropagatedHybridTime *uint64           `protobuf:"fixed64,5,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	IncludeTrace         *bool             `protobuf:"varint,6,opt,name=include_trace,json=includeTrace,def=0" json:"include_trace,omitempty"`
	ReadTime             *ReadHybridTimePB `protobuf:"bytes,12,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	// Use 2 int64 to represent UUID.
	ClientId1           *uint64  `protobuf:"fixed64,14,opt,name=client_id1,json=clientId1" json:"client_id1,omitempty"`
	ClientId2           *uint64  `protobuf:"fixed64,15,opt,name=client_id2,json=clientId2" json:"client_id2,omitempty"`
	RequestId           *int64   `protobuf:"varint,16,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	MinRunningRequestId *int64   `protobuf:"varint,17,opt,name=min_running_request_id,json=minRunningRequestId" json:"min_running_request_id,omitempty"`
	RejectionScore      *float64 `protobuf:"fixed64,18,opt,name=rejection_score,json=rejectionScore" json:"rejection_score,omitempty"`
	ExternalHybridTime  *uint64  `protobuf:"fixed64,19,opt,name=external_hybrid_time,json=externalHybridTime" json:"external_hybrid_time,omitempty"`
	BatchIdx            *uint64  `protobuf:"varint,20,opt,name=batch_idx,json=batchIdx" json:"batch_idx,omitempty"`
}

// Default values for WriteRequestPB fields.
const (
	Default_WriteRequestPB_IncludeTrace = bool(false)
)

func (x *WriteRequestPB) Reset() {
	*x = WriteRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteRequestPB) ProtoMessage() {}

func (x *WriteRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteRequestPB.ProtoReflect.Descriptor instead.
func (*WriteRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{0}
}

func (x *WriteRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *WriteRequestPB) GetWriteBatch() *KeyValueWriteBatchPB {
	if x != nil {
		return x.WriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetRedisWriteBatch() []*RedisWriteRequestPB {
	if x != nil {
		return x.RedisWriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetQlWriteBatch() []*QLWriteRequestPB {
	if x != nil {
		return x.QlWriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetPgsqlWriteBatch() []*PgsqlWriteRequestPB {
	if x != nil {
		return x.PgsqlWriteBatch
	}
	return nil
}

func (x *WriteRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *WriteRequestPB) GetIncludeTrace() bool {
	if x != nil && x.IncludeTrace != nil {
		return *x.IncludeTrace
	}
	return Default_WriteRequestPB_IncludeTrace
}

func (x *WriteRequestPB) GetReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

func (x *WriteRequestPB) GetClientId1() uint64 {
	if x != nil && x.ClientId1 != nil {
		return *x.ClientId1
	}
	return 0
}

func (x *WriteRequestPB) GetClientId2() uint64 {
	if x != nil && x.ClientId2 != nil {
		return *x.ClientId2
	}
	return 0
}

func (x *WriteRequestPB) GetRequestId() int64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *WriteRequestPB) GetMinRunningRequestId() int64 {
	if x != nil && x.MinRunningRequestId != nil {
		return *x.MinRunningRequestId
	}
	return 0
}

func (x *WriteRequestPB) GetRejectionScore() float64 {
	if x != nil && x.RejectionScore != nil {
		return *x.RejectionScore
	}
	return 0
}

func (x *WriteRequestPB) GetExternalHybridTime() uint64 {
	if x != nil && x.ExternalHybridTime != nil {
		return *x.ExternalHybridTime
	}
	return 0
}

func (x *WriteRequestPB) GetBatchIdx() uint64 {
	if x != nil && x.BatchIdx != nil {
		return *x.BatchIdx
	}
	return 0
}

type WriteResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the entire WriteResponsePB request failed, the error status that
	// caused the failure. This type of error is triggered for
	// cases such as the tablet not being on this server, or the
	// schema not matching. If any error specific to a given row
	// occurs, this error will be recorded in per_row_errors below,
	// even if all rows failed.
	Error        *TabletServerErrorPB             `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PerRowErrors []*WriteResponsePB_PerRowErrorPB `protobuf:"bytes,2,rep,name=per_row_errors,json=perRowErrors" json:"per_row_errors,omitempty"`
	// A batch of redis responses.
	RedisResponseBatch []*RedisResponsePB `protobuf:"bytes,8,rep,name=redis_response_batch,json=redisResponseBatch" json:"redis_response_batch,omitempty"`
	// A batch of QL responses.
	QlResponseBatch []*QLResponsePB `protobuf:"bytes,9,rep,name=ql_response_batch,json=qlResponseBatch" json:"ql_response_batch,omitempty"`
	// A batch of QL responses.
	PgsqlResponseBatch []*PgsqlResponsePB `protobuf:"bytes,12,rep,name=pgsql_response_batch,json=pgsqlResponseBatch" json:"pgsql_response_batch,omitempty"`
	// The hybrid_time chosen by the server for this write.
	// TODO KUDU-611 propagate hybrid_times with server signature.
	PropagatedHybridTime *uint64 `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TraceBuffer          *string `protobuf:"bytes,10,opt,name=trace_buffer,json=traceBuffer" json:"trace_buffer,omitempty"`
	// Used to report restart whether this operation requires read restart.
	RestartReadTime *ReadHybridTimePB `protobuf:"bytes,11,opt,name=restart_read_time,json=restartReadTime" json:"restart_read_time,omitempty"`
	// Used to report used read time when transaction asked for it.
	UsedReadTime *ReadHybridTimePB `protobuf:"bytes,13,opt,name=used_read_time,json=usedReadTime" json:"used_read_time,omitempty"`
	LocalLimitHt *uint64           `protobuf:"fixed64,14,opt,name=local_limit_ht,json=localLimitHt" json:"local_limit_ht,omitempty"`
}

func (x *WriteResponsePB) Reset() {
	*x = WriteResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponsePB) ProtoMessage() {}

func (x *WriteResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponsePB.ProtoReflect.Descriptor instead.
func (*WriteResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{1}
}

func (x *WriteResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *WriteResponsePB) GetPerRowErrors() []*WriteResponsePB_PerRowErrorPB {
	if x != nil {
		return x.PerRowErrors
	}
	return nil
}

func (x *WriteResponsePB) GetRedisResponseBatch() []*RedisResponsePB {
	if x != nil {
		return x.RedisResponseBatch
	}
	return nil
}

func (x *WriteResponsePB) GetQlResponseBatch() []*QLResponsePB {
	if x != nil {
		return x.QlResponseBatch
	}
	return nil
}

func (x *WriteResponsePB) GetPgsqlResponseBatch() []*PgsqlResponsePB {
	if x != nil {
		return x.PgsqlResponseBatch
	}
	return nil
}

func (x *WriteResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *WriteResponsePB) GetTraceBuffer() string {
	if x != nil && x.TraceBuffer != nil {
		return *x.TraceBuffer
	}
	return ""
}

func (x *WriteResponsePB) GetRestartReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.RestartReadTime
	}
	return nil
}

func (x *WriteResponsePB) GetUsedReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.UsedReadTime
	}
	return nil
}

func (x *WriteResponsePB) GetLocalLimitHt() uint64 {
	if x != nil && x.LocalLimitHt != nil {
		return *x.LocalLimitHt
	}
	return 0
}

// A list tablets request
type ListTabletsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTabletsRequestPB) Reset() {
	*x = ListTabletsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsRequestPB) ProtoMessage() {}

func (x *ListTabletsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsRequestPB.ProtoReflect.Descriptor instead.
func (*ListTabletsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{2}
}

// A list tablets response
type ListTabletsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           *TabletServerErrorPB                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	StatusAndSchema []*ListTabletsResponsePB_StatusAndSchemaPB `protobuf:"bytes,2,rep,name=status_and_schema,json=statusAndSchema" json:"status_and_schema,omitempty"`
}

func (x *ListTabletsResponsePB) Reset() {
	*x = ListTabletsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsResponsePB) ProtoMessage() {}

func (x *ListTabletsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsResponsePB.ProtoReflect.Descriptor instead.
func (*ListTabletsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{3}
}

func (x *ListTabletsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTabletsResponsePB) GetStatusAndSchema() []*ListTabletsResponsePB_StatusAndSchemaPB {
	if x != nil {
		return x.StatusAndSchema
	}
	return nil
}

type NoOpRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
}

func (x *NoOpRequestPB) Reset() {
	*x = NoOpRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoOpRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpRequestPB) ProtoMessage() {}

func (x *NoOpRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpRequestPB.ProtoReflect.Descriptor instead.
func (*NoOpRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{4}
}

func (x *NoOpRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type NoOpResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *NoOpResponsePB) Reset() {
	*x = NoOpResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NoOpResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NoOpResponsePB) ProtoMessage() {}

func (x *NoOpResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NoOpResponsePB.ProtoReflect.Descriptor instead.
func (*NoOpResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{5}
}

func (x *NoOpResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// A verification request to check if a range of rows in main table is
// consistent with index table content. We will verify index table rows using
// the primary table.
type VerifyTableRowRangeRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// If indexes is empty, we will check all indexes
	// If it contains entries, then we will check only the ones provided.
	IndexIds [][]byte `protobuf:"bytes,2,rep,name=index_ids,json=indexIds" json:"index_ids,omitempty"`
	StartKey []byte   `protobuf:"bytes,3,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	NumRows  *uint32  `protobuf:"varint,4,opt,name=num_rows,json=numRows" json:"num_rows,omitempty"`
	// Read time if left empty will be replaced by the earliest safe time to read
	ReadTime             *uint64 `protobuf:"fixed64,5,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *VerifyTableRowRangeRequestPB) Reset() {
	*x = VerifyTableRowRangeRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTableRowRangeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTableRowRangeRequestPB) ProtoMessage() {}

func (x *VerifyTableRowRangeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTableRowRangeRequestPB.ProtoReflect.Descriptor instead.
func (*VerifyTableRowRangeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{6}
}

func (x *VerifyTableRowRangeRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *VerifyTableRowRangeRequestPB) GetIndexIds() [][]byte {
	if x != nil {
		return x.IndexIds
	}
	return nil
}

func (x *VerifyTableRowRangeRequestPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *VerifyTableRowRangeRequestPB) GetNumRows() uint32 {
	if x != nil && x.NumRows != nil {
		return *x.NumRows
	}
	return 0
}

func (x *VerifyTableRowRangeRequestPB) GetReadTime() uint64 {
	if x != nil && x.ReadTime != nil {
		return *x.ReadTime
	}
	return 0
}

func (x *VerifyTableRowRangeRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type VerifyTableRowRangeResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ConsistencyStats     map[string]uint64    `protobuf:"bytes,2,rep,name=consistency_stats,json=consistencyStats" json:"consistency_stats,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	VerifiedUntil        []byte               `protobuf:"bytes,3,opt,name=verified_until,json=verifiedUntil" json:"verified_until,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *VerifyTableRowRangeResponsePB) Reset() {
	*x = VerifyTableRowRangeResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyTableRowRangeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyTableRowRangeResponsePB) ProtoMessage() {}

func (x *VerifyTableRowRangeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyTableRowRangeResponsePB.ProtoReflect.Descriptor instead.
func (*VerifyTableRowRangeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{7}
}

func (x *VerifyTableRowRangeResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *VerifyTableRowRangeResponsePB) GetConsistencyStats() map[string]uint64 {
	if x != nil {
		return x.ConsistencyStats
	}
	return nil
}

func (x *VerifyTableRowRangeResponsePB) GetVerifiedUntil() []byte {
	if x != nil {
		return x.VerifiedUntil
	}
	return nil
}

func (x *VerifyTableRowRangeResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type ReadRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tablet to scan.
	TabletId   []byte                `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	RedisBatch []*RedisReadRequestPB `protobuf:"bytes,2,rep,name=redis_batch,json=redisBatch" json:"redis_batch,omitempty"`
	QlBatch    []*QLReadRequestPB    `protobuf:"bytes,4,rep,name=ql_batch,json=qlBatch" json:"ql_batch,omitempty"`
	PgsqlBatch []*PgsqlReadRequestPB `protobuf:"bytes,10,rep,name=pgsql_batch,json=pgsqlBatch" json:"pgsql_batch,omitempty"`
	// Whether data blocks will be cached when read from the files or discarded after use.
	// Disable this to lower cache churn when doing large scans.
	CacheBlocks          *bool                     `protobuf:"varint,3,opt,name=cache_blocks,json=cacheBlocks,def=1" json:"cache_blocks,omitempty"`
	IncludeTrace         *bool                     `protobuf:"varint,5,opt,name=include_trace,json=includeTrace,def=0" json:"include_trace,omitempty"`
	ConsistencyLevel     *YBConsistencyLevel       `protobuf:"varint,6,opt,name=consistency_level,json=consistencyLevel,enum=yb.YBConsistencyLevel,def=1" json:"consistency_level,omitempty"` // TODO: add hybrid_time in future
	Transaction          *TransactionMetadataPB    `protobuf:"bytes,7,opt,name=transaction" json:"transaction,omitempty"`
	Subtransaction       *SubTransactionMetadataPB `protobuf:"bytes,15,opt,name=subtransaction" json:"subtransaction,omitempty"`
	PropagatedHybridTime *uint64                   `protobuf:"fixed64,8,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// See ReadHybridTime for explation of next two fields.
	ReadTime                  *ReadHybridTimePB `protobuf:"bytes,9,opt,name=read_time,json=readTime" json:"read_time,omitempty"`
	ProxyUuid                 *string           `protobuf:"bytes,11,opt,name=proxy_uuid,json=proxyUuid" json:"proxy_uuid,omitempty"`
	DEPRECATEDMayHaveMetadata *bool             `protobuf:"varint,12,opt,name=DEPRECATED_may_have_metadata,json=DEPRECATEDMayHaveMetadata" json:"DEPRECATED_may_have_metadata,omitempty"`
	RejectionScore            *float64          `protobuf:"fixed64,13,opt,name=rejection_score,json=rejectionScore" json:"rejection_score,omitempty"`
	BatchIdx                  *uint64           `protobuf:"varint,14,opt,name=batch_idx,json=batchIdx" json:"batch_idx,omitempty"`
}

// Default values for ReadRequestPB fields.
const (
	Default_ReadRequestPB_CacheBlocks      = bool(true)
	Default_ReadRequestPB_IncludeTrace     = bool(false)
	Default_ReadRequestPB_ConsistencyLevel = YBConsistencyLevel_STRONG
)

func (x *ReadRequestPB) Reset() {
	*x = ReadRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadRequestPB) ProtoMessage() {}

func (x *ReadRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadRequestPB.ProtoReflect.Descriptor instead.
func (*ReadRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{8}
}

func (x *ReadRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ReadRequestPB) GetRedisBatch() []*RedisReadRequestPB {
	if x != nil {
		return x.RedisBatch
	}
	return nil
}

func (x *ReadRequestPB) GetQlBatch() []*QLReadRequestPB {
	if x != nil {
		return x.QlBatch
	}
	return nil
}

func (x *ReadRequestPB) GetPgsqlBatch() []*PgsqlReadRequestPB {
	if x != nil {
		return x.PgsqlBatch
	}
	return nil
}

func (x *ReadRequestPB) GetCacheBlocks() bool {
	if x != nil && x.CacheBlocks != nil {
		return *x.CacheBlocks
	}
	return Default_ReadRequestPB_CacheBlocks
}

func (x *ReadRequestPB) GetIncludeTrace() bool {
	if x != nil && x.IncludeTrace != nil {
		return *x.IncludeTrace
	}
	return Default_ReadRequestPB_IncludeTrace
}

func (x *ReadRequestPB) GetConsistencyLevel() YBConsistencyLevel {
	if x != nil && x.ConsistencyLevel != nil {
		return *x.ConsistencyLevel
	}
	return Default_ReadRequestPB_ConsistencyLevel
}

func (x *ReadRequestPB) GetTransaction() *TransactionMetadataPB {
	if x != nil {
		return x.Transaction
	}
	return nil
}

func (x *ReadRequestPB) GetSubtransaction() *SubTransactionMetadataPB {
	if x != nil {
		return x.Subtransaction
	}
	return nil
}

func (x *ReadRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ReadRequestPB) GetReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.ReadTime
	}
	return nil
}

func (x *ReadRequestPB) GetProxyUuid() string {
	if x != nil && x.ProxyUuid != nil {
		return *x.ProxyUuid
	}
	return ""
}

func (x *ReadRequestPB) GetDEPRECATEDMayHaveMetadata() bool {
	if x != nil && x.DEPRECATEDMayHaveMetadata != nil {
		return *x.DEPRECATEDMayHaveMetadata
	}
	return false
}

func (x *ReadRequestPB) GetRejectionScore() float64 {
	if x != nil && x.RejectionScore != nil {
		return *x.RejectionScore
	}
	return 0
}

func (x *ReadRequestPB) GetBatchIdx() uint64 {
	if x != nil && x.BatchIdx != nil {
		return *x.BatchIdx
	}
	return 0
}

type ReadResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedisBatch           []*RedisResponsePB   `protobuf:"bytes,1,rep,name=redis_batch,json=redisBatch" json:"redis_batch,omitempty"`
	QlBatch              []*QLResponsePB      `protobuf:"bytes,4,rep,name=ql_batch,json=qlBatch" json:"ql_batch,omitempty"`
	PgsqlBatch           []*PgsqlResponsePB   `protobuf:"bytes,8,rep,name=pgsql_batch,json=pgsqlBatch" json:"pgsql_batch,omitempty"`
	Error                *TabletServerErrorPB `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	TraceBuffer          *string              `protobuf:"bytes,5,opt,name=trace_buffer,json=traceBuffer" json:"trace_buffer,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Used to report restart whether this operation requires read restart.
	RestartReadTime *ReadHybridTimePB `protobuf:"bytes,7,opt,name=restart_read_time,json=restartReadTime" json:"restart_read_time,omitempty"`
	// Used to report used read time when transaction asked for it.
	UsedReadTime *ReadHybridTimePB `protobuf:"bytes,9,opt,name=used_read_time,json=usedReadTime" json:"used_read_time,omitempty"`
	LocalLimitHt *uint64           `protobuf:"fixed64,10,opt,name=local_limit_ht,json=localLimitHt" json:"local_limit_ht,omitempty"`
}

func (x *ReadResponsePB) Reset() {
	*x = ReadResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadResponsePB) ProtoMessage() {}

func (x *ReadResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadResponsePB.ProtoReflect.Descriptor instead.
func (*ReadResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{9}
}

func (x *ReadResponsePB) GetRedisBatch() []*RedisResponsePB {
	if x != nil {
		return x.RedisBatch
	}
	return nil
}

func (x *ReadResponsePB) GetQlBatch() []*QLResponsePB {
	if x != nil {
		return x.QlBatch
	}
	return nil
}

func (x *ReadResponsePB) GetPgsqlBatch() []*PgsqlResponsePB {
	if x != nil {
		return x.PgsqlBatch
	}
	return nil
}

func (x *ReadResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ReadResponsePB) GetTraceBuffer() string {
	if x != nil && x.TraceBuffer != nil {
		return *x.TraceBuffer
	}
	return ""
}

func (x *ReadResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ReadResponsePB) GetRestartReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.RestartReadTime
	}
	return nil
}

func (x *ReadResponsePB) GetUsedReadTime() *ReadHybridTimePB {
	if x != nil {
		return x.UsedReadTime
	}
	return nil
}

func (x *ReadResponsePB) GetLocalLimitHt() uint64 {
	if x != nil && x.LocalLimitHt != nil {
		return *x.LocalLimitHt
	}
	return 0
}

// Truncate tablet request.
type TruncateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId             []byte      `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	PropagatedHybridTime *uint64     `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	Truncate             *TruncatePB `protobuf:"bytes,3,opt,name=truncate" json:"truncate,omitempty"`
}

func (x *TruncateRequestPB) Reset() {
	*x = TruncateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateRequestPB) ProtoMessage() {}

func (x *TruncateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateRequestPB.ProtoReflect.Descriptor instead.
func (*TruncateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{10}
}

func (x *TruncateRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *TruncateRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *TruncateRequestPB) GetTruncate() *TruncatePB {
	if x != nil {
		return x.Truncate
	}
	return nil
}

// Truncate tablet response.
type TruncateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *TruncateResponsePB) Reset() {
	*x = TruncateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncateResponsePB) ProtoMessage() {}

func (x *TruncateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncateResponsePB.ProtoReflect.Descriptor instead.
func (*TruncateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{11}
}

func (x *TruncateResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *TruncateResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

// Tablet's status request
type GetTabletStatusRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte `protobuf:"bytes,1,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
}

func (x *GetTabletStatusRequestPB) Reset() {
	*x = GetTabletStatusRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletStatusRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletStatusRequestPB) ProtoMessage() {}

func (x *GetTabletStatusRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletStatusRequestPB.ProtoReflect.Descriptor instead.
func (*GetTabletStatusRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{12}
}

func (x *GetTabletStatusRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

// Tablet's status response
type GetTabletStatusResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error        *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	TabletStatus *TabletStatusPB      `protobuf:"bytes,2,opt,name=tablet_status,json=tabletStatus" json:"tablet_status,omitempty"`
}

func (x *GetTabletStatusResponsePB) Reset() {
	*x = GetTabletStatusResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTabletStatusResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTabletStatusResponsePB) ProtoMessage() {}

func (x *GetTabletStatusResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTabletStatusResponsePB.ProtoReflect.Descriptor instead.
func (*GetTabletStatusResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{13}
}

func (x *GetTabletStatusResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetTabletStatusResponsePB) GetTabletStatus() *TabletStatusPB {
	if x != nil {
		return x.TabletStatus
	}
	return nil
}

type GetMasterAddressesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMasterAddressesRequestPB) Reset() {
	*x = GetMasterAddressesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterAddressesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterAddressesRequestPB) ProtoMessage() {}

func (x *GetMasterAddressesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterAddressesRequestPB.ProtoReflect.Descriptor instead.
func (*GetMasterAddressesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{14}
}

type GetMasterAddressesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MasterAddresses *string              `protobuf:"bytes,2,opt,name=master_addresses,json=masterAddresses" json:"master_addresses,omitempty"`
}

func (x *GetMasterAddressesResponsePB) Reset() {
	*x = GetMasterAddressesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterAddressesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterAddressesResponsePB) ProtoMessage() {}

func (x *GetMasterAddressesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterAddressesResponsePB.ProtoReflect.Descriptor instead.
func (*GetMasterAddressesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{15}
}

func (x *GetMasterAddressesResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetMasterAddressesResponsePB) GetMasterAddresses() string {
	if x != nil && x.MasterAddresses != nil {
		return *x.MasterAddresses
	}
	return ""
}

type PublishRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel []byte `protobuf:"bytes,1,req,name=channel" json:"channel,omitempty"`
	Message []byte `protobuf:"bytes,2,req,name=message" json:"message,omitempty"`
}

func (x *PublishRequestPB) Reset() {
	*x = PublishRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequestPB) ProtoMessage() {}

func (x *PublishRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequestPB.ProtoReflect.Descriptor instead.
func (*PublishRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{16}
}

func (x *PublishRequestPB) GetChannel() []byte {
	if x != nil {
		return x.Channel
	}
	return nil
}

func (x *PublishRequestPB) GetMessage() []byte {
	if x != nil {
		return x.Message
	}
	return nil
}

type PublishResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NumClientsForwardedTo *int32 `protobuf:"varint,1,req,name=num_clients_forwarded_to,json=numClientsForwardedTo" json:"num_clients_forwarded_to,omitempty"`
}

func (x *PublishResponsePB) Reset() {
	*x = PublishResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponsePB) ProtoMessage() {}

func (x *PublishResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponsePB.ProtoReflect.Descriptor instead.
func (*PublishResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{17}
}

func (x *PublishResponsePB) GetNumClientsForwardedTo() int32 {
	if x != nil && x.NumClientsForwardedTo != nil {
		return *x.NumClientsForwardedTo
	}
	return 0
}

// Get this tserver's notion of being ready for handling IO requests across all
// tablets that it owns.
type IsTabletServerReadyRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsTabletServerReadyRequestPB) Reset() {
	*x = IsTabletServerReadyRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTabletServerReadyRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTabletServerReadyRequestPB) ProtoMessage() {}

func (x *IsTabletServerReadyRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTabletServerReadyRequestPB.ProtoReflect.Descriptor instead.
func (*IsTabletServerReadyRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{18}
}

// When response has no errors, the tserver is deemed ready as per its tablet manager layer
// when the number of not running tablets is 0. Or the client can choose to
// timeout before that. Also returns total tablets under this tablet server.
type IsTabletServerReadyResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NumTabletsNotRunning *int32               `protobuf:"varint,2,opt,name=num_tablets_not_running,json=numTabletsNotRunning" json:"num_tablets_not_running,omitempty"`
	TotalTablets         *int32               `protobuf:"varint,3,opt,name=total_tablets,json=totalTablets,def=0" json:"total_tablets,omitempty"`
}

// Default values for IsTabletServerReadyResponsePB fields.
const (
	Default_IsTabletServerReadyResponsePB_TotalTablets = int32(0)
)

func (x *IsTabletServerReadyResponsePB) Reset() {
	*x = IsTabletServerReadyResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsTabletServerReadyResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsTabletServerReadyResponsePB) ProtoMessage() {}

func (x *IsTabletServerReadyResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsTabletServerReadyResponsePB.ProtoReflect.Descriptor instead.
func (*IsTabletServerReadyResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{19}
}

func (x *IsTabletServerReadyResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *IsTabletServerReadyResponsePB) GetNumTabletsNotRunning() int32 {
	if x != nil && x.NumTabletsNotRunning != nil {
		return *x.NumTabletsNotRunning
	}
	return 0
}

func (x *IsTabletServerReadyResponsePB) GetTotalTablets() int32 {
	if x != nil && x.TotalTablets != nil {
		return *x.TotalTablets
	}
	return Default_IsTabletServerReadyResponsePB_TotalTablets
}

// If errors occurred with particular row operations, then the errors
// for those operations will be passed back in 'per_row_errors'.
type WriteResponsePB_PerRowErrorPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the row in the incoming batch.
	RowIndex *int32 `protobuf:"varint,1,req,name=row_index,json=rowIndex" json:"row_index,omitempty"`
	// The error that occurred.
	Error *AppStatusPB `protobuf:"bytes,2,req,name=error" json:"error,omitempty"`
}

func (x *WriteResponsePB_PerRowErrorPB) Reset() {
	*x = WriteResponsePB_PerRowErrorPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteResponsePB_PerRowErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteResponsePB_PerRowErrorPB) ProtoMessage() {}

func (x *WriteResponsePB_PerRowErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteResponsePB_PerRowErrorPB.ProtoReflect.Descriptor instead.
func (*WriteResponsePB_PerRowErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{1, 0}
}

func (x *WriteResponsePB_PerRowErrorPB) GetRowIndex() int32 {
	if x != nil && x.RowIndex != nil {
		return *x.RowIndex
	}
	return 0
}

func (x *WriteResponsePB_PerRowErrorPB) GetError() *AppStatusPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListTabletsResponsePB_StatusAndSchemaPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletStatus    *TabletStatusPB    `protobuf:"bytes,1,req,name=tablet_status,json=tabletStatus" json:"tablet_status,omitempty"`
	Schema          *SchemaPB          `protobuf:"bytes,2,req,name=schema" json:"schema,omitempty"`
	PartitionSchema *PartitionSchemaPB `protobuf:"bytes,3,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) Reset() {
	*x = ListTabletsResponsePB_StatusAndSchemaPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletsResponsePB_StatusAndSchemaPB) ProtoMessage() {}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletsResponsePB_StatusAndSchemaPB.ProtoReflect.Descriptor instead.
func (*ListTabletsResponsePB_StatusAndSchemaPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) GetTabletStatus() *TabletStatusPB {
	if x != nil {
		return x.TabletStatus
	}
	return nil
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) GetSchema() *SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ListTabletsResponsePB_StatusAndSchemaPB) GetPartitionSchema() *PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

var File_yb_tserver_tserver_proto protoreflect.FileDescriptor

var file_yb_tserver_tserver_proto_rawDesc = []byte{
	0x0a, 0x18, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x71, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x79, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2f,
	0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x79, 0x62, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xd3, 0x05, 0x0a, 0x0e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x3f, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e,
	0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x42, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x43, 0x0a, 0x11, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62,
	0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x64, 0x69, 0x73, 0x57, 0x72, 0x69, 0x74, 0x65,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x0e, 0x71, 0x6c, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x79, 0x62, 0x2e, 0x51, 0x4c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x52, 0x0c, 0x71, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x43, 0x0a, 0x11, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x5f, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x0d,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c,
	0x75, 0x64, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62,
	0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50,
	0x42, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f,
	0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x27, 0x0a,
	0x0f, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74,
	0x63, 0x68, 0x49, 0x64, 0x78, 0x22, 0xb7, 0x05, 0x0a, 0x0f, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x4f, 0x0a, 0x0e, 0x70, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x50, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x0c, 0x70, 0x65, 0x72, 0x52, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x73, 0x12, 0x45, 0x0a, 0x14, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x52, 0x12, 0x72, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3c, 0x0a, 0x11, 0x71, 0x6c, 0x5f, 0x72,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x0f, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x45, 0x0a, 0x14, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x0c,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52, 0x12, 0x70, 0x67, 0x73, 0x71, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a,
	0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x66,
	0x66, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x40, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x0c, 0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6c, 0x6f,
	0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x48, 0x74, 0x1a, 0x53, 0x0a, 0x0d, 0x50, 0x65,
	0x72, 0x52, 0x6f, 0x77, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x6f, 0x77, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x6f, 0x77, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x25, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0xed, 0x02, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x5f, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x41, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0xbb, 0x01, 0x0a, 0x11, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x12,
	0x3e, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50,
	0x42, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x2c, 0x0a, 0x0d, 0x4e, 0x6f, 0x4f, 0x70, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0x47, 0x0a, 0x0e, 0x4e, 0x6f, 0x4f, 0x70, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe3,
	0x01, 0x0a, 0x1c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x08, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x5f, 0x72, 0x6f,
	0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x6e, 0x75, 0x6d, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x34,
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x22, 0xe6, 0x02, 0x0a, 0x1d, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x6c, 0x0a,
	0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x77, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0d, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x55, 0x6e, 0x74,
	0x69, 0x6c, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x1a, 0x43, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x82, 0x06,
	0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x37, 0x0a, 0x0b,
	0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0a, 0x72, 0x65, 0x64, 0x69, 0x73,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2e, 0x0a, 0x08, 0x71, 0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63,
	0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52,
	0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x07, 0x71, 0x6c,
	0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37, 0x0a, 0x0b, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e,
	0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x52, 0x0a, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x27,
	0x0a, 0x0c, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x3a, 0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x0b, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x2a, 0x0a, 0x0d, 0x69, 0x6e, 0x63, 0x6c, 0x75,
	0x64, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x54, 0x72,
	0x61, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x79, 0x62, 0x2e, 0x59, 0x42, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x3a, 0x06, 0x53, 0x54, 0x52, 0x4f, 0x4e, 0x47, 0x52, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x4c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x42,
	0x52, 0x0b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x75, 0x62, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x50, 0x42, 0x52, 0x0e, 0x73, 0x75, 0x62, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79,
	0x62, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x50, 0x42, 0x52, 0x08, 0x72, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3f, 0x0a, 0x1c, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x6d, 0x61, 0x79, 0x5f, 0x68, 0x61,
	0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x19, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x4d, 0x61, 0x79,
	0x48, 0x61, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x6f, 0x72, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x69,
	0x64, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x78, 0x22, 0xe3, 0x03, 0x0a, 0x0e, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x34, 0x0a, 0x0b, 0x72, 0x65, 0x64, 0x69, 0x73, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x62, 0x2e,
	0x52, 0x65, 0x64, 0x69, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52,
	0x0a, 0x72, 0x65, 0x64, 0x69, 0x73, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x2b, 0x0a, 0x08, 0x71,
	0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x79, 0x62, 0x2e, 0x51, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x52,
	0x07, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x34, 0x0a, 0x0b, 0x70, 0x67, 0x73, 0x71,
	0x6c, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x79, 0x62, 0x2e, 0x50, 0x67, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x52, 0x0a, 0x70, 0x67, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x35,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x62,
	0x75, 0x66, 0x66, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40,
	0x0a, 0x11, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52,
	0x65, 0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52,
	0x0f, 0x72, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3a, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x52, 0x65,
	0x61, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x50, 0x42, 0x52, 0x0c,
	0x75, 0x73, 0x65, 0x64, 0x52, 0x65, 0x61, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x48, 0x74, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x22, 0x99, 0x01, 0x0a, 0x11, 0x54, 0x72, 0x75,
	0x6e, 0x63, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x31, 0x0a, 0x08, 0x74, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x52, 0x08, 0x74, 0x72, 0x75, 0x6e,
	0x63, 0x61, 0x74, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x12, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49,
	0x64, 0x22, 0x92, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x3e, 0x0a, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x0c, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x1d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x80, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x29, 0x0a,
	0x10, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x10, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x18, 0x0a, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0x4c, 0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x37, 0x0a, 0x18, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x5f, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x02, 0x28, 0x05, 0x52, 0x15, 0x6e, 0x75, 0x6d, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x22, 0x1e,
	0x0a, 0x1c, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0xb5,
	0x01, 0x0a, 0x1d, 0x49, 0x73, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x35, 0x0a, 0x17, 0x6e, 0x75, 0x6d, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6e, 0x75, 0x6d, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x4e, 0x6f, 0x74, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x26,
	0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x01, 0x30, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
}

var (
	file_yb_tserver_tserver_proto_rawDescOnce sync.Once
	file_yb_tserver_tserver_proto_rawDescData = file_yb_tserver_tserver_proto_rawDesc
)

func file_yb_tserver_tserver_proto_rawDescGZIP() []byte {
	file_yb_tserver_tserver_proto_rawDescOnce.Do(func() {
		file_yb_tserver_tserver_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_tserver_tserver_proto_rawDescData)
	})
	return file_yb_tserver_tserver_proto_rawDescData
}

var file_yb_tserver_tserver_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yb_tserver_tserver_proto_goTypes = []interface{}{
	(*WriteRequestPB)(nil),                          // 0: yb.tserver.WriteRequestPB
	(*WriteResponsePB)(nil),                         // 1: yb.tserver.WriteResponsePB
	(*ListTabletsRequestPB)(nil),                    // 2: yb.tserver.ListTabletsRequestPB
	(*ListTabletsResponsePB)(nil),                   // 3: yb.tserver.ListTabletsResponsePB
	(*NoOpRequestPB)(nil),                           // 4: yb.tserver.NoOpRequestPB
	(*NoOpResponsePB)(nil),                          // 5: yb.tserver.NoOpResponsePB
	(*VerifyTableRowRangeRequestPB)(nil),            // 6: yb.tserver.VerifyTableRowRangeRequestPB
	(*VerifyTableRowRangeResponsePB)(nil),           // 7: yb.tserver.VerifyTableRowRangeResponsePB
	(*ReadRequestPB)(nil),                           // 8: yb.tserver.ReadRequestPB
	(*ReadResponsePB)(nil),                          // 9: yb.tserver.ReadResponsePB
	(*TruncateRequestPB)(nil),                       // 10: yb.tserver.TruncateRequestPB
	(*TruncateResponsePB)(nil),                      // 11: yb.tserver.TruncateResponsePB
	(*GetTabletStatusRequestPB)(nil),                // 12: yb.tserver.GetTabletStatusRequestPB
	(*GetTabletStatusResponsePB)(nil),               // 13: yb.tserver.GetTabletStatusResponsePB
	(*GetMasterAddressesRequestPB)(nil),             // 14: yb.tserver.GetMasterAddressesRequestPB
	(*GetMasterAddressesResponsePB)(nil),            // 15: yb.tserver.GetMasterAddressesResponsePB
	(*PublishRequestPB)(nil),                        // 16: yb.tserver.PublishRequestPB
	(*PublishResponsePB)(nil),                       // 17: yb.tserver.PublishResponsePB
	(*IsTabletServerReadyRequestPB)(nil),            // 18: yb.tserver.IsTabletServerReadyRequestPB
	(*IsTabletServerReadyResponsePB)(nil),           // 19: yb.tserver.IsTabletServerReadyResponsePB
	(*WriteResponsePB_PerRowErrorPB)(nil),           // 20: yb.tserver.WriteResponsePB.PerRowErrorPB
	(*ListTabletsResponsePB_StatusAndSchemaPB)(nil), // 21: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB
	nil,                              // 22: yb.tserver.VerifyTableRowRangeResponsePB.ConsistencyStatsEntry
	(*KeyValueWriteBatchPB)(nil),     // 23: yb.docdb.KeyValueWriteBatchPB
	(*RedisWriteRequestPB)(nil),      // 24: yb.RedisWriteRequestPB
	(*QLWriteRequestPB)(nil),         // 25: yb.QLWriteRequestPB
	(*PgsqlWriteRequestPB)(nil),      // 26: yb.PgsqlWriteRequestPB
	(*ReadHybridTimePB)(nil),         // 27: yb.ReadHybridTimePB
	(*TabletServerErrorPB)(nil),      // 28: yb.tserver.TabletServerErrorPB
	(*RedisResponsePB)(nil),          // 29: yb.RedisResponsePB
	(*QLResponsePB)(nil),             // 30: yb.QLResponsePB
	(*PgsqlResponsePB)(nil),          // 31: yb.PgsqlResponsePB
	(*RedisReadRequestPB)(nil),       // 32: yb.RedisReadRequestPB
	(*QLReadRequestPB)(nil),          // 33: yb.QLReadRequestPB
	(*PgsqlReadRequestPB)(nil),       // 34: yb.PgsqlReadRequestPB
	(YBConsistencyLevel)(0),          // 35: yb.YBConsistencyLevel
	(*TransactionMetadataPB)(nil),    // 36: yb.TransactionMetadataPB
	(*SubTransactionMetadataPB)(nil), // 37: yb.SubTransactionMetadataPB
	(*TruncatePB)(nil),               // 38: yb.tablet.TruncatePB
	(*TabletStatusPB)(nil),           // 39: yb.tablet.TabletStatusPB
	(*AppStatusPB)(nil),              // 40: yb.AppStatusPB
	(*SchemaPB)(nil),                 // 41: yb.SchemaPB
	(*PartitionSchemaPB)(nil),        // 42: yb.PartitionSchemaPB
}
var file_yb_tserver_tserver_proto_depIdxs = []int32{
	23, // 0: yb.tserver.WriteRequestPB.write_batch:type_name -> yb.docdb.KeyValueWriteBatchPB
	24, // 1: yb.tserver.WriteRequestPB.redis_write_batch:type_name -> yb.RedisWriteRequestPB
	25, // 2: yb.tserver.WriteRequestPB.ql_write_batch:type_name -> yb.QLWriteRequestPB
	26, // 3: yb.tserver.WriteRequestPB.pgsql_write_batch:type_name -> yb.PgsqlWriteRequestPB
	27, // 4: yb.tserver.WriteRequestPB.read_time:type_name -> yb.ReadHybridTimePB
	28, // 5: yb.tserver.WriteResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	20, // 6: yb.tserver.WriteResponsePB.per_row_errors:type_name -> yb.tserver.WriteResponsePB.PerRowErrorPB
	29, // 7: yb.tserver.WriteResponsePB.redis_response_batch:type_name -> yb.RedisResponsePB
	30, // 8: yb.tserver.WriteResponsePB.ql_response_batch:type_name -> yb.QLResponsePB
	31, // 9: yb.tserver.WriteResponsePB.pgsql_response_batch:type_name -> yb.PgsqlResponsePB
	27, // 10: yb.tserver.WriteResponsePB.restart_read_time:type_name -> yb.ReadHybridTimePB
	27, // 11: yb.tserver.WriteResponsePB.used_read_time:type_name -> yb.ReadHybridTimePB
	28, // 12: yb.tserver.ListTabletsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	21, // 13: yb.tserver.ListTabletsResponsePB.status_and_schema:type_name -> yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB
	28, // 14: yb.tserver.NoOpResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 15: yb.tserver.VerifyTableRowRangeResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	22, // 16: yb.tserver.VerifyTableRowRangeResponsePB.consistency_stats:type_name -> yb.tserver.VerifyTableRowRangeResponsePB.ConsistencyStatsEntry
	32, // 17: yb.tserver.ReadRequestPB.redis_batch:type_name -> yb.RedisReadRequestPB
	33, // 18: yb.tserver.ReadRequestPB.ql_batch:type_name -> yb.QLReadRequestPB
	34, // 19: yb.tserver.ReadRequestPB.pgsql_batch:type_name -> yb.PgsqlReadRequestPB
	35, // 20: yb.tserver.ReadRequestPB.consistency_level:type_name -> yb.YBConsistencyLevel
	36, // 21: yb.tserver.ReadRequestPB.transaction:type_name -> yb.TransactionMetadataPB
	37, // 22: yb.tserver.ReadRequestPB.subtransaction:type_name -> yb.SubTransactionMetadataPB
	27, // 23: yb.tserver.ReadRequestPB.read_time:type_name -> yb.ReadHybridTimePB
	29, // 24: yb.tserver.ReadResponsePB.redis_batch:type_name -> yb.RedisResponsePB
	30, // 25: yb.tserver.ReadResponsePB.ql_batch:type_name -> yb.QLResponsePB
	31, // 26: yb.tserver.ReadResponsePB.pgsql_batch:type_name -> yb.PgsqlResponsePB
	28, // 27: yb.tserver.ReadResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	27, // 28: yb.tserver.ReadResponsePB.restart_read_time:type_name -> yb.ReadHybridTimePB
	27, // 29: yb.tserver.ReadResponsePB.used_read_time:type_name -> yb.ReadHybridTimePB
	38, // 30: yb.tserver.TruncateRequestPB.truncate:type_name -> yb.tablet.TruncatePB
	28, // 31: yb.tserver.TruncateResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 32: yb.tserver.GetTabletStatusResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	39, // 33: yb.tserver.GetTabletStatusResponsePB.tablet_status:type_name -> yb.tablet.TabletStatusPB
	28, // 34: yb.tserver.GetMasterAddressesResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 35: yb.tserver.IsTabletServerReadyResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	40, // 36: yb.tserver.WriteResponsePB.PerRowErrorPB.error:type_name -> yb.AppStatusPB
	39, // 37: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB.tablet_status:type_name -> yb.tablet.TabletStatusPB
	41, // 38: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB.schema:type_name -> yb.SchemaPB
	42, // 39: yb.tserver.ListTabletsResponsePB.StatusAndSchemaPB.partition_schema:type_name -> yb.PartitionSchemaPB
	40, // [40:40] is the sub-list for method output_type
	40, // [40:40] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_yb_tserver_tserver_proto_init() }
func file_yb_tserver_tserver_proto_init() {
	if File_yb_tserver_tserver_proto != nil {
		return
	}
	file_yb_common_common_proto_init()
	file_yb_common_common_types_proto_init()
	file_yb_common_redis_protocol_proto_init()
	file_yb_common_ql_protocol_proto_init()
	file_yb_common_pgsql_protocol_proto_init()
	file_yb_common_transaction_proto_init()
	file_yb_common_wire_protocol_proto_init()
	file_yb_docdb_docdb_proto_init()
	file_yb_tablet_operations_proto_init()
	file_yb_tablet_tablet_proto_init()
	file_yb_tserver_tserver_types_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_tserver_tserver_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoOpRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NoOpResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTableRowRangeRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifyTableRowRangeResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabletStatusRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTabletStatusResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterAddressesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterAddressesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublishResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTabletServerReadyRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsTabletServerReadyResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteResponsePB_PerRowErrorPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletsResponsePB_StatusAndSchemaPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_tserver_tserver_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_tserver_tserver_proto_goTypes,
		DependencyIndexes: file_yb_tserver_tserver_proto_depIdxs,
		MessageInfos:      file_yb_tserver_tserver_proto_msgTypes,
	}.Build()
	File_yb_tserver_tserver_proto = out.File
	file_yb_tserver_tserver_proto_rawDesc = nil
	file_yb_tserver_tserver_proto_goTypes = nil
	file_yb_tserver_tserver_proto_depIdxs = nil
}
