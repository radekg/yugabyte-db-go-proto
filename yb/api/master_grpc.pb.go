// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterServiceClient interface {
	// TS->Master RPCs
	TSHeartbeat(ctx context.Context, in *TSHeartbeatRequestPB, opts ...grpc.CallOption) (*TSHeartbeatResponsePB, error)
	// Client->Master RPCs
	GetTabletLocations(ctx context.Context, in *GetTabletLocationsRequestPB, opts ...grpc.CallOption) (*GetTabletLocationsResponsePB, error)
	CreateTable(ctx context.Context, in *CreateTableRequestPB, opts ...grpc.CallOption) (*CreateTableResponsePB, error)
	IsCreateTableDone(ctx context.Context, in *IsCreateTableDoneRequestPB, opts ...grpc.CallOption) (*IsCreateTableDoneResponsePB, error)
	AnalyzeTable(ctx context.Context, in *AnalyzeTableRequestPB, opts ...grpc.CallOption) (*AnalyzeTableResponsePB, error)
	TruncateTable(ctx context.Context, in *TruncateTableRequestPB, opts ...grpc.CallOption) (*TruncateTableResponsePB, error)
	IsTruncateTableDone(ctx context.Context, in *IsTruncateTableDoneRequestPB, opts ...grpc.CallOption) (*IsTruncateTableDoneResponsePB, error)
	BackfillIndex(ctx context.Context, in *MasterBackfillIndexRequestPB, opts ...grpc.CallOption) (*MasterBackfillIndexResponsePB, error)
	LaunchBackfillIndexForTable(ctx context.Context, in *LaunchBackfillIndexForTableRequestPB, opts ...grpc.CallOption) (*LaunchBackfillIndexForTableResponsePB, error)
	GetBackfillJobs(ctx context.Context, in *GetBackfillJobsRequestPB, opts ...grpc.CallOption) (*GetBackfillJobsResponsePB, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequestPB, opts ...grpc.CallOption) (*DeleteTableResponsePB, error)
	IsDeleteTableDone(ctx context.Context, in *IsDeleteTableDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteTableDoneResponsePB, error)
	AlterTable(ctx context.Context, in *AlterTableRequestPB, opts ...grpc.CallOption) (*AlterTableResponsePB, error)
	IsAlterTableDone(ctx context.Context, in *IsAlterTableDoneRequestPB, opts ...grpc.CallOption) (*IsAlterTableDoneResponsePB, error)
	ListTables(ctx context.Context, in *ListTablesRequestPB, opts ...grpc.CallOption) (*ListTablesResponsePB, error)
	GetTableLocations(ctx context.Context, in *GetTableLocationsRequestPB, opts ...grpc.CallOption) (*GetTableLocationsResponsePB, error)
	GetTableSchema(ctx context.Context, in *GetTableSchemaRequestPB, opts ...grpc.CallOption) (*GetTableSchemaResponsePB, error)
	GetColocatedTabletSchema(ctx context.Context, in *GetColocatedTabletSchemaRequestPB, opts ...grpc.CallOption) (*GetColocatedTabletSchemaResponsePB, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequestPB, opts ...grpc.CallOption) (*CreateNamespaceResponsePB, error)
	IsCreateNamespaceDone(ctx context.Context, in *IsCreateNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsCreateNamespaceDoneResponsePB, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequestPB, opts ...grpc.CallOption) (*DeleteNamespaceResponsePB, error)
	IsDeleteNamespaceDone(ctx context.Context, in *IsDeleteNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteNamespaceDoneResponsePB, error)
	AlterNamespace(ctx context.Context, in *AlterNamespaceRequestPB, opts ...grpc.CallOption) (*AlterNamespaceResponsePB, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequestPB, opts ...grpc.CallOption) (*ListNamespacesResponsePB, error)
	GetNamespaceInfo(ctx context.Context, in *GetNamespaceInfoRequestPB, opts ...grpc.CallOption) (*GetNamespaceInfoResponsePB, error)
	// For Tablegroup:
	CreateTablegroup(ctx context.Context, in *CreateTablegroupRequestPB, opts ...grpc.CallOption) (*CreateTablegroupResponsePB, error)
	DeleteTablegroup(ctx context.Context, in *DeleteTablegroupRequestPB, opts ...grpc.CallOption) (*DeleteTablegroupResponsePB, error)
	ListTablegroups(ctx context.Context, in *ListTablegroupsRequestPB, opts ...grpc.CallOption) (*ListTablegroupsResponsePB, error)
	// For Postgres:
	ReservePgsqlOids(ctx context.Context, in *ReservePgsqlOidsRequestPB, opts ...grpc.CallOption) (*ReservePgsqlOidsResponsePB, error)
	GetYsqlCatalogConfig(ctx context.Context, in *GetYsqlCatalogConfigRequestPB, opts ...grpc.CallOption) (*GetYsqlCatalogConfigResponsePB, error)
	//  Authentication and Authorization.
	CreateRole(ctx context.Context, in *CreateRoleRequestPB, opts ...grpc.CallOption) (*CreateRoleResponsePB, error)
	AlterRole(ctx context.Context, in *AlterRoleRequestPB, opts ...grpc.CallOption) (*AlterRoleResponsePB, error)
	DeleteRole(ctx context.Context, in *DeleteRoleRequestPB, opts ...grpc.CallOption) (*DeleteRoleResponsePB, error)
	GrantRevokeRole(ctx context.Context, in *GrantRevokeRoleRequestPB, opts ...grpc.CallOption) (*GrantRevokeRoleResponsePB, error)
	GrantRevokePermission(ctx context.Context, in *GrantRevokePermissionRequestPB, opts ...grpc.CallOption) (*GrantRevokePermissionResponsePB, error)
	GetPermissions(ctx context.Context, in *GetPermissionsRequestPB, opts ...grpc.CallOption) (*GetPermissionsResponsePB, error)
	CreateUDType(ctx context.Context, in *CreateUDTypeRequestPB, opts ...grpc.CallOption) (*CreateUDTypeResponsePB, error)
	DeleteUDType(ctx context.Context, in *DeleteUDTypeRequestPB, opts ...grpc.CallOption) (*DeleteUDTypeResponsePB, error)
	ListUDTypes(ctx context.Context, in *ListUDTypesRequestPB, opts ...grpc.CallOption) (*ListUDTypesResponsePB, error)
	GetUDTypeInfo(ctx context.Context, in *GetUDTypeInfoRequestPB, opts ...grpc.CallOption) (*GetUDTypeInfoResponsePB, error)
	// CDC stream RPCs.
	CreateCDCStream(ctx context.Context, in *MasterCreateCDCStreamRequestPB, opts ...grpc.CallOption) (*MasterCreateCDCStreamResponsePB, error)
	DeleteCDCStream(ctx context.Context, in *MasterDeleteCDCStreamRequestPB, opts ...grpc.CallOption) (*MasterDeleteCDCStreamResponsePB, error)
	ListCDCStreams(ctx context.Context, in *ListCDCStreamsRequestPB, opts ...grpc.CallOption) (*ListCDCStreamsResponsePB, error)
	GetCDCStream(ctx context.Context, in *GetCDCStreamRequestPB, opts ...grpc.CallOption) (*GetCDCStreamResponsePB, error)
	// Redis Config
	RedisConfigSet(ctx context.Context, in *RedisConfigSetRequestPB, opts ...grpc.CallOption) (*RedisConfigSetResponsePB, error)
	RedisConfigGet(ctx context.Context, in *RedisConfigGetRequestPB, opts ...grpc.CallOption) (*RedisConfigGetResponsePB, error)
	// Administrative/monitoring RPCs
	ListTabletServers(ctx context.Context, in *ListTabletServersRequestPB, opts ...grpc.CallOption) (*ListTabletServersResponsePB, error)
	ListLiveTabletServers(ctx context.Context, in *ListLiveTabletServersRequestPB, opts ...grpc.CallOption) (*ListLiveTabletServersResponsePB, error)
	ListMasters(ctx context.Context, in *ListMastersRequestPB, opts ...grpc.CallOption) (*ListMastersResponsePB, error)
	ListMasterRaftPeers(ctx context.Context, in *ListMasterRaftPeersRequestPB, opts ...grpc.CallOption) (*ListMasterRaftPeersResponsePB, error)
	GetMasterRegistration(ctx context.Context, in *GetMasterRegistrationRequestPB, opts ...grpc.CallOption) (*GetMasterRegistrationResponsePB, error)
	// Get the ready status from the catalog manager for this master.
	// NOTE: Should be used only for unit testing purposes.
	IsMasterLeaderServiceReady(ctx context.Context, in *IsMasterLeaderReadyRequestPB, opts ...grpc.CallOption) (*IsMasterLeaderReadyResponsePB, error)
	// Dump master state from all the peers in the current master's quorum
	DumpState(ctx context.Context, in *DumpMasterStateRequestPB, opts ...grpc.CallOption) (*DumpMasterStateResponsePB, error)
	ChangeLoadBalancerState(ctx context.Context, in *ChangeLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*ChangeLoadBalancerStateResponsePB, error)
	GetLoadBalancerState(ctx context.Context, in *GetLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*GetLoadBalancerStateResponsePB, error)
	RemovedMasterUpdate(ctx context.Context, in *RemovedMasterUpdateRequestPB, opts ...grpc.CallOption) (*RemovedMasterUpdateResponsePB, error)
	SetPreferredZones(ctx context.Context, in *SetPreferredZonesRequestPB, opts ...grpc.CallOption) (*SetPreferredZonesResponsePB, error)
	GetMasterClusterConfig(ctx context.Context, in *GetMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*GetMasterClusterConfigResponsePB, error)
	ChangeMasterClusterConfig(ctx context.Context, in *ChangeMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*ChangeMasterClusterConfigResponsePB, error)
	GetLoadMoveCompletion(ctx context.Context, in *GetLoadMovePercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error)
	GetLeaderBlacklistCompletion(ctx context.Context, in *GetLeaderBlacklistPercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error)
	IsLoadBalanced(ctx context.Context, in *IsLoadBalancedRequestPB, opts ...grpc.CallOption) (*IsLoadBalancedResponsePB, error)
	IsLoadBalancerIdle(ctx context.Context, in *IsLoadBalancerIdleRequestPB, opts ...grpc.CallOption) (*IsLoadBalancerIdleResponsePB, error)
	AreLeadersOnPreferredOnly(ctx context.Context, in *AreLeadersOnPreferredOnlyRequestPB, opts ...grpc.CallOption) (*AreLeadersOnPreferredOnlyResponsePB, error)
	FlushTables(ctx context.Context, in *FlushTablesRequestPB, opts ...grpc.CallOption) (*FlushTablesResponsePB, error)
	IsFlushTablesDone(ctx context.Context, in *IsFlushTablesDoneRequestPB, opts ...grpc.CallOption) (*IsFlushTablesDoneResponsePB, error)
	IsInitDbDone(ctx context.Context, in *IsInitDbDoneRequestPB, opts ...grpc.CallOption) (*IsInitDbDoneResponsePB, error)
	ChangeEncryptionInfo(ctx context.Context, in *ChangeEncryptionInfoRequestPB, opts ...grpc.CallOption) (*ChangeEncryptionInfoResponsePB, error)
	IsEncryptionEnabled(ctx context.Context, in *IsEncryptionEnabledRequestPB, opts ...grpc.CallOption) (*IsEncryptionEnabledResponsePB, error)
	SetupUniverseReplication(ctx context.Context, in *SetupUniverseReplicationRequestPB, opts ...grpc.CallOption) (*SetupUniverseReplicationResponsePB, error)
	DeleteUniverseReplication(ctx context.Context, in *DeleteUniverseReplicationRequestPB, opts ...grpc.CallOption) (*DeleteUniverseReplicationResponsePB, error)
	AlterUniverseReplication(ctx context.Context, in *AlterUniverseReplicationRequestPB, opts ...grpc.CallOption) (*AlterUniverseReplicationResponsePB, error)
	SetUniverseReplicationEnabled(ctx context.Context, in *SetUniverseReplicationEnabledRequestPB, opts ...grpc.CallOption) (*SetUniverseReplicationEnabledResponsePB, error)
	GetUniverseReplication(ctx context.Context, in *GetUniverseReplicationRequestPB, opts ...grpc.CallOption) (*GetUniverseReplicationResponsePB, error)
	IsSetupUniverseReplicationDone(ctx context.Context, in *IsSetupUniverseReplicationDoneRequestPB, opts ...grpc.CallOption) (*IsSetupUniverseReplicationDoneResponsePB, error)
	AddUniverseKeys(ctx context.Context, in *AddUniverseKeysRequestPB, opts ...grpc.CallOption) (*AddUniverseKeysResponsePB, error)
	GetUniverseKeyRegistry(ctx context.Context, in *GetUniverseKeyRegistryRequestPB, opts ...grpc.CallOption) (*GetUniverseKeyRegistryResponsePB, error)
	HasUniverseKeyInMemory(ctx context.Context, in *HasUniverseKeyInMemoryRequestPB, opts ...grpc.CallOption) (*HasUniverseKeyInMemoryResponsePB, error)
	SplitTablet(ctx context.Context, in *MasterSplitTabletRequestPB, opts ...grpc.CallOption) (*MasterSplitTabletResponsePB, error)
	DeleteTablet(ctx context.Context, in *MasterDeleteTabletRequestPB, opts ...grpc.CallOption) (*MasterDeleteTabletResponsePB, error)
	DdlLog(ctx context.Context, in *DdlLogRequestPB, opts ...grpc.CallOption) (*DdlLogResponsePB, error)
}

type masterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterServiceClient(cc grpc.ClientConnInterface) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) TSHeartbeat(ctx context.Context, in *TSHeartbeatRequestPB, opts ...grpc.CallOption) (*TSHeartbeatResponsePB, error) {
	out := new(TSHeartbeatResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/TSHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetTabletLocations(ctx context.Context, in *GetTabletLocationsRequestPB, opts ...grpc.CallOption) (*GetTabletLocationsResponsePB, error) {
	out := new(GetTabletLocationsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetTabletLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateTable(ctx context.Context, in *CreateTableRequestPB, opts ...grpc.CallOption) (*CreateTableResponsePB, error) {
	out := new(CreateTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsCreateTableDone(ctx context.Context, in *IsCreateTableDoneRequestPB, opts ...grpc.CallOption) (*IsCreateTableDoneResponsePB, error) {
	out := new(IsCreateTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsCreateTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AnalyzeTable(ctx context.Context, in *AnalyzeTableRequestPB, opts ...grpc.CallOption) (*AnalyzeTableResponsePB, error) {
	out := new(AnalyzeTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/AnalyzeTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) TruncateTable(ctx context.Context, in *TruncateTableRequestPB, opts ...grpc.CallOption) (*TruncateTableResponsePB, error) {
	out := new(TruncateTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/TruncateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsTruncateTableDone(ctx context.Context, in *IsTruncateTableDoneRequestPB, opts ...grpc.CallOption) (*IsTruncateTableDoneResponsePB, error) {
	out := new(IsTruncateTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsTruncateTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) BackfillIndex(ctx context.Context, in *MasterBackfillIndexRequestPB, opts ...grpc.CallOption) (*MasterBackfillIndexResponsePB, error) {
	out := new(MasterBackfillIndexResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/BackfillIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) LaunchBackfillIndexForTable(ctx context.Context, in *LaunchBackfillIndexForTableRequestPB, opts ...grpc.CallOption) (*LaunchBackfillIndexForTableResponsePB, error) {
	out := new(LaunchBackfillIndexForTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/LaunchBackfillIndexForTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetBackfillJobs(ctx context.Context, in *GetBackfillJobsRequestPB, opts ...grpc.CallOption) (*GetBackfillJobsResponsePB, error) {
	out := new(GetBackfillJobsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetBackfillJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteTable(ctx context.Context, in *DeleteTableRequestPB, opts ...grpc.CallOption) (*DeleteTableResponsePB, error) {
	out := new(DeleteTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsDeleteTableDone(ctx context.Context, in *IsDeleteTableDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteTableDoneResponsePB, error) {
	out := new(IsDeleteTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsDeleteTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AlterTable(ctx context.Context, in *AlterTableRequestPB, opts ...grpc.CallOption) (*AlterTableResponsePB, error) {
	out := new(AlterTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/AlterTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsAlterTableDone(ctx context.Context, in *IsAlterTableDoneRequestPB, opts ...grpc.CallOption) (*IsAlterTableDoneResponsePB, error) {
	out := new(IsAlterTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsAlterTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListTables(ctx context.Context, in *ListTablesRequestPB, opts ...grpc.CallOption) (*ListTablesResponsePB, error) {
	out := new(ListTablesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetTableLocations(ctx context.Context, in *GetTableLocationsRequestPB, opts ...grpc.CallOption) (*GetTableLocationsResponsePB, error) {
	out := new(GetTableLocationsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetTableLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetTableSchema(ctx context.Context, in *GetTableSchemaRequestPB, opts ...grpc.CallOption) (*GetTableSchemaResponsePB, error) {
	out := new(GetTableSchemaResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetTableSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetColocatedTabletSchema(ctx context.Context, in *GetColocatedTabletSchemaRequestPB, opts ...grpc.CallOption) (*GetColocatedTabletSchemaResponsePB, error) {
	out := new(GetColocatedTabletSchemaResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetColocatedTabletSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequestPB, opts ...grpc.CallOption) (*CreateNamespaceResponsePB, error) {
	out := new(CreateNamespaceResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsCreateNamespaceDone(ctx context.Context, in *IsCreateNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsCreateNamespaceDoneResponsePB, error) {
	out := new(IsCreateNamespaceDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsCreateNamespaceDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequestPB, opts ...grpc.CallOption) (*DeleteNamespaceResponsePB, error) {
	out := new(DeleteNamespaceResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsDeleteNamespaceDone(ctx context.Context, in *IsDeleteNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteNamespaceDoneResponsePB, error) {
	out := new(IsDeleteNamespaceDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsDeleteNamespaceDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AlterNamespace(ctx context.Context, in *AlterNamespaceRequestPB, opts ...grpc.CallOption) (*AlterNamespaceResponsePB, error) {
	out := new(AlterNamespaceResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/AlterNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequestPB, opts ...grpc.CallOption) (*ListNamespacesResponsePB, error) {
	out := new(ListNamespacesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetNamespaceInfo(ctx context.Context, in *GetNamespaceInfoRequestPB, opts ...grpc.CallOption) (*GetNamespaceInfoResponsePB, error) {
	out := new(GetNamespaceInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetNamespaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateTablegroup(ctx context.Context, in *CreateTablegroupRequestPB, opts ...grpc.CallOption) (*CreateTablegroupResponsePB, error) {
	out := new(CreateTablegroupResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/CreateTablegroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteTablegroup(ctx context.Context, in *DeleteTablegroupRequestPB, opts ...grpc.CallOption) (*DeleteTablegroupResponsePB, error) {
	out := new(DeleteTablegroupResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteTablegroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListTablegroups(ctx context.Context, in *ListTablegroupsRequestPB, opts ...grpc.CallOption) (*ListTablegroupsResponsePB, error) {
	out := new(ListTablegroupsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListTablegroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ReservePgsqlOids(ctx context.Context, in *ReservePgsqlOidsRequestPB, opts ...grpc.CallOption) (*ReservePgsqlOidsResponsePB, error) {
	out := new(ReservePgsqlOidsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ReservePgsqlOids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetYsqlCatalogConfig(ctx context.Context, in *GetYsqlCatalogConfigRequestPB, opts ...grpc.CallOption) (*GetYsqlCatalogConfigResponsePB, error) {
	out := new(GetYsqlCatalogConfigResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetYsqlCatalogConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateRole(ctx context.Context, in *CreateRoleRequestPB, opts ...grpc.CallOption) (*CreateRoleResponsePB, error) {
	out := new(CreateRoleResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/CreateRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AlterRole(ctx context.Context, in *AlterRoleRequestPB, opts ...grpc.CallOption) (*AlterRoleResponsePB, error) {
	out := new(AlterRoleResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/AlterRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteRole(ctx context.Context, in *DeleteRoleRequestPB, opts ...grpc.CallOption) (*DeleteRoleResponsePB, error) {
	out := new(DeleteRoleResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GrantRevokeRole(ctx context.Context, in *GrantRevokeRoleRequestPB, opts ...grpc.CallOption) (*GrantRevokeRoleResponsePB, error) {
	out := new(GrantRevokeRoleResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GrantRevokeRole", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GrantRevokePermission(ctx context.Context, in *GrantRevokePermissionRequestPB, opts ...grpc.CallOption) (*GrantRevokePermissionResponsePB, error) {
	out := new(GrantRevokePermissionResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GrantRevokePermission", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetPermissions(ctx context.Context, in *GetPermissionsRequestPB, opts ...grpc.CallOption) (*GetPermissionsResponsePB, error) {
	out := new(GetPermissionsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetPermissions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateUDType(ctx context.Context, in *CreateUDTypeRequestPB, opts ...grpc.CallOption) (*CreateUDTypeResponsePB, error) {
	out := new(CreateUDTypeResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/CreateUDType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteUDType(ctx context.Context, in *DeleteUDTypeRequestPB, opts ...grpc.CallOption) (*DeleteUDTypeResponsePB, error) {
	out := new(DeleteUDTypeResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteUDType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListUDTypes(ctx context.Context, in *ListUDTypesRequestPB, opts ...grpc.CallOption) (*ListUDTypesResponsePB, error) {
	out := new(ListUDTypesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListUDTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetUDTypeInfo(ctx context.Context, in *GetUDTypeInfoRequestPB, opts ...grpc.CallOption) (*GetUDTypeInfoResponsePB, error) {
	out := new(GetUDTypeInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetUDTypeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CreateCDCStream(ctx context.Context, in *MasterCreateCDCStreamRequestPB, opts ...grpc.CallOption) (*MasterCreateCDCStreamResponsePB, error) {
	out := new(MasterCreateCDCStreamResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/CreateCDCStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteCDCStream(ctx context.Context, in *MasterDeleteCDCStreamRequestPB, opts ...grpc.CallOption) (*MasterDeleteCDCStreamResponsePB, error) {
	out := new(MasterDeleteCDCStreamResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteCDCStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListCDCStreams(ctx context.Context, in *ListCDCStreamsRequestPB, opts ...grpc.CallOption) (*ListCDCStreamsResponsePB, error) {
	out := new(ListCDCStreamsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListCDCStreams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetCDCStream(ctx context.Context, in *GetCDCStreamRequestPB, opts ...grpc.CallOption) (*GetCDCStreamResponsePB, error) {
	out := new(GetCDCStreamResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetCDCStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RedisConfigSet(ctx context.Context, in *RedisConfigSetRequestPB, opts ...grpc.CallOption) (*RedisConfigSetResponsePB, error) {
	out := new(RedisConfigSetResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/RedisConfigSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RedisConfigGet(ctx context.Context, in *RedisConfigGetRequestPB, opts ...grpc.CallOption) (*RedisConfigGetResponsePB, error) {
	out := new(RedisConfigGetResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/RedisConfigGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListTabletServers(ctx context.Context, in *ListTabletServersRequestPB, opts ...grpc.CallOption) (*ListTabletServersResponsePB, error) {
	out := new(ListTabletServersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListTabletServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListLiveTabletServers(ctx context.Context, in *ListLiveTabletServersRequestPB, opts ...grpc.CallOption) (*ListLiveTabletServersResponsePB, error) {
	out := new(ListLiveTabletServersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListLiveTabletServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListMasters(ctx context.Context, in *ListMastersRequestPB, opts ...grpc.CallOption) (*ListMastersResponsePB, error) {
	out := new(ListMastersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListMasters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListMasterRaftPeers(ctx context.Context, in *ListMasterRaftPeersRequestPB, opts ...grpc.CallOption) (*ListMasterRaftPeersResponsePB, error) {
	out := new(ListMasterRaftPeersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ListMasterRaftPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetMasterRegistration(ctx context.Context, in *GetMasterRegistrationRequestPB, opts ...grpc.CallOption) (*GetMasterRegistrationResponsePB, error) {
	out := new(GetMasterRegistrationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetMasterRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsMasterLeaderServiceReady(ctx context.Context, in *IsMasterLeaderReadyRequestPB, opts ...grpc.CallOption) (*IsMasterLeaderReadyResponsePB, error) {
	out := new(IsMasterLeaderReadyResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsMasterLeaderServiceReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DumpState(ctx context.Context, in *DumpMasterStateRequestPB, opts ...grpc.CallOption) (*DumpMasterStateResponsePB, error) {
	out := new(DumpMasterStateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DumpState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ChangeLoadBalancerState(ctx context.Context, in *ChangeLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*ChangeLoadBalancerStateResponsePB, error) {
	out := new(ChangeLoadBalancerStateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ChangeLoadBalancerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetLoadBalancerState(ctx context.Context, in *GetLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*GetLoadBalancerStateResponsePB, error) {
	out := new(GetLoadBalancerStateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetLoadBalancerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RemovedMasterUpdate(ctx context.Context, in *RemovedMasterUpdateRequestPB, opts ...grpc.CallOption) (*RemovedMasterUpdateResponsePB, error) {
	out := new(RemovedMasterUpdateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/RemovedMasterUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetPreferredZones(ctx context.Context, in *SetPreferredZonesRequestPB, opts ...grpc.CallOption) (*SetPreferredZonesResponsePB, error) {
	out := new(SetPreferredZonesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/SetPreferredZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetMasterClusterConfig(ctx context.Context, in *GetMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*GetMasterClusterConfigResponsePB, error) {
	out := new(GetMasterClusterConfigResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetMasterClusterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ChangeMasterClusterConfig(ctx context.Context, in *ChangeMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*ChangeMasterClusterConfigResponsePB, error) {
	out := new(ChangeMasterClusterConfigResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ChangeMasterClusterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetLoadMoveCompletion(ctx context.Context, in *GetLoadMovePercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error) {
	out := new(GetLoadMovePercentResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetLoadMoveCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetLeaderBlacklistCompletion(ctx context.Context, in *GetLeaderBlacklistPercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error) {
	out := new(GetLoadMovePercentResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetLeaderBlacklistCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsLoadBalanced(ctx context.Context, in *IsLoadBalancedRequestPB, opts ...grpc.CallOption) (*IsLoadBalancedResponsePB, error) {
	out := new(IsLoadBalancedResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsLoadBalanced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsLoadBalancerIdle(ctx context.Context, in *IsLoadBalancerIdleRequestPB, opts ...grpc.CallOption) (*IsLoadBalancerIdleResponsePB, error) {
	out := new(IsLoadBalancerIdleResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsLoadBalancerIdle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AreLeadersOnPreferredOnly(ctx context.Context, in *AreLeadersOnPreferredOnlyRequestPB, opts ...grpc.CallOption) (*AreLeadersOnPreferredOnlyResponsePB, error) {
	out := new(AreLeadersOnPreferredOnlyResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/AreLeadersOnPreferredOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) FlushTables(ctx context.Context, in *FlushTablesRequestPB, opts ...grpc.CallOption) (*FlushTablesResponsePB, error) {
	out := new(FlushTablesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/FlushTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsFlushTablesDone(ctx context.Context, in *IsFlushTablesDoneRequestPB, opts ...grpc.CallOption) (*IsFlushTablesDoneResponsePB, error) {
	out := new(IsFlushTablesDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsFlushTablesDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsInitDbDone(ctx context.Context, in *IsInitDbDoneRequestPB, opts ...grpc.CallOption) (*IsInitDbDoneResponsePB, error) {
	out := new(IsInitDbDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsInitDbDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ChangeEncryptionInfo(ctx context.Context, in *ChangeEncryptionInfoRequestPB, opts ...grpc.CallOption) (*ChangeEncryptionInfoResponsePB, error) {
	out := new(ChangeEncryptionInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/ChangeEncryptionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsEncryptionEnabled(ctx context.Context, in *IsEncryptionEnabledRequestPB, opts ...grpc.CallOption) (*IsEncryptionEnabledResponsePB, error) {
	out := new(IsEncryptionEnabledResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsEncryptionEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetupUniverseReplication(ctx context.Context, in *SetupUniverseReplicationRequestPB, opts ...grpc.CallOption) (*SetupUniverseReplicationResponsePB, error) {
	out := new(SetupUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/SetupUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteUniverseReplication(ctx context.Context, in *DeleteUniverseReplicationRequestPB, opts ...grpc.CallOption) (*DeleteUniverseReplicationResponsePB, error) {
	out := new(DeleteUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AlterUniverseReplication(ctx context.Context, in *AlterUniverseReplicationRequestPB, opts ...grpc.CallOption) (*AlterUniverseReplicationResponsePB, error) {
	out := new(AlterUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/AlterUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SetUniverseReplicationEnabled(ctx context.Context, in *SetUniverseReplicationEnabledRequestPB, opts ...grpc.CallOption) (*SetUniverseReplicationEnabledResponsePB, error) {
	out := new(SetUniverseReplicationEnabledResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/SetUniverseReplicationEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetUniverseReplication(ctx context.Context, in *GetUniverseReplicationRequestPB, opts ...grpc.CallOption) (*GetUniverseReplicationResponsePB, error) {
	out := new(GetUniverseReplicationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetUniverseReplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) IsSetupUniverseReplicationDone(ctx context.Context, in *IsSetupUniverseReplicationDoneRequestPB, opts ...grpc.CallOption) (*IsSetupUniverseReplicationDoneResponsePB, error) {
	out := new(IsSetupUniverseReplicationDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/IsSetupUniverseReplicationDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) AddUniverseKeys(ctx context.Context, in *AddUniverseKeysRequestPB, opts ...grpc.CallOption) (*AddUniverseKeysResponsePB, error) {
	out := new(AddUniverseKeysResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/AddUniverseKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) GetUniverseKeyRegistry(ctx context.Context, in *GetUniverseKeyRegistryRequestPB, opts ...grpc.CallOption) (*GetUniverseKeyRegistryResponsePB, error) {
	out := new(GetUniverseKeyRegistryResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/GetUniverseKeyRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) HasUniverseKeyInMemory(ctx context.Context, in *HasUniverseKeyInMemoryRequestPB, opts ...grpc.CallOption) (*HasUniverseKeyInMemoryResponsePB, error) {
	out := new(HasUniverseKeyInMemoryResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/HasUniverseKeyInMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) SplitTablet(ctx context.Context, in *MasterSplitTabletRequestPB, opts ...grpc.CallOption) (*MasterSplitTabletResponsePB, error) {
	out := new(MasterSplitTabletResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/SplitTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DeleteTablet(ctx context.Context, in *MasterDeleteTabletRequestPB, opts ...grpc.CallOption) (*MasterDeleteTabletResponsePB, error) {
	out := new(MasterDeleteTabletResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DeleteTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) DdlLog(ctx context.Context, in *DdlLogRequestPB, opts ...grpc.CallOption) (*DdlLogResponsePB, error) {
	out := new(DdlLogResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterService/DdlLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
// All implementations should embed UnimplementedMasterServiceServer
// for forward compatibility
type MasterServiceServer interface {
	// TS->Master RPCs
	TSHeartbeat(context.Context, *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error)
	// Client->Master RPCs
	GetTabletLocations(context.Context, *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error)
	CreateTable(context.Context, *CreateTableRequestPB) (*CreateTableResponsePB, error)
	IsCreateTableDone(context.Context, *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error)
	AnalyzeTable(context.Context, *AnalyzeTableRequestPB) (*AnalyzeTableResponsePB, error)
	TruncateTable(context.Context, *TruncateTableRequestPB) (*TruncateTableResponsePB, error)
	IsTruncateTableDone(context.Context, *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error)
	BackfillIndex(context.Context, *MasterBackfillIndexRequestPB) (*MasterBackfillIndexResponsePB, error)
	LaunchBackfillIndexForTable(context.Context, *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error)
	GetBackfillJobs(context.Context, *GetBackfillJobsRequestPB) (*GetBackfillJobsResponsePB, error)
	DeleteTable(context.Context, *DeleteTableRequestPB) (*DeleteTableResponsePB, error)
	IsDeleteTableDone(context.Context, *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error)
	AlterTable(context.Context, *AlterTableRequestPB) (*AlterTableResponsePB, error)
	IsAlterTableDone(context.Context, *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error)
	ListTables(context.Context, *ListTablesRequestPB) (*ListTablesResponsePB, error)
	GetTableLocations(context.Context, *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error)
	GetTableSchema(context.Context, *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error)
	GetColocatedTabletSchema(context.Context, *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error)
	CreateNamespace(context.Context, *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error)
	IsCreateNamespaceDone(context.Context, *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error)
	IsDeleteNamespaceDone(context.Context, *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error)
	AlterNamespace(context.Context, *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error)
	ListNamespaces(context.Context, *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error)
	GetNamespaceInfo(context.Context, *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error)
	// For Tablegroup:
	CreateTablegroup(context.Context, *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error)
	DeleteTablegroup(context.Context, *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error)
	ListTablegroups(context.Context, *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error)
	// For Postgres:
	ReservePgsqlOids(context.Context, *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error)
	GetYsqlCatalogConfig(context.Context, *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error)
	//  Authentication and Authorization.
	CreateRole(context.Context, *CreateRoleRequestPB) (*CreateRoleResponsePB, error)
	AlterRole(context.Context, *AlterRoleRequestPB) (*AlterRoleResponsePB, error)
	DeleteRole(context.Context, *DeleteRoleRequestPB) (*DeleteRoleResponsePB, error)
	GrantRevokeRole(context.Context, *GrantRevokeRoleRequestPB) (*GrantRevokeRoleResponsePB, error)
	GrantRevokePermission(context.Context, *GrantRevokePermissionRequestPB) (*GrantRevokePermissionResponsePB, error)
	GetPermissions(context.Context, *GetPermissionsRequestPB) (*GetPermissionsResponsePB, error)
	CreateUDType(context.Context, *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error)
	DeleteUDType(context.Context, *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error)
	ListUDTypes(context.Context, *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error)
	GetUDTypeInfo(context.Context, *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error)
	// CDC stream RPCs.
	CreateCDCStream(context.Context, *MasterCreateCDCStreamRequestPB) (*MasterCreateCDCStreamResponsePB, error)
	DeleteCDCStream(context.Context, *MasterDeleteCDCStreamRequestPB) (*MasterDeleteCDCStreamResponsePB, error)
	ListCDCStreams(context.Context, *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error)
	GetCDCStream(context.Context, *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error)
	// Redis Config
	RedisConfigSet(context.Context, *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error)
	RedisConfigGet(context.Context, *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error)
	// Administrative/monitoring RPCs
	ListTabletServers(context.Context, *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error)
	ListLiveTabletServers(context.Context, *ListLiveTabletServersRequestPB) (*ListLiveTabletServersResponsePB, error)
	ListMasters(context.Context, *ListMastersRequestPB) (*ListMastersResponsePB, error)
	ListMasterRaftPeers(context.Context, *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error)
	GetMasterRegistration(context.Context, *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error)
	// Get the ready status from the catalog manager for this master.
	// NOTE: Should be used only for unit testing purposes.
	IsMasterLeaderServiceReady(context.Context, *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error)
	// Dump master state from all the peers in the current master's quorum
	DumpState(context.Context, *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error)
	ChangeLoadBalancerState(context.Context, *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error)
	GetLoadBalancerState(context.Context, *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error)
	RemovedMasterUpdate(context.Context, *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error)
	SetPreferredZones(context.Context, *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error)
	GetMasterClusterConfig(context.Context, *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error)
	ChangeMasterClusterConfig(context.Context, *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error)
	GetLoadMoveCompletion(context.Context, *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	GetLeaderBlacklistCompletion(context.Context, *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	IsLoadBalanced(context.Context, *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error)
	IsLoadBalancerIdle(context.Context, *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error)
	AreLeadersOnPreferredOnly(context.Context, *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error)
	FlushTables(context.Context, *FlushTablesRequestPB) (*FlushTablesResponsePB, error)
	IsFlushTablesDone(context.Context, *IsFlushTablesDoneRequestPB) (*IsFlushTablesDoneResponsePB, error)
	IsInitDbDone(context.Context, *IsInitDbDoneRequestPB) (*IsInitDbDoneResponsePB, error)
	ChangeEncryptionInfo(context.Context, *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error)
	IsEncryptionEnabled(context.Context, *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error)
	SetupUniverseReplication(context.Context, *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error)
	DeleteUniverseReplication(context.Context, *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error)
	AlterUniverseReplication(context.Context, *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error)
	SetUniverseReplicationEnabled(context.Context, *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error)
	GetUniverseReplication(context.Context, *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error)
	IsSetupUniverseReplicationDone(context.Context, *IsSetupUniverseReplicationDoneRequestPB) (*IsSetupUniverseReplicationDoneResponsePB, error)
	AddUniverseKeys(context.Context, *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error)
	GetUniverseKeyRegistry(context.Context, *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error)
	HasUniverseKeyInMemory(context.Context, *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error)
	SplitTablet(context.Context, *MasterSplitTabletRequestPB) (*MasterSplitTabletResponsePB, error)
	DeleteTablet(context.Context, *MasterDeleteTabletRequestPB) (*MasterDeleteTabletResponsePB, error)
	DdlLog(context.Context, *DdlLogRequestPB) (*DdlLogResponsePB, error)
}

// UnimplementedMasterServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (UnimplementedMasterServiceServer) TSHeartbeat(context.Context, *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSHeartbeat not implemented")
}
func (UnimplementedMasterServiceServer) GetTabletLocations(context.Context, *GetTabletLocationsRequestPB) (*GetTabletLocationsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTabletLocations not implemented")
}
func (UnimplementedMasterServiceServer) CreateTable(context.Context, *CreateTableRequestPB) (*CreateTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedMasterServiceServer) IsCreateTableDone(context.Context, *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCreateTableDone not implemented")
}
func (UnimplementedMasterServiceServer) AnalyzeTable(context.Context, *AnalyzeTableRequestPB) (*AnalyzeTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnalyzeTable not implemented")
}
func (UnimplementedMasterServiceServer) TruncateTable(context.Context, *TruncateTableRequestPB) (*TruncateTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateTable not implemented")
}
func (UnimplementedMasterServiceServer) IsTruncateTableDone(context.Context, *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTruncateTableDone not implemented")
}
func (UnimplementedMasterServiceServer) BackfillIndex(context.Context, *MasterBackfillIndexRequestPB) (*MasterBackfillIndexResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackfillIndex not implemented")
}
func (UnimplementedMasterServiceServer) LaunchBackfillIndexForTable(context.Context, *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchBackfillIndexForTable not implemented")
}
func (UnimplementedMasterServiceServer) GetBackfillJobs(context.Context, *GetBackfillJobsRequestPB) (*GetBackfillJobsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackfillJobs not implemented")
}
func (UnimplementedMasterServiceServer) DeleteTable(context.Context, *DeleteTableRequestPB) (*DeleteTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedMasterServiceServer) IsDeleteTableDone(context.Context, *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeleteTableDone not implemented")
}
func (UnimplementedMasterServiceServer) AlterTable(context.Context, *AlterTableRequestPB) (*AlterTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedMasterServiceServer) IsAlterTableDone(context.Context, *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlterTableDone not implemented")
}
func (UnimplementedMasterServiceServer) ListTables(context.Context, *ListTablesRequestPB) (*ListTablesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedMasterServiceServer) GetTableLocations(context.Context, *GetTableLocationsRequestPB) (*GetTableLocationsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableLocations not implemented")
}
func (UnimplementedMasterServiceServer) GetTableSchema(context.Context, *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableSchema not implemented")
}
func (UnimplementedMasterServiceServer) GetColocatedTabletSchema(context.Context, *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColocatedTabletSchema not implemented")
}
func (UnimplementedMasterServiceServer) CreateNamespace(context.Context, *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedMasterServiceServer) IsCreateNamespaceDone(context.Context, *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCreateNamespaceDone not implemented")
}
func (UnimplementedMasterServiceServer) DeleteNamespace(context.Context, *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedMasterServiceServer) IsDeleteNamespaceDone(context.Context, *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeleteNamespaceDone not implemented")
}
func (UnimplementedMasterServiceServer) AlterNamespace(context.Context, *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterNamespace not implemented")
}
func (UnimplementedMasterServiceServer) ListNamespaces(context.Context, *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedMasterServiceServer) GetNamespaceInfo(context.Context, *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceInfo not implemented")
}
func (UnimplementedMasterServiceServer) CreateTablegroup(context.Context, *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTablegroup not implemented")
}
func (UnimplementedMasterServiceServer) DeleteTablegroup(context.Context, *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTablegroup not implemented")
}
func (UnimplementedMasterServiceServer) ListTablegroups(context.Context, *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTablegroups not implemented")
}
func (UnimplementedMasterServiceServer) ReservePgsqlOids(context.Context, *ReservePgsqlOidsRequestPB) (*ReservePgsqlOidsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReservePgsqlOids not implemented")
}
func (UnimplementedMasterServiceServer) GetYsqlCatalogConfig(context.Context, *GetYsqlCatalogConfigRequestPB) (*GetYsqlCatalogConfigResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetYsqlCatalogConfig not implemented")
}
func (UnimplementedMasterServiceServer) CreateRole(context.Context, *CreateRoleRequestPB) (*CreateRoleResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRole not implemented")
}
func (UnimplementedMasterServiceServer) AlterRole(context.Context, *AlterRoleRequestPB) (*AlterRoleResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterRole not implemented")
}
func (UnimplementedMasterServiceServer) DeleteRole(context.Context, *DeleteRoleRequestPB) (*DeleteRoleResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRole not implemented")
}
func (UnimplementedMasterServiceServer) GrantRevokeRole(context.Context, *GrantRevokeRoleRequestPB) (*GrantRevokeRoleResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantRevokeRole not implemented")
}
func (UnimplementedMasterServiceServer) GrantRevokePermission(context.Context, *GrantRevokePermissionRequestPB) (*GrantRevokePermissionResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantRevokePermission not implemented")
}
func (UnimplementedMasterServiceServer) GetPermissions(context.Context, *GetPermissionsRequestPB) (*GetPermissionsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPermissions not implemented")
}
func (UnimplementedMasterServiceServer) CreateUDType(context.Context, *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUDType not implemented")
}
func (UnimplementedMasterServiceServer) DeleteUDType(context.Context, *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUDType not implemented")
}
func (UnimplementedMasterServiceServer) ListUDTypes(context.Context, *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUDTypes not implemented")
}
func (UnimplementedMasterServiceServer) GetUDTypeInfo(context.Context, *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUDTypeInfo not implemented")
}
func (UnimplementedMasterServiceServer) CreateCDCStream(context.Context, *MasterCreateCDCStreamRequestPB) (*MasterCreateCDCStreamResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCDCStream not implemented")
}
func (UnimplementedMasterServiceServer) DeleteCDCStream(context.Context, *MasterDeleteCDCStreamRequestPB) (*MasterDeleteCDCStreamResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCDCStream not implemented")
}
func (UnimplementedMasterServiceServer) ListCDCStreams(context.Context, *ListCDCStreamsRequestPB) (*ListCDCStreamsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCDCStreams not implemented")
}
func (UnimplementedMasterServiceServer) GetCDCStream(context.Context, *GetCDCStreamRequestPB) (*GetCDCStreamResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCDCStream not implemented")
}
func (UnimplementedMasterServiceServer) RedisConfigSet(context.Context, *RedisConfigSetRequestPB) (*RedisConfigSetResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisConfigSet not implemented")
}
func (UnimplementedMasterServiceServer) RedisConfigGet(context.Context, *RedisConfigGetRequestPB) (*RedisConfigGetResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedisConfigGet not implemented")
}
func (UnimplementedMasterServiceServer) ListTabletServers(context.Context, *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTabletServers not implemented")
}
func (UnimplementedMasterServiceServer) ListLiveTabletServers(context.Context, *ListLiveTabletServersRequestPB) (*ListLiveTabletServersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiveTabletServers not implemented")
}
func (UnimplementedMasterServiceServer) ListMasters(context.Context, *ListMastersRequestPB) (*ListMastersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMasters not implemented")
}
func (UnimplementedMasterServiceServer) ListMasterRaftPeers(context.Context, *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMasterRaftPeers not implemented")
}
func (UnimplementedMasterServiceServer) GetMasterRegistration(context.Context, *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterRegistration not implemented")
}
func (UnimplementedMasterServiceServer) IsMasterLeaderServiceReady(context.Context, *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMasterLeaderServiceReady not implemented")
}
func (UnimplementedMasterServiceServer) DumpState(context.Context, *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpState not implemented")
}
func (UnimplementedMasterServiceServer) ChangeLoadBalancerState(context.Context, *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLoadBalancerState not implemented")
}
func (UnimplementedMasterServiceServer) GetLoadBalancerState(context.Context, *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancerState not implemented")
}
func (UnimplementedMasterServiceServer) RemovedMasterUpdate(context.Context, *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovedMasterUpdate not implemented")
}
func (UnimplementedMasterServiceServer) SetPreferredZones(context.Context, *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreferredZones not implemented")
}
func (UnimplementedMasterServiceServer) GetMasterClusterConfig(context.Context, *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterClusterConfig not implemented")
}
func (UnimplementedMasterServiceServer) ChangeMasterClusterConfig(context.Context, *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMasterClusterConfig not implemented")
}
func (UnimplementedMasterServiceServer) GetLoadMoveCompletion(context.Context, *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadMoveCompletion not implemented")
}
func (UnimplementedMasterServiceServer) GetLeaderBlacklistCompletion(context.Context, *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderBlacklistCompletion not implemented")
}
func (UnimplementedMasterServiceServer) IsLoadBalanced(context.Context, *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLoadBalanced not implemented")
}
func (UnimplementedMasterServiceServer) IsLoadBalancerIdle(context.Context, *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLoadBalancerIdle not implemented")
}
func (UnimplementedMasterServiceServer) AreLeadersOnPreferredOnly(context.Context, *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreLeadersOnPreferredOnly not implemented")
}
func (UnimplementedMasterServiceServer) FlushTables(context.Context, *FlushTablesRequestPB) (*FlushTablesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushTables not implemented")
}
func (UnimplementedMasterServiceServer) IsFlushTablesDone(context.Context, *IsFlushTablesDoneRequestPB) (*IsFlushTablesDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFlushTablesDone not implemented")
}
func (UnimplementedMasterServiceServer) IsInitDbDone(context.Context, *IsInitDbDoneRequestPB) (*IsInitDbDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInitDbDone not implemented")
}
func (UnimplementedMasterServiceServer) ChangeEncryptionInfo(context.Context, *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEncryptionInfo not implemented")
}
func (UnimplementedMasterServiceServer) IsEncryptionEnabled(context.Context, *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEncryptionEnabled not implemented")
}
func (UnimplementedMasterServiceServer) SetupUniverseReplication(context.Context, *SetupUniverseReplicationRequestPB) (*SetupUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetupUniverseReplication not implemented")
}
func (UnimplementedMasterServiceServer) DeleteUniverseReplication(context.Context, *DeleteUniverseReplicationRequestPB) (*DeleteUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUniverseReplication not implemented")
}
func (UnimplementedMasterServiceServer) AlterUniverseReplication(context.Context, *AlterUniverseReplicationRequestPB) (*AlterUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterUniverseReplication not implemented")
}
func (UnimplementedMasterServiceServer) SetUniverseReplicationEnabled(context.Context, *SetUniverseReplicationEnabledRequestPB) (*SetUniverseReplicationEnabledResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetUniverseReplicationEnabled not implemented")
}
func (UnimplementedMasterServiceServer) GetUniverseReplication(context.Context, *GetUniverseReplicationRequestPB) (*GetUniverseReplicationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniverseReplication not implemented")
}
func (UnimplementedMasterServiceServer) IsSetupUniverseReplicationDone(context.Context, *IsSetupUniverseReplicationDoneRequestPB) (*IsSetupUniverseReplicationDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsSetupUniverseReplicationDone not implemented")
}
func (UnimplementedMasterServiceServer) AddUniverseKeys(context.Context, *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUniverseKeys not implemented")
}
func (UnimplementedMasterServiceServer) GetUniverseKeyRegistry(context.Context, *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniverseKeyRegistry not implemented")
}
func (UnimplementedMasterServiceServer) HasUniverseKeyInMemory(context.Context, *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUniverseKeyInMemory not implemented")
}
func (UnimplementedMasterServiceServer) SplitTablet(context.Context, *MasterSplitTabletRequestPB) (*MasterSplitTabletResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTablet not implemented")
}
func (UnimplementedMasterServiceServer) DeleteTablet(context.Context, *MasterDeleteTabletRequestPB) (*MasterDeleteTabletResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTablet not implemented")
}
func (UnimplementedMasterServiceServer) DdlLog(context.Context, *DdlLogRequestPB) (*DdlLogResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DdlLog not implemented")
}

// UnsafeMasterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterServiceServer will
// result in compilation errors.
type UnsafeMasterServiceServer interface {
	mustEmbedUnimplementedMasterServiceServer()
}

func RegisterMasterServiceServer(s grpc.ServiceRegistrar, srv MasterServiceServer) {
	s.RegisterService(&MasterService_ServiceDesc, srv)
}

func _MasterService_TSHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSHeartbeatRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).TSHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/TSHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).TSHeartbeat(ctx, req.(*TSHeartbeatRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetTabletLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTabletLocationsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetTabletLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetTabletLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetTabletLocations(ctx, req.(*GetTabletLocationsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateTable(ctx, req.(*CreateTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsCreateTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCreateTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsCreateTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsCreateTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsCreateTableDone(ctx, req.(*IsCreateTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AnalyzeTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AnalyzeTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AnalyzeTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/AnalyzeTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AnalyzeTable(ctx, req.(*AnalyzeTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_TruncateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).TruncateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/TruncateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).TruncateTable(ctx, req.(*TruncateTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsTruncateTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTruncateTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsTruncateTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsTruncateTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsTruncateTableDone(ctx, req.(*IsTruncateTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_BackfillIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterBackfillIndexRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).BackfillIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/BackfillIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).BackfillIndex(ctx, req.(*MasterBackfillIndexRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_LaunchBackfillIndexForTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchBackfillIndexForTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).LaunchBackfillIndexForTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/LaunchBackfillIndexForTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).LaunchBackfillIndexForTable(ctx, req.(*LaunchBackfillIndexForTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetBackfillJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackfillJobsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetBackfillJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetBackfillJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetBackfillJobs(ctx, req.(*GetBackfillJobsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteTable(ctx, req.(*DeleteTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsDeleteTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeleteTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsDeleteTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsDeleteTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsDeleteTableDone(ctx, req.(*IsDeleteTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AlterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/AlterTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AlterTable(ctx, req.(*AlterTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsAlterTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAlterTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsAlterTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsAlterTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsAlterTableDone(ctx, req.(*IsAlterTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListTables(ctx, req.(*ListTablesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetTableLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableLocationsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetTableLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetTableLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetTableLocations(ctx, req.(*GetTableLocationsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetTableSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableSchemaRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetTableSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetTableSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetTableSchema(ctx, req.(*GetTableSchemaRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetColocatedTabletSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColocatedTabletSchemaRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetColocatedTabletSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetColocatedTabletSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetColocatedTabletSchema(ctx, req.(*GetColocatedTabletSchemaRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateNamespace(ctx, req.(*CreateNamespaceRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsCreateNamespaceDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCreateNamespaceDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsCreateNamespaceDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsCreateNamespaceDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsCreateNamespaceDone(ctx, req.(*IsCreateNamespaceDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsDeleteNamespaceDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeleteNamespaceDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsDeleteNamespaceDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsDeleteNamespaceDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsDeleteNamespaceDone(ctx, req.(*IsDeleteNamespaceDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AlterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterNamespaceRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AlterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/AlterNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AlterNamespace(ctx, req.(*AlterNamespaceRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListNamespaces(ctx, req.(*ListNamespacesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetNamespaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetNamespaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetNamespaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetNamespaceInfo(ctx, req.(*GetNamespaceInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateTablegroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTablegroupRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateTablegroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/CreateTablegroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateTablegroup(ctx, req.(*CreateTablegroupRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteTablegroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTablegroupRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteTablegroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteTablegroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteTablegroup(ctx, req.(*DeleteTablegroupRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListTablegroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablegroupsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListTablegroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListTablegroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListTablegroups(ctx, req.(*ListTablegroupsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ReservePgsqlOids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReservePgsqlOidsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ReservePgsqlOids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ReservePgsqlOids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ReservePgsqlOids(ctx, req.(*ReservePgsqlOidsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetYsqlCatalogConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetYsqlCatalogConfigRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetYsqlCatalogConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetYsqlCatalogConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetYsqlCatalogConfig(ctx, req.(*GetYsqlCatalogConfigRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoleRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/CreateRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateRole(ctx, req.(*CreateRoleRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AlterRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterRoleRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AlterRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/AlterRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AlterRole(ctx, req.(*AlterRoleRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoleRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteRole(ctx, req.(*DeleteRoleRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GrantRevokeRole_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRevokeRoleRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GrantRevokeRole(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GrantRevokeRole",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GrantRevokeRole(ctx, req.(*GrantRevokeRoleRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GrantRevokePermission_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantRevokePermissionRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GrantRevokePermission(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GrantRevokePermission",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GrantRevokePermission(ctx, req.(*GrantRevokePermissionRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetPermissions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPermissionsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetPermissions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetPermissions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetPermissions(ctx, req.(*GetPermissionsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateUDType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUDTypeRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateUDType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/CreateUDType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateUDType(ctx, req.(*CreateUDTypeRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteUDType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUDTypeRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteUDType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteUDType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteUDType(ctx, req.(*DeleteUDTypeRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListUDTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUDTypesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListUDTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListUDTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListUDTypes(ctx, req.(*ListUDTypesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetUDTypeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUDTypeInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetUDTypeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetUDTypeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetUDTypeInfo(ctx, req.(*GetUDTypeInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CreateCDCStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterCreateCDCStreamRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateCDCStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/CreateCDCStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateCDCStream(ctx, req.(*MasterCreateCDCStreamRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteCDCStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterDeleteCDCStreamRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteCDCStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteCDCStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteCDCStream(ctx, req.(*MasterDeleteCDCStreamRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListCDCStreams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCDCStreamsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListCDCStreams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListCDCStreams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListCDCStreams(ctx, req.(*ListCDCStreamsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetCDCStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCDCStreamRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetCDCStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetCDCStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetCDCStream(ctx, req.(*GetCDCStreamRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RedisConfigSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisConfigSetRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RedisConfigSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/RedisConfigSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RedisConfigSet(ctx, req.(*RedisConfigSetRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RedisConfigGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedisConfigGetRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RedisConfigGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/RedisConfigGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RedisConfigGet(ctx, req.(*RedisConfigGetRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListTabletServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTabletServersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListTabletServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListTabletServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListTabletServers(ctx, req.(*ListTabletServersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListLiveTabletServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiveTabletServersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListLiveTabletServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListLiveTabletServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListLiveTabletServers(ctx, req.(*ListLiveTabletServersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListMasters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMastersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListMasters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListMasters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListMasters(ctx, req.(*ListMastersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListMasterRaftPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMasterRaftPeersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListMasterRaftPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ListMasterRaftPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListMasterRaftPeers(ctx, req.(*ListMasterRaftPeersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetMasterRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterRegistrationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetMasterRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetMasterRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetMasterRegistration(ctx, req.(*GetMasterRegistrationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsMasterLeaderServiceReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMasterLeaderReadyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsMasterLeaderServiceReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsMasterLeaderServiceReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsMasterLeaderServiceReady(ctx, req.(*IsMasterLeaderReadyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DumpState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpMasterStateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DumpState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DumpState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DumpState(ctx, req.(*DumpMasterStateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ChangeLoadBalancerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLoadBalancerStateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ChangeLoadBalancerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ChangeLoadBalancerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ChangeLoadBalancerState(ctx, req.(*ChangeLoadBalancerStateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetLoadBalancerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadBalancerStateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetLoadBalancerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetLoadBalancerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetLoadBalancerState(ctx, req.(*GetLoadBalancerStateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RemovedMasterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovedMasterUpdateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RemovedMasterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/RemovedMasterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RemovedMasterUpdate(ctx, req.(*RemovedMasterUpdateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetPreferredZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPreferredZonesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetPreferredZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/SetPreferredZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetPreferredZones(ctx, req.(*SetPreferredZonesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetMasterClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterClusterConfigRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetMasterClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetMasterClusterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetMasterClusterConfig(ctx, req.(*GetMasterClusterConfigRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ChangeMasterClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMasterClusterConfigRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ChangeMasterClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ChangeMasterClusterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ChangeMasterClusterConfig(ctx, req.(*ChangeMasterClusterConfigRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetLoadMoveCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadMovePercentRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetLoadMoveCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetLoadMoveCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetLoadMoveCompletion(ctx, req.(*GetLoadMovePercentRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetLeaderBlacklistCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderBlacklistPercentRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetLeaderBlacklistCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetLeaderBlacklistCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetLeaderBlacklistCompletion(ctx, req.(*GetLeaderBlacklistPercentRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsLoadBalanced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLoadBalancedRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsLoadBalanced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsLoadBalanced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsLoadBalanced(ctx, req.(*IsLoadBalancedRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsLoadBalancerIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLoadBalancerIdleRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsLoadBalancerIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsLoadBalancerIdle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsLoadBalancerIdle(ctx, req.(*IsLoadBalancerIdleRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AreLeadersOnPreferredOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreLeadersOnPreferredOnlyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AreLeadersOnPreferredOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/AreLeadersOnPreferredOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AreLeadersOnPreferredOnly(ctx, req.(*AreLeadersOnPreferredOnlyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_FlushTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushTablesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).FlushTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/FlushTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).FlushTables(ctx, req.(*FlushTablesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsFlushTablesDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsFlushTablesDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsFlushTablesDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsFlushTablesDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsFlushTablesDone(ctx, req.(*IsFlushTablesDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsInitDbDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInitDbDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsInitDbDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsInitDbDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsInitDbDone(ctx, req.(*IsInitDbDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ChangeEncryptionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEncryptionInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ChangeEncryptionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/ChangeEncryptionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ChangeEncryptionInfo(ctx, req.(*ChangeEncryptionInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsEncryptionEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEncryptionEnabledRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsEncryptionEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsEncryptionEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsEncryptionEnabled(ctx, req.(*IsEncryptionEnabledRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetupUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetupUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetupUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/SetupUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetupUniverseReplication(ctx, req.(*SetupUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteUniverseReplication(ctx, req.(*DeleteUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AlterUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AlterUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/AlterUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AlterUniverseReplication(ctx, req.(*AlterUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SetUniverseReplicationEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetUniverseReplicationEnabledRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SetUniverseReplicationEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/SetUniverseReplicationEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SetUniverseReplicationEnabled(ctx, req.(*SetUniverseReplicationEnabledRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetUniverseReplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniverseReplicationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetUniverseReplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetUniverseReplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetUniverseReplication(ctx, req.(*GetUniverseReplicationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_IsSetupUniverseReplicationDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsSetupUniverseReplicationDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).IsSetupUniverseReplicationDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/IsSetupUniverseReplicationDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).IsSetupUniverseReplicationDone(ctx, req.(*IsSetupUniverseReplicationDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_AddUniverseKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUniverseKeysRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).AddUniverseKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/AddUniverseKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).AddUniverseKeys(ctx, req.(*AddUniverseKeysRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_GetUniverseKeyRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniverseKeyRegistryRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).GetUniverseKeyRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/GetUniverseKeyRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).GetUniverseKeyRegistry(ctx, req.(*GetUniverseKeyRegistryRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_HasUniverseKeyInMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUniverseKeyInMemoryRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).HasUniverseKeyInMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/HasUniverseKeyInMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).HasUniverseKeyInMemory(ctx, req.(*HasUniverseKeyInMemoryRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_SplitTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterSplitTabletRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).SplitTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/SplitTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).SplitTablet(ctx, req.(*MasterSplitTabletRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DeleteTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MasterDeleteTabletRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DeleteTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DeleteTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DeleteTablet(ctx, req.(*MasterDeleteTabletRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_DdlLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DdlLogRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).DdlLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterService/DdlLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).DdlLog(ctx, req.(*DdlLogRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterService_ServiceDesc is the grpc.ServiceDesc for MasterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.master.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TSHeartbeat",
			Handler:    _MasterService_TSHeartbeat_Handler,
		},
		{
			MethodName: "GetTabletLocations",
			Handler:    _MasterService_GetTabletLocations_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _MasterService_CreateTable_Handler,
		},
		{
			MethodName: "IsCreateTableDone",
			Handler:    _MasterService_IsCreateTableDone_Handler,
		},
		{
			MethodName: "AnalyzeTable",
			Handler:    _MasterService_AnalyzeTable_Handler,
		},
		{
			MethodName: "TruncateTable",
			Handler:    _MasterService_TruncateTable_Handler,
		},
		{
			MethodName: "IsTruncateTableDone",
			Handler:    _MasterService_IsTruncateTableDone_Handler,
		},
		{
			MethodName: "BackfillIndex",
			Handler:    _MasterService_BackfillIndex_Handler,
		},
		{
			MethodName: "LaunchBackfillIndexForTable",
			Handler:    _MasterService_LaunchBackfillIndexForTable_Handler,
		},
		{
			MethodName: "GetBackfillJobs",
			Handler:    _MasterService_GetBackfillJobs_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _MasterService_DeleteTable_Handler,
		},
		{
			MethodName: "IsDeleteTableDone",
			Handler:    _MasterService_IsDeleteTableDone_Handler,
		},
		{
			MethodName: "AlterTable",
			Handler:    _MasterService_AlterTable_Handler,
		},
		{
			MethodName: "IsAlterTableDone",
			Handler:    _MasterService_IsAlterTableDone_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _MasterService_ListTables_Handler,
		},
		{
			MethodName: "GetTableLocations",
			Handler:    _MasterService_GetTableLocations_Handler,
		},
		{
			MethodName: "GetTableSchema",
			Handler:    _MasterService_GetTableSchema_Handler,
		},
		{
			MethodName: "GetColocatedTabletSchema",
			Handler:    _MasterService_GetColocatedTabletSchema_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _MasterService_CreateNamespace_Handler,
		},
		{
			MethodName: "IsCreateNamespaceDone",
			Handler:    _MasterService_IsCreateNamespaceDone_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _MasterService_DeleteNamespace_Handler,
		},
		{
			MethodName: "IsDeleteNamespaceDone",
			Handler:    _MasterService_IsDeleteNamespaceDone_Handler,
		},
		{
			MethodName: "AlterNamespace",
			Handler:    _MasterService_AlterNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _MasterService_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespaceInfo",
			Handler:    _MasterService_GetNamespaceInfo_Handler,
		},
		{
			MethodName: "CreateTablegroup",
			Handler:    _MasterService_CreateTablegroup_Handler,
		},
		{
			MethodName: "DeleteTablegroup",
			Handler:    _MasterService_DeleteTablegroup_Handler,
		},
		{
			MethodName: "ListTablegroups",
			Handler:    _MasterService_ListTablegroups_Handler,
		},
		{
			MethodName: "ReservePgsqlOids",
			Handler:    _MasterService_ReservePgsqlOids_Handler,
		},
		{
			MethodName: "GetYsqlCatalogConfig",
			Handler:    _MasterService_GetYsqlCatalogConfig_Handler,
		},
		{
			MethodName: "CreateRole",
			Handler:    _MasterService_CreateRole_Handler,
		},
		{
			MethodName: "AlterRole",
			Handler:    _MasterService_AlterRole_Handler,
		},
		{
			MethodName: "DeleteRole",
			Handler:    _MasterService_DeleteRole_Handler,
		},
		{
			MethodName: "GrantRevokeRole",
			Handler:    _MasterService_GrantRevokeRole_Handler,
		},
		{
			MethodName: "GrantRevokePermission",
			Handler:    _MasterService_GrantRevokePermission_Handler,
		},
		{
			MethodName: "GetPermissions",
			Handler:    _MasterService_GetPermissions_Handler,
		},
		{
			MethodName: "CreateUDType",
			Handler:    _MasterService_CreateUDType_Handler,
		},
		{
			MethodName: "DeleteUDType",
			Handler:    _MasterService_DeleteUDType_Handler,
		},
		{
			MethodName: "ListUDTypes",
			Handler:    _MasterService_ListUDTypes_Handler,
		},
		{
			MethodName: "GetUDTypeInfo",
			Handler:    _MasterService_GetUDTypeInfo_Handler,
		},
		{
			MethodName: "CreateCDCStream",
			Handler:    _MasterService_CreateCDCStream_Handler,
		},
		{
			MethodName: "DeleteCDCStream",
			Handler:    _MasterService_DeleteCDCStream_Handler,
		},
		{
			MethodName: "ListCDCStreams",
			Handler:    _MasterService_ListCDCStreams_Handler,
		},
		{
			MethodName: "GetCDCStream",
			Handler:    _MasterService_GetCDCStream_Handler,
		},
		{
			MethodName: "RedisConfigSet",
			Handler:    _MasterService_RedisConfigSet_Handler,
		},
		{
			MethodName: "RedisConfigGet",
			Handler:    _MasterService_RedisConfigGet_Handler,
		},
		{
			MethodName: "ListTabletServers",
			Handler:    _MasterService_ListTabletServers_Handler,
		},
		{
			MethodName: "ListLiveTabletServers",
			Handler:    _MasterService_ListLiveTabletServers_Handler,
		},
		{
			MethodName: "ListMasters",
			Handler:    _MasterService_ListMasters_Handler,
		},
		{
			MethodName: "ListMasterRaftPeers",
			Handler:    _MasterService_ListMasterRaftPeers_Handler,
		},
		{
			MethodName: "GetMasterRegistration",
			Handler:    _MasterService_GetMasterRegistration_Handler,
		},
		{
			MethodName: "IsMasterLeaderServiceReady",
			Handler:    _MasterService_IsMasterLeaderServiceReady_Handler,
		},
		{
			MethodName: "DumpState",
			Handler:    _MasterService_DumpState_Handler,
		},
		{
			MethodName: "ChangeLoadBalancerState",
			Handler:    _MasterService_ChangeLoadBalancerState_Handler,
		},
		{
			MethodName: "GetLoadBalancerState",
			Handler:    _MasterService_GetLoadBalancerState_Handler,
		},
		{
			MethodName: "RemovedMasterUpdate",
			Handler:    _MasterService_RemovedMasterUpdate_Handler,
		},
		{
			MethodName: "SetPreferredZones",
			Handler:    _MasterService_SetPreferredZones_Handler,
		},
		{
			MethodName: "GetMasterClusterConfig",
			Handler:    _MasterService_GetMasterClusterConfig_Handler,
		},
		{
			MethodName: "ChangeMasterClusterConfig",
			Handler:    _MasterService_ChangeMasterClusterConfig_Handler,
		},
		{
			MethodName: "GetLoadMoveCompletion",
			Handler:    _MasterService_GetLoadMoveCompletion_Handler,
		},
		{
			MethodName: "GetLeaderBlacklistCompletion",
			Handler:    _MasterService_GetLeaderBlacklistCompletion_Handler,
		},
		{
			MethodName: "IsLoadBalanced",
			Handler:    _MasterService_IsLoadBalanced_Handler,
		},
		{
			MethodName: "IsLoadBalancerIdle",
			Handler:    _MasterService_IsLoadBalancerIdle_Handler,
		},
		{
			MethodName: "AreLeadersOnPreferredOnly",
			Handler:    _MasterService_AreLeadersOnPreferredOnly_Handler,
		},
		{
			MethodName: "FlushTables",
			Handler:    _MasterService_FlushTables_Handler,
		},
		{
			MethodName: "IsFlushTablesDone",
			Handler:    _MasterService_IsFlushTablesDone_Handler,
		},
		{
			MethodName: "IsInitDbDone",
			Handler:    _MasterService_IsInitDbDone_Handler,
		},
		{
			MethodName: "ChangeEncryptionInfo",
			Handler:    _MasterService_ChangeEncryptionInfo_Handler,
		},
		{
			MethodName: "IsEncryptionEnabled",
			Handler:    _MasterService_IsEncryptionEnabled_Handler,
		},
		{
			MethodName: "SetupUniverseReplication",
			Handler:    _MasterService_SetupUniverseReplication_Handler,
		},
		{
			MethodName: "DeleteUniverseReplication",
			Handler:    _MasterService_DeleteUniverseReplication_Handler,
		},
		{
			MethodName: "AlterUniverseReplication",
			Handler:    _MasterService_AlterUniverseReplication_Handler,
		},
		{
			MethodName: "SetUniverseReplicationEnabled",
			Handler:    _MasterService_SetUniverseReplicationEnabled_Handler,
		},
		{
			MethodName: "GetUniverseReplication",
			Handler:    _MasterService_GetUniverseReplication_Handler,
		},
		{
			MethodName: "IsSetupUniverseReplicationDone",
			Handler:    _MasterService_IsSetupUniverseReplicationDone_Handler,
		},
		{
			MethodName: "AddUniverseKeys",
			Handler:    _MasterService_AddUniverseKeys_Handler,
		},
		{
			MethodName: "GetUniverseKeyRegistry",
			Handler:    _MasterService_GetUniverseKeyRegistry_Handler,
		},
		{
			MethodName: "HasUniverseKeyInMemory",
			Handler:    _MasterService_HasUniverseKeyInMemory_Handler,
		},
		{
			MethodName: "SplitTablet",
			Handler:    _MasterService_SplitTablet_Handler,
		},
		{
			MethodName: "DeleteTablet",
			Handler:    _MasterService_DeleteTablet_Handler,
		},
		{
			MethodName: "DdlLog",
			Handler:    _MasterService_DdlLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/master/master.proto",
}
