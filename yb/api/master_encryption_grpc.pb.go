// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/master/master_encryption.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterEncryptionClient is the client API for MasterEncryption service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterEncryptionClient interface {
	ChangeEncryptionInfo(ctx context.Context, in *ChangeEncryptionInfoRequestPB, opts ...grpc.CallOption) (*ChangeEncryptionInfoResponsePB, error)
	IsEncryptionEnabled(ctx context.Context, in *IsEncryptionEnabledRequestPB, opts ...grpc.CallOption) (*IsEncryptionEnabledResponsePB, error)
	AddUniverseKeys(ctx context.Context, in *AddUniverseKeysRequestPB, opts ...grpc.CallOption) (*AddUniverseKeysResponsePB, error)
	GetUniverseKeyRegistry(ctx context.Context, in *GetUniverseKeyRegistryRequestPB, opts ...grpc.CallOption) (*GetUniverseKeyRegistryResponsePB, error)
	HasUniverseKeyInMemory(ctx context.Context, in *HasUniverseKeyInMemoryRequestPB, opts ...grpc.CallOption) (*HasUniverseKeyInMemoryResponsePB, error)
}

type masterEncryptionClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterEncryptionClient(cc grpc.ClientConnInterface) MasterEncryptionClient {
	return &masterEncryptionClient{cc}
}

func (c *masterEncryptionClient) ChangeEncryptionInfo(ctx context.Context, in *ChangeEncryptionInfoRequestPB, opts ...grpc.CallOption) (*ChangeEncryptionInfoResponsePB, error) {
	out := new(ChangeEncryptionInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterEncryption/ChangeEncryptionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterEncryptionClient) IsEncryptionEnabled(ctx context.Context, in *IsEncryptionEnabledRequestPB, opts ...grpc.CallOption) (*IsEncryptionEnabledResponsePB, error) {
	out := new(IsEncryptionEnabledResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterEncryption/IsEncryptionEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterEncryptionClient) AddUniverseKeys(ctx context.Context, in *AddUniverseKeysRequestPB, opts ...grpc.CallOption) (*AddUniverseKeysResponsePB, error) {
	out := new(AddUniverseKeysResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterEncryption/AddUniverseKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterEncryptionClient) GetUniverseKeyRegistry(ctx context.Context, in *GetUniverseKeyRegistryRequestPB, opts ...grpc.CallOption) (*GetUniverseKeyRegistryResponsePB, error) {
	out := new(GetUniverseKeyRegistryResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterEncryption/GetUniverseKeyRegistry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterEncryptionClient) HasUniverseKeyInMemory(ctx context.Context, in *HasUniverseKeyInMemoryRequestPB, opts ...grpc.CallOption) (*HasUniverseKeyInMemoryResponsePB, error) {
	out := new(HasUniverseKeyInMemoryResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterEncryption/HasUniverseKeyInMemory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterEncryptionServer is the server API for MasterEncryption service.
// All implementations should embed UnimplementedMasterEncryptionServer
// for forward compatibility
type MasterEncryptionServer interface {
	ChangeEncryptionInfo(context.Context, *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error)
	IsEncryptionEnabled(context.Context, *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error)
	AddUniverseKeys(context.Context, *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error)
	GetUniverseKeyRegistry(context.Context, *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error)
	HasUniverseKeyInMemory(context.Context, *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error)
}

// UnimplementedMasterEncryptionServer should be embedded to have forward compatible implementations.
type UnimplementedMasterEncryptionServer struct {
}

func (UnimplementedMasterEncryptionServer) ChangeEncryptionInfo(context.Context, *ChangeEncryptionInfoRequestPB) (*ChangeEncryptionInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeEncryptionInfo not implemented")
}
func (UnimplementedMasterEncryptionServer) IsEncryptionEnabled(context.Context, *IsEncryptionEnabledRequestPB) (*IsEncryptionEnabledResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsEncryptionEnabled not implemented")
}
func (UnimplementedMasterEncryptionServer) AddUniverseKeys(context.Context, *AddUniverseKeysRequestPB) (*AddUniverseKeysResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUniverseKeys not implemented")
}
func (UnimplementedMasterEncryptionServer) GetUniverseKeyRegistry(context.Context, *GetUniverseKeyRegistryRequestPB) (*GetUniverseKeyRegistryResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniverseKeyRegistry not implemented")
}
func (UnimplementedMasterEncryptionServer) HasUniverseKeyInMemory(context.Context, *HasUniverseKeyInMemoryRequestPB) (*HasUniverseKeyInMemoryResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasUniverseKeyInMemory not implemented")
}

// UnsafeMasterEncryptionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterEncryptionServer will
// result in compilation errors.
type UnsafeMasterEncryptionServer interface {
	mustEmbedUnimplementedMasterEncryptionServer()
}

func RegisterMasterEncryptionServer(s grpc.ServiceRegistrar, srv MasterEncryptionServer) {
	s.RegisterService(&MasterEncryption_ServiceDesc, srv)
}

func _MasterEncryption_ChangeEncryptionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeEncryptionInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterEncryptionServer).ChangeEncryptionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterEncryption/ChangeEncryptionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterEncryptionServer).ChangeEncryptionInfo(ctx, req.(*ChangeEncryptionInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterEncryption_IsEncryptionEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsEncryptionEnabledRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterEncryptionServer).IsEncryptionEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterEncryption/IsEncryptionEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterEncryptionServer).IsEncryptionEnabled(ctx, req.(*IsEncryptionEnabledRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterEncryption_AddUniverseKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUniverseKeysRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterEncryptionServer).AddUniverseKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterEncryption/AddUniverseKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterEncryptionServer).AddUniverseKeys(ctx, req.(*AddUniverseKeysRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterEncryption_GetUniverseKeyRegistry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniverseKeyRegistryRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterEncryptionServer).GetUniverseKeyRegistry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterEncryption/GetUniverseKeyRegistry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterEncryptionServer).GetUniverseKeyRegistry(ctx, req.(*GetUniverseKeyRegistryRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterEncryption_HasUniverseKeyInMemory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HasUniverseKeyInMemoryRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterEncryptionServer).HasUniverseKeyInMemory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterEncryption/HasUniverseKeyInMemory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterEncryptionServer).HasUniverseKeyInMemory(ctx, req.(*HasUniverseKeyInMemoryRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterEncryption_ServiceDesc is the grpc.ServiceDesc for MasterEncryption service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterEncryption_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.master.MasterEncryption",
	HandlerType: (*MasterEncryptionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ChangeEncryptionInfo",
			Handler:    _MasterEncryption_ChangeEncryptionInfo_Handler,
		},
		{
			MethodName: "IsEncryptionEnabled",
			Handler:    _MasterEncryption_IsEncryptionEnabled_Handler,
		},
		{
			MethodName: "AddUniverseKeys",
			Handler:    _MasterEncryption_AddUniverseKeys_Handler,
		},
		{
			MethodName: "GetUniverseKeyRegistry",
			Handler:    _MasterEncryption_GetUniverseKeyRegistry_Handler,
		},
		{
			MethodName: "HasUniverseKeyInMemory",
			Handler:    _MasterEncryption_HasUniverseKeyInMemory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/master/master_encryption.proto",
}
