// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/master/master_cluster.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterClusterClient is the client API for MasterCluster service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterClusterClient interface {
	// Administrative/monitoring RPCs
	ListTabletServers(ctx context.Context, in *ListTabletServersRequestPB, opts ...grpc.CallOption) (*ListTabletServersResponsePB, error)
	ListLiveTabletServers(ctx context.Context, in *ListLiveTabletServersRequestPB, opts ...grpc.CallOption) (*ListLiveTabletServersResponsePB, error)
	ListMasters(ctx context.Context, in *ListMastersRequestPB, opts ...grpc.CallOption) (*ListMastersResponsePB, error)
	ListMasterRaftPeers(ctx context.Context, in *ListMasterRaftPeersRequestPB, opts ...grpc.CallOption) (*ListMasterRaftPeersResponsePB, error)
	GetMasterRegistration(ctx context.Context, in *GetMasterRegistrationRequestPB, opts ...grpc.CallOption) (*GetMasterRegistrationResponsePB, error)
	// Get the ready status from the catalog manager for this master.
	// NOTE: Should be used only for unit testing purposes.
	IsMasterLeaderServiceReady(ctx context.Context, in *IsMasterLeaderReadyRequestPB, opts ...grpc.CallOption) (*IsMasterLeaderReadyResponsePB, error)
	// Dump master state from all the peers in the current master's quorum
	DumpState(ctx context.Context, in *DumpMasterStateRequestPB, opts ...grpc.CallOption) (*DumpMasterStateResponsePB, error)
	ChangeLoadBalancerState(ctx context.Context, in *ChangeLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*ChangeLoadBalancerStateResponsePB, error)
	GetLoadBalancerState(ctx context.Context, in *GetLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*GetLoadBalancerStateResponsePB, error)
	RemovedMasterUpdate(ctx context.Context, in *RemovedMasterUpdateRequestPB, opts ...grpc.CallOption) (*RemovedMasterUpdateResponsePB, error)
	SetPreferredZones(ctx context.Context, in *SetPreferredZonesRequestPB, opts ...grpc.CallOption) (*SetPreferredZonesResponsePB, error)
	GetMasterClusterConfig(ctx context.Context, in *GetMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*GetMasterClusterConfigResponsePB, error)
	ChangeMasterClusterConfig(ctx context.Context, in *ChangeMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*ChangeMasterClusterConfigResponsePB, error)
	GetLoadMoveCompletion(ctx context.Context, in *GetLoadMovePercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error)
	GetLeaderBlacklistCompletion(ctx context.Context, in *GetLeaderBlacklistPercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error)
	IsLoadBalanced(ctx context.Context, in *IsLoadBalancedRequestPB, opts ...grpc.CallOption) (*IsLoadBalancedResponsePB, error)
	IsLoadBalancerIdle(ctx context.Context, in *IsLoadBalancerIdleRequestPB, opts ...grpc.CallOption) (*IsLoadBalancerIdleResponsePB, error)
	AreLeadersOnPreferredOnly(ctx context.Context, in *AreLeadersOnPreferredOnlyRequestPB, opts ...grpc.CallOption) (*AreLeadersOnPreferredOnlyResponsePB, error)
}

type masterClusterClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterClusterClient(cc grpc.ClientConnInterface) MasterClusterClient {
	return &masterClusterClient{cc}
}

func (c *masterClusterClient) ListTabletServers(ctx context.Context, in *ListTabletServersRequestPB, opts ...grpc.CallOption) (*ListTabletServersResponsePB, error) {
	out := new(ListTabletServersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/ListTabletServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) ListLiveTabletServers(ctx context.Context, in *ListLiveTabletServersRequestPB, opts ...grpc.CallOption) (*ListLiveTabletServersResponsePB, error) {
	out := new(ListLiveTabletServersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/ListLiveTabletServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) ListMasters(ctx context.Context, in *ListMastersRequestPB, opts ...grpc.CallOption) (*ListMastersResponsePB, error) {
	out := new(ListMastersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/ListMasters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) ListMasterRaftPeers(ctx context.Context, in *ListMasterRaftPeersRequestPB, opts ...grpc.CallOption) (*ListMasterRaftPeersResponsePB, error) {
	out := new(ListMasterRaftPeersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/ListMasterRaftPeers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) GetMasterRegistration(ctx context.Context, in *GetMasterRegistrationRequestPB, opts ...grpc.CallOption) (*GetMasterRegistrationResponsePB, error) {
	out := new(GetMasterRegistrationResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/GetMasterRegistration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) IsMasterLeaderServiceReady(ctx context.Context, in *IsMasterLeaderReadyRequestPB, opts ...grpc.CallOption) (*IsMasterLeaderReadyResponsePB, error) {
	out := new(IsMasterLeaderReadyResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/IsMasterLeaderServiceReady", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) DumpState(ctx context.Context, in *DumpMasterStateRequestPB, opts ...grpc.CallOption) (*DumpMasterStateResponsePB, error) {
	out := new(DumpMasterStateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/DumpState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) ChangeLoadBalancerState(ctx context.Context, in *ChangeLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*ChangeLoadBalancerStateResponsePB, error) {
	out := new(ChangeLoadBalancerStateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/ChangeLoadBalancerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) GetLoadBalancerState(ctx context.Context, in *GetLoadBalancerStateRequestPB, opts ...grpc.CallOption) (*GetLoadBalancerStateResponsePB, error) {
	out := new(GetLoadBalancerStateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/GetLoadBalancerState", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) RemovedMasterUpdate(ctx context.Context, in *RemovedMasterUpdateRequestPB, opts ...grpc.CallOption) (*RemovedMasterUpdateResponsePB, error) {
	out := new(RemovedMasterUpdateResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/RemovedMasterUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) SetPreferredZones(ctx context.Context, in *SetPreferredZonesRequestPB, opts ...grpc.CallOption) (*SetPreferredZonesResponsePB, error) {
	out := new(SetPreferredZonesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/SetPreferredZones", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) GetMasterClusterConfig(ctx context.Context, in *GetMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*GetMasterClusterConfigResponsePB, error) {
	out := new(GetMasterClusterConfigResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/GetMasterClusterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) ChangeMasterClusterConfig(ctx context.Context, in *ChangeMasterClusterConfigRequestPB, opts ...grpc.CallOption) (*ChangeMasterClusterConfigResponsePB, error) {
	out := new(ChangeMasterClusterConfigResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/ChangeMasterClusterConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) GetLoadMoveCompletion(ctx context.Context, in *GetLoadMovePercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error) {
	out := new(GetLoadMovePercentResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/GetLoadMoveCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) GetLeaderBlacklistCompletion(ctx context.Context, in *GetLeaderBlacklistPercentRequestPB, opts ...grpc.CallOption) (*GetLoadMovePercentResponsePB, error) {
	out := new(GetLoadMovePercentResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/GetLeaderBlacklistCompletion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) IsLoadBalanced(ctx context.Context, in *IsLoadBalancedRequestPB, opts ...grpc.CallOption) (*IsLoadBalancedResponsePB, error) {
	out := new(IsLoadBalancedResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/IsLoadBalanced", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) IsLoadBalancerIdle(ctx context.Context, in *IsLoadBalancerIdleRequestPB, opts ...grpc.CallOption) (*IsLoadBalancerIdleResponsePB, error) {
	out := new(IsLoadBalancerIdleResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/IsLoadBalancerIdle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterClusterClient) AreLeadersOnPreferredOnly(ctx context.Context, in *AreLeadersOnPreferredOnlyRequestPB, opts ...grpc.CallOption) (*AreLeadersOnPreferredOnlyResponsePB, error) {
	out := new(AreLeadersOnPreferredOnlyResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterCluster/AreLeadersOnPreferredOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterClusterServer is the server API for MasterCluster service.
// All implementations should embed UnimplementedMasterClusterServer
// for forward compatibility
type MasterClusterServer interface {
	// Administrative/monitoring RPCs
	ListTabletServers(context.Context, *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error)
	ListLiveTabletServers(context.Context, *ListLiveTabletServersRequestPB) (*ListLiveTabletServersResponsePB, error)
	ListMasters(context.Context, *ListMastersRequestPB) (*ListMastersResponsePB, error)
	ListMasterRaftPeers(context.Context, *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error)
	GetMasterRegistration(context.Context, *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error)
	// Get the ready status from the catalog manager for this master.
	// NOTE: Should be used only for unit testing purposes.
	IsMasterLeaderServiceReady(context.Context, *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error)
	// Dump master state from all the peers in the current master's quorum
	DumpState(context.Context, *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error)
	ChangeLoadBalancerState(context.Context, *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error)
	GetLoadBalancerState(context.Context, *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error)
	RemovedMasterUpdate(context.Context, *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error)
	SetPreferredZones(context.Context, *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error)
	GetMasterClusterConfig(context.Context, *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error)
	ChangeMasterClusterConfig(context.Context, *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error)
	GetLoadMoveCompletion(context.Context, *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	GetLeaderBlacklistCompletion(context.Context, *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error)
	IsLoadBalanced(context.Context, *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error)
	IsLoadBalancerIdle(context.Context, *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error)
	AreLeadersOnPreferredOnly(context.Context, *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error)
}

// UnimplementedMasterClusterServer should be embedded to have forward compatible implementations.
type UnimplementedMasterClusterServer struct {
}

func (UnimplementedMasterClusterServer) ListTabletServers(context.Context, *ListTabletServersRequestPB) (*ListTabletServersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTabletServers not implemented")
}
func (UnimplementedMasterClusterServer) ListLiveTabletServers(context.Context, *ListLiveTabletServersRequestPB) (*ListLiveTabletServersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiveTabletServers not implemented")
}
func (UnimplementedMasterClusterServer) ListMasters(context.Context, *ListMastersRequestPB) (*ListMastersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMasters not implemented")
}
func (UnimplementedMasterClusterServer) ListMasterRaftPeers(context.Context, *ListMasterRaftPeersRequestPB) (*ListMasterRaftPeersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMasterRaftPeers not implemented")
}
func (UnimplementedMasterClusterServer) GetMasterRegistration(context.Context, *GetMasterRegistrationRequestPB) (*GetMasterRegistrationResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterRegistration not implemented")
}
func (UnimplementedMasterClusterServer) IsMasterLeaderServiceReady(context.Context, *IsMasterLeaderReadyRequestPB) (*IsMasterLeaderReadyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsMasterLeaderServiceReady not implemented")
}
func (UnimplementedMasterClusterServer) DumpState(context.Context, *DumpMasterStateRequestPB) (*DumpMasterStateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DumpState not implemented")
}
func (UnimplementedMasterClusterServer) ChangeLoadBalancerState(context.Context, *ChangeLoadBalancerStateRequestPB) (*ChangeLoadBalancerStateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLoadBalancerState not implemented")
}
func (UnimplementedMasterClusterServer) GetLoadBalancerState(context.Context, *GetLoadBalancerStateRequestPB) (*GetLoadBalancerStateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadBalancerState not implemented")
}
func (UnimplementedMasterClusterServer) RemovedMasterUpdate(context.Context, *RemovedMasterUpdateRequestPB) (*RemovedMasterUpdateResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovedMasterUpdate not implemented")
}
func (UnimplementedMasterClusterServer) SetPreferredZones(context.Context, *SetPreferredZonesRequestPB) (*SetPreferredZonesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPreferredZones not implemented")
}
func (UnimplementedMasterClusterServer) GetMasterClusterConfig(context.Context, *GetMasterClusterConfigRequestPB) (*GetMasterClusterConfigResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMasterClusterConfig not implemented")
}
func (UnimplementedMasterClusterServer) ChangeMasterClusterConfig(context.Context, *ChangeMasterClusterConfigRequestPB) (*ChangeMasterClusterConfigResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeMasterClusterConfig not implemented")
}
func (UnimplementedMasterClusterServer) GetLoadMoveCompletion(context.Context, *GetLoadMovePercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoadMoveCompletion not implemented")
}
func (UnimplementedMasterClusterServer) GetLeaderBlacklistCompletion(context.Context, *GetLeaderBlacklistPercentRequestPB) (*GetLoadMovePercentResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaderBlacklistCompletion not implemented")
}
func (UnimplementedMasterClusterServer) IsLoadBalanced(context.Context, *IsLoadBalancedRequestPB) (*IsLoadBalancedResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLoadBalanced not implemented")
}
func (UnimplementedMasterClusterServer) IsLoadBalancerIdle(context.Context, *IsLoadBalancerIdleRequestPB) (*IsLoadBalancerIdleResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLoadBalancerIdle not implemented")
}
func (UnimplementedMasterClusterServer) AreLeadersOnPreferredOnly(context.Context, *AreLeadersOnPreferredOnlyRequestPB) (*AreLeadersOnPreferredOnlyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AreLeadersOnPreferredOnly not implemented")
}

// UnsafeMasterClusterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterClusterServer will
// result in compilation errors.
type UnsafeMasterClusterServer interface {
	mustEmbedUnimplementedMasterClusterServer()
}

func RegisterMasterClusterServer(s grpc.ServiceRegistrar, srv MasterClusterServer) {
	s.RegisterService(&MasterCluster_ServiceDesc, srv)
}

func _MasterCluster_ListTabletServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTabletServersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).ListTabletServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/ListTabletServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).ListTabletServers(ctx, req.(*ListTabletServersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_ListLiveTabletServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLiveTabletServersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).ListLiveTabletServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/ListLiveTabletServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).ListLiveTabletServers(ctx, req.(*ListLiveTabletServersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_ListMasters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMastersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).ListMasters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/ListMasters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).ListMasters(ctx, req.(*ListMastersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_ListMasterRaftPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMasterRaftPeersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).ListMasterRaftPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/ListMasterRaftPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).ListMasterRaftPeers(ctx, req.(*ListMasterRaftPeersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_GetMasterRegistration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterRegistrationRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).GetMasterRegistration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/GetMasterRegistration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).GetMasterRegistration(ctx, req.(*GetMasterRegistrationRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_IsMasterLeaderServiceReady_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsMasterLeaderReadyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).IsMasterLeaderServiceReady(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/IsMasterLeaderServiceReady",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).IsMasterLeaderServiceReady(ctx, req.(*IsMasterLeaderReadyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_DumpState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DumpMasterStateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).DumpState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/DumpState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).DumpState(ctx, req.(*DumpMasterStateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_ChangeLoadBalancerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLoadBalancerStateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).ChangeLoadBalancerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/ChangeLoadBalancerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).ChangeLoadBalancerState(ctx, req.(*ChangeLoadBalancerStateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_GetLoadBalancerState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadBalancerStateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).GetLoadBalancerState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/GetLoadBalancerState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).GetLoadBalancerState(ctx, req.(*GetLoadBalancerStateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_RemovedMasterUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovedMasterUpdateRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).RemovedMasterUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/RemovedMasterUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).RemovedMasterUpdate(ctx, req.(*RemovedMasterUpdateRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_SetPreferredZones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetPreferredZonesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).SetPreferredZones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/SetPreferredZones",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).SetPreferredZones(ctx, req.(*SetPreferredZonesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_GetMasterClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMasterClusterConfigRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).GetMasterClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/GetMasterClusterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).GetMasterClusterConfig(ctx, req.(*GetMasterClusterConfigRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_ChangeMasterClusterConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMasterClusterConfigRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).ChangeMasterClusterConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/ChangeMasterClusterConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).ChangeMasterClusterConfig(ctx, req.(*ChangeMasterClusterConfigRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_GetLoadMoveCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLoadMovePercentRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).GetLoadMoveCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/GetLoadMoveCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).GetLoadMoveCompletion(ctx, req.(*GetLoadMovePercentRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_GetLeaderBlacklistCompletion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderBlacklistPercentRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).GetLeaderBlacklistCompletion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/GetLeaderBlacklistCompletion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).GetLeaderBlacklistCompletion(ctx, req.(*GetLeaderBlacklistPercentRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_IsLoadBalanced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLoadBalancedRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).IsLoadBalanced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/IsLoadBalanced",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).IsLoadBalanced(ctx, req.(*IsLoadBalancedRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_IsLoadBalancerIdle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLoadBalancerIdleRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).IsLoadBalancerIdle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/IsLoadBalancerIdle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).IsLoadBalancerIdle(ctx, req.(*IsLoadBalancerIdleRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterCluster_AreLeadersOnPreferredOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AreLeadersOnPreferredOnlyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterClusterServer).AreLeadersOnPreferredOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterCluster/AreLeadersOnPreferredOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterClusterServer).AreLeadersOnPreferredOnly(ctx, req.(*AreLeadersOnPreferredOnlyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterCluster_ServiceDesc is the grpc.ServiceDesc for MasterCluster service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterCluster_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.master.MasterCluster",
	HandlerType: (*MasterClusterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListTabletServers",
			Handler:    _MasterCluster_ListTabletServers_Handler,
		},
		{
			MethodName: "ListLiveTabletServers",
			Handler:    _MasterCluster_ListLiveTabletServers_Handler,
		},
		{
			MethodName: "ListMasters",
			Handler:    _MasterCluster_ListMasters_Handler,
		},
		{
			MethodName: "ListMasterRaftPeers",
			Handler:    _MasterCluster_ListMasterRaftPeers_Handler,
		},
		{
			MethodName: "GetMasterRegistration",
			Handler:    _MasterCluster_GetMasterRegistration_Handler,
		},
		{
			MethodName: "IsMasterLeaderServiceReady",
			Handler:    _MasterCluster_IsMasterLeaderServiceReady_Handler,
		},
		{
			MethodName: "DumpState",
			Handler:    _MasterCluster_DumpState_Handler,
		},
		{
			MethodName: "ChangeLoadBalancerState",
			Handler:    _MasterCluster_ChangeLoadBalancerState_Handler,
		},
		{
			MethodName: "GetLoadBalancerState",
			Handler:    _MasterCluster_GetLoadBalancerState_Handler,
		},
		{
			MethodName: "RemovedMasterUpdate",
			Handler:    _MasterCluster_RemovedMasterUpdate_Handler,
		},
		{
			MethodName: "SetPreferredZones",
			Handler:    _MasterCluster_SetPreferredZones_Handler,
		},
		{
			MethodName: "GetMasterClusterConfig",
			Handler:    _MasterCluster_GetMasterClusterConfig_Handler,
		},
		{
			MethodName: "ChangeMasterClusterConfig",
			Handler:    _MasterCluster_ChangeMasterClusterConfig_Handler,
		},
		{
			MethodName: "GetLoadMoveCompletion",
			Handler:    _MasterCluster_GetLoadMoveCompletion_Handler,
		},
		{
			MethodName: "GetLeaderBlacklistCompletion",
			Handler:    _MasterCluster_GetLeaderBlacklistCompletion_Handler,
		},
		{
			MethodName: "IsLoadBalanced",
			Handler:    _MasterCluster_IsLoadBalanced_Handler,
		},
		{
			MethodName: "IsLoadBalancerIdle",
			Handler:    _MasterCluster_IsLoadBalancerIdle_Handler,
		},
		{
			MethodName: "AreLeadersOnPreferredOnly",
			Handler:    _MasterCluster_AreLeadersOnPreferredOnly_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/master/master_cluster.proto",
}
