// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/tserver/remote_bootstrap.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RemoteBootstrapServiceClient is the client API for RemoteBootstrapService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RemoteBootstrapServiceClient interface {
	// Establish a remote bootstrap session.
	BeginRemoteBootstrapSession(ctx context.Context, in *BeginRemoteBootstrapSessionRequestPB, opts ...grpc.CallOption) (*BeginRemoteBootstrapSessionResponsePB, error)
	// Check whether the specified session is active.
	CheckSessionActive(ctx context.Context, in *CheckRemoteBootstrapSessionActiveRequestPB, opts ...grpc.CallOption) (*CheckRemoteBootstrapSessionActiveResponsePB, error)
	// Fetch data (blocks, logs) from the server.
	FetchData(ctx context.Context, in *FetchDataRequestPB, opts ...grpc.CallOption) (*FetchDataResponsePB, error)
	// End a remote bootstrap session, allow server to release resources.
	EndRemoteBootstrapSession(ctx context.Context, in *EndRemoteBootstrapSessionRequestPB, opts ...grpc.CallOption) (*EndRemoteBootstrapSessionResponsePB, error)
	RemoveSession(ctx context.Context, in *RemoveSessionRequestPB, opts ...grpc.CallOption) (*RemoveSessionResponsePB, error)
}

type remoteBootstrapServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRemoteBootstrapServiceClient(cc grpc.ClientConnInterface) RemoteBootstrapServiceClient {
	return &remoteBootstrapServiceClient{cc}
}

func (c *remoteBootstrapServiceClient) BeginRemoteBootstrapSession(ctx context.Context, in *BeginRemoteBootstrapSessionRequestPB, opts ...grpc.CallOption) (*BeginRemoteBootstrapSessionResponsePB, error) {
	out := new(BeginRemoteBootstrapSessionResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.RemoteBootstrapService/BeginRemoteBootstrapSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteBootstrapServiceClient) CheckSessionActive(ctx context.Context, in *CheckRemoteBootstrapSessionActiveRequestPB, opts ...grpc.CallOption) (*CheckRemoteBootstrapSessionActiveResponsePB, error) {
	out := new(CheckRemoteBootstrapSessionActiveResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.RemoteBootstrapService/CheckSessionActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteBootstrapServiceClient) FetchData(ctx context.Context, in *FetchDataRequestPB, opts ...grpc.CallOption) (*FetchDataResponsePB, error) {
	out := new(FetchDataResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.RemoteBootstrapService/FetchData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteBootstrapServiceClient) EndRemoteBootstrapSession(ctx context.Context, in *EndRemoteBootstrapSessionRequestPB, opts ...grpc.CallOption) (*EndRemoteBootstrapSessionResponsePB, error) {
	out := new(EndRemoteBootstrapSessionResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.RemoteBootstrapService/EndRemoteBootstrapSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *remoteBootstrapServiceClient) RemoveSession(ctx context.Context, in *RemoveSessionRequestPB, opts ...grpc.CallOption) (*RemoveSessionResponsePB, error) {
	out := new(RemoveSessionResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.RemoteBootstrapService/RemoveSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RemoteBootstrapServiceServer is the server API for RemoteBootstrapService service.
// All implementations should embed UnimplementedRemoteBootstrapServiceServer
// for forward compatibility
type RemoteBootstrapServiceServer interface {
	// Establish a remote bootstrap session.
	BeginRemoteBootstrapSession(context.Context, *BeginRemoteBootstrapSessionRequestPB) (*BeginRemoteBootstrapSessionResponsePB, error)
	// Check whether the specified session is active.
	CheckSessionActive(context.Context, *CheckRemoteBootstrapSessionActiveRequestPB) (*CheckRemoteBootstrapSessionActiveResponsePB, error)
	// Fetch data (blocks, logs) from the server.
	FetchData(context.Context, *FetchDataRequestPB) (*FetchDataResponsePB, error)
	// End a remote bootstrap session, allow server to release resources.
	EndRemoteBootstrapSession(context.Context, *EndRemoteBootstrapSessionRequestPB) (*EndRemoteBootstrapSessionResponsePB, error)
	RemoveSession(context.Context, *RemoveSessionRequestPB) (*RemoveSessionResponsePB, error)
}

// UnimplementedRemoteBootstrapServiceServer should be embedded to have forward compatible implementations.
type UnimplementedRemoteBootstrapServiceServer struct {
}

func (UnimplementedRemoteBootstrapServiceServer) BeginRemoteBootstrapSession(context.Context, *BeginRemoteBootstrapSessionRequestPB) (*BeginRemoteBootstrapSessionResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginRemoteBootstrapSession not implemented")
}
func (UnimplementedRemoteBootstrapServiceServer) CheckSessionActive(context.Context, *CheckRemoteBootstrapSessionActiveRequestPB) (*CheckRemoteBootstrapSessionActiveResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckSessionActive not implemented")
}
func (UnimplementedRemoteBootstrapServiceServer) FetchData(context.Context, *FetchDataRequestPB) (*FetchDataResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchData not implemented")
}
func (UnimplementedRemoteBootstrapServiceServer) EndRemoteBootstrapSession(context.Context, *EndRemoteBootstrapSessionRequestPB) (*EndRemoteBootstrapSessionResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndRemoteBootstrapSession not implemented")
}
func (UnimplementedRemoteBootstrapServiceServer) RemoveSession(context.Context, *RemoveSessionRequestPB) (*RemoveSessionResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}

// UnsafeRemoteBootstrapServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RemoteBootstrapServiceServer will
// result in compilation errors.
type UnsafeRemoteBootstrapServiceServer interface {
	mustEmbedUnimplementedRemoteBootstrapServiceServer()
}

func RegisterRemoteBootstrapServiceServer(s grpc.ServiceRegistrar, srv RemoteBootstrapServiceServer) {
	s.RegisterService(&RemoteBootstrapService_ServiceDesc, srv)
}

func _RemoteBootstrapService_BeginRemoteBootstrapSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeginRemoteBootstrapSessionRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteBootstrapServiceServer).BeginRemoteBootstrapSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.RemoteBootstrapService/BeginRemoteBootstrapSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteBootstrapServiceServer).BeginRemoteBootstrapSession(ctx, req.(*BeginRemoteBootstrapSessionRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteBootstrapService_CheckSessionActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRemoteBootstrapSessionActiveRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteBootstrapServiceServer).CheckSessionActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.RemoteBootstrapService/CheckSessionActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteBootstrapServiceServer).CheckSessionActive(ctx, req.(*CheckRemoteBootstrapSessionActiveRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteBootstrapService_FetchData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchDataRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteBootstrapServiceServer).FetchData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.RemoteBootstrapService/FetchData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteBootstrapServiceServer).FetchData(ctx, req.(*FetchDataRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteBootstrapService_EndRemoteBootstrapSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndRemoteBootstrapSessionRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteBootstrapServiceServer).EndRemoteBootstrapSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.RemoteBootstrapService/EndRemoteBootstrapSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteBootstrapServiceServer).EndRemoteBootstrapSession(ctx, req.(*EndRemoteBootstrapSessionRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _RemoteBootstrapService_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveSessionRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RemoteBootstrapServiceServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.RemoteBootstrapService/RemoveSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RemoteBootstrapServiceServer).RemoveSession(ctx, req.(*RemoveSessionRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// RemoteBootstrapService_ServiceDesc is the grpc.ServiceDesc for RemoteBootstrapService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RemoteBootstrapService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.tserver.RemoteBootstrapService",
	HandlerType: (*RemoteBootstrapServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginRemoteBootstrapSession",
			Handler:    _RemoteBootstrapService_BeginRemoteBootstrapSession_Handler,
		},
		{
			MethodName: "CheckSessionActive",
			Handler:    _RemoteBootstrapService_CheckSessionActive_Handler,
		},
		{
			MethodName: "FetchData",
			Handler:    _RemoteBootstrapService_FetchData_Handler,
		},
		{
			MethodName: "EndRemoteBootstrapSession",
			Handler:    _RemoteBootstrapService_EndRemoteBootstrapSession_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _RemoteBootstrapService_RemoveSession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/tserver/remote_bootstrap.proto",
}
