// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/tserver/pg_client.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PgClientServiceClient is the client API for PgClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PgClientServiceClient interface {
	Heartbeat(ctx context.Context, in *PgHeartbeatRequestPB, opts ...grpc.CallOption) (*PgHeartbeatResponsePB, error)
	AlterDatabase(ctx context.Context, in *PgAlterDatabaseRequestPB, opts ...grpc.CallOption) (*PgAlterDatabaseResponsePB, error)
	AlterTable(ctx context.Context, in *PgAlterTableRequestPB, opts ...grpc.CallOption) (*PgAlterTableResponsePB, error)
	BackfillIndex(ctx context.Context, in *PgBackfillIndexRequestPB, opts ...grpc.CallOption) (*PgBackfillIndexResponsePB, error)
	CreateDatabase(ctx context.Context, in *PgCreateDatabaseRequestPB, opts ...grpc.CallOption) (*PgCreateDatabaseResponsePB, error)
	CreateSequencesDataTable(ctx context.Context, in *PgCreateSequencesDataTableRequestPB, opts ...grpc.CallOption) (*PgCreateSequencesDataTableResponsePB, error)
	CreateTable(ctx context.Context, in *PgCreateTableRequestPB, opts ...grpc.CallOption) (*PgCreateTableResponsePB, error)
	CreateTablegroup(ctx context.Context, in *PgCreateTablegroupRequestPB, opts ...grpc.CallOption) (*PgCreateTablegroupResponsePB, error)
	DropDatabase(ctx context.Context, in *PgDropDatabaseRequestPB, opts ...grpc.CallOption) (*PgDropDatabaseResponsePB, error)
	DropTable(ctx context.Context, in *PgDropTableRequestPB, opts ...grpc.CallOption) (*PgDropTableResponsePB, error)
	DropTablegroup(ctx context.Context, in *PgDropTablegroupRequestPB, opts ...grpc.CallOption) (*PgDropTablegroupResponsePB, error)
	GetCatalogMasterVersion(ctx context.Context, in *PgGetCatalogMasterVersionRequestPB, opts ...grpc.CallOption) (*PgGetCatalogMasterVersionResponsePB, error)
	GetDatabaseInfo(ctx context.Context, in *PgGetDatabaseInfoRequestPB, opts ...grpc.CallOption) (*PgGetDatabaseInfoResponsePB, error)
	IsInitDbDone(ctx context.Context, in *PgIsInitDbDoneRequestPB, opts ...grpc.CallOption) (*PgIsInitDbDoneResponsePB, error)
	ListLiveTabletServers(ctx context.Context, in *PgListLiveTabletServersRequestPB, opts ...grpc.CallOption) (*PgListLiveTabletServersResponsePB, error)
	OpenTable(ctx context.Context, in *PgOpenTableRequestPB, opts ...grpc.CallOption) (*PgOpenTableResponsePB, error)
	ReserveOids(ctx context.Context, in *PgReserveOidsRequestPB, opts ...grpc.CallOption) (*PgReserveOidsResponsePB, error)
	TabletServerCount(ctx context.Context, in *PgTabletServerCountRequestPB, opts ...grpc.CallOption) (*PgTabletServerCountResponsePB, error)
	TruncateTable(ctx context.Context, in *PgTruncateTableRequestPB, opts ...grpc.CallOption) (*PgTruncateTableResponsePB, error)
	ValidatePlacement(ctx context.Context, in *PgValidatePlacementRequestPB, opts ...grpc.CallOption) (*PgValidatePlacementResponsePB, error)
}

type pgClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPgClientServiceClient(cc grpc.ClientConnInterface) PgClientServiceClient {
	return &pgClientServiceClient{cc}
}

func (c *pgClientServiceClient) Heartbeat(ctx context.Context, in *PgHeartbeatRequestPB, opts ...grpc.CallOption) (*PgHeartbeatResponsePB, error) {
	out := new(PgHeartbeatResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) AlterDatabase(ctx context.Context, in *PgAlterDatabaseRequestPB, opts ...grpc.CallOption) (*PgAlterDatabaseResponsePB, error) {
	out := new(PgAlterDatabaseResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/AlterDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) AlterTable(ctx context.Context, in *PgAlterTableRequestPB, opts ...grpc.CallOption) (*PgAlterTableResponsePB, error) {
	out := new(PgAlterTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/AlterTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) BackfillIndex(ctx context.Context, in *PgBackfillIndexRequestPB, opts ...grpc.CallOption) (*PgBackfillIndexResponsePB, error) {
	out := new(PgBackfillIndexResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/BackfillIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) CreateDatabase(ctx context.Context, in *PgCreateDatabaseRequestPB, opts ...grpc.CallOption) (*PgCreateDatabaseResponsePB, error) {
	out := new(PgCreateDatabaseResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/CreateDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) CreateSequencesDataTable(ctx context.Context, in *PgCreateSequencesDataTableRequestPB, opts ...grpc.CallOption) (*PgCreateSequencesDataTableResponsePB, error) {
	out := new(PgCreateSequencesDataTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/CreateSequencesDataTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) CreateTable(ctx context.Context, in *PgCreateTableRequestPB, opts ...grpc.CallOption) (*PgCreateTableResponsePB, error) {
	out := new(PgCreateTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) CreateTablegroup(ctx context.Context, in *PgCreateTablegroupRequestPB, opts ...grpc.CallOption) (*PgCreateTablegroupResponsePB, error) {
	out := new(PgCreateTablegroupResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/CreateTablegroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) DropDatabase(ctx context.Context, in *PgDropDatabaseRequestPB, opts ...grpc.CallOption) (*PgDropDatabaseResponsePB, error) {
	out := new(PgDropDatabaseResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/DropDatabase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) DropTable(ctx context.Context, in *PgDropTableRequestPB, opts ...grpc.CallOption) (*PgDropTableResponsePB, error) {
	out := new(PgDropTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/DropTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) DropTablegroup(ctx context.Context, in *PgDropTablegroupRequestPB, opts ...grpc.CallOption) (*PgDropTablegroupResponsePB, error) {
	out := new(PgDropTablegroupResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/DropTablegroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) GetCatalogMasterVersion(ctx context.Context, in *PgGetCatalogMasterVersionRequestPB, opts ...grpc.CallOption) (*PgGetCatalogMasterVersionResponsePB, error) {
	out := new(PgGetCatalogMasterVersionResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/GetCatalogMasterVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) GetDatabaseInfo(ctx context.Context, in *PgGetDatabaseInfoRequestPB, opts ...grpc.CallOption) (*PgGetDatabaseInfoResponsePB, error) {
	out := new(PgGetDatabaseInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/GetDatabaseInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) IsInitDbDone(ctx context.Context, in *PgIsInitDbDoneRequestPB, opts ...grpc.CallOption) (*PgIsInitDbDoneResponsePB, error) {
	out := new(PgIsInitDbDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/IsInitDbDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) ListLiveTabletServers(ctx context.Context, in *PgListLiveTabletServersRequestPB, opts ...grpc.CallOption) (*PgListLiveTabletServersResponsePB, error) {
	out := new(PgListLiveTabletServersResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/ListLiveTabletServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) OpenTable(ctx context.Context, in *PgOpenTableRequestPB, opts ...grpc.CallOption) (*PgOpenTableResponsePB, error) {
	out := new(PgOpenTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/OpenTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) ReserveOids(ctx context.Context, in *PgReserveOidsRequestPB, opts ...grpc.CallOption) (*PgReserveOidsResponsePB, error) {
	out := new(PgReserveOidsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/ReserveOids", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) TabletServerCount(ctx context.Context, in *PgTabletServerCountRequestPB, opts ...grpc.CallOption) (*PgTabletServerCountResponsePB, error) {
	out := new(PgTabletServerCountResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/TabletServerCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) TruncateTable(ctx context.Context, in *PgTruncateTableRequestPB, opts ...grpc.CallOption) (*PgTruncateTableResponsePB, error) {
	out := new(PgTruncateTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/TruncateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pgClientServiceClient) ValidatePlacement(ctx context.Context, in *PgValidatePlacementRequestPB, opts ...grpc.CallOption) (*PgValidatePlacementResponsePB, error) {
	out := new(PgValidatePlacementResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.PgClientService/ValidatePlacement", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PgClientServiceServer is the server API for PgClientService service.
// All implementations should embed UnimplementedPgClientServiceServer
// for forward compatibility
type PgClientServiceServer interface {
	Heartbeat(context.Context, *PgHeartbeatRequestPB) (*PgHeartbeatResponsePB, error)
	AlterDatabase(context.Context, *PgAlterDatabaseRequestPB) (*PgAlterDatabaseResponsePB, error)
	AlterTable(context.Context, *PgAlterTableRequestPB) (*PgAlterTableResponsePB, error)
	BackfillIndex(context.Context, *PgBackfillIndexRequestPB) (*PgBackfillIndexResponsePB, error)
	CreateDatabase(context.Context, *PgCreateDatabaseRequestPB) (*PgCreateDatabaseResponsePB, error)
	CreateSequencesDataTable(context.Context, *PgCreateSequencesDataTableRequestPB) (*PgCreateSequencesDataTableResponsePB, error)
	CreateTable(context.Context, *PgCreateTableRequestPB) (*PgCreateTableResponsePB, error)
	CreateTablegroup(context.Context, *PgCreateTablegroupRequestPB) (*PgCreateTablegroupResponsePB, error)
	DropDatabase(context.Context, *PgDropDatabaseRequestPB) (*PgDropDatabaseResponsePB, error)
	DropTable(context.Context, *PgDropTableRequestPB) (*PgDropTableResponsePB, error)
	DropTablegroup(context.Context, *PgDropTablegroupRequestPB) (*PgDropTablegroupResponsePB, error)
	GetCatalogMasterVersion(context.Context, *PgGetCatalogMasterVersionRequestPB) (*PgGetCatalogMasterVersionResponsePB, error)
	GetDatabaseInfo(context.Context, *PgGetDatabaseInfoRequestPB) (*PgGetDatabaseInfoResponsePB, error)
	IsInitDbDone(context.Context, *PgIsInitDbDoneRequestPB) (*PgIsInitDbDoneResponsePB, error)
	ListLiveTabletServers(context.Context, *PgListLiveTabletServersRequestPB) (*PgListLiveTabletServersResponsePB, error)
	OpenTable(context.Context, *PgOpenTableRequestPB) (*PgOpenTableResponsePB, error)
	ReserveOids(context.Context, *PgReserveOidsRequestPB) (*PgReserveOidsResponsePB, error)
	TabletServerCount(context.Context, *PgTabletServerCountRequestPB) (*PgTabletServerCountResponsePB, error)
	TruncateTable(context.Context, *PgTruncateTableRequestPB) (*PgTruncateTableResponsePB, error)
	ValidatePlacement(context.Context, *PgValidatePlacementRequestPB) (*PgValidatePlacementResponsePB, error)
}

// UnimplementedPgClientServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPgClientServiceServer struct {
}

func (UnimplementedPgClientServiceServer) Heartbeat(context.Context, *PgHeartbeatRequestPB) (*PgHeartbeatResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedPgClientServiceServer) AlterDatabase(context.Context, *PgAlterDatabaseRequestPB) (*PgAlterDatabaseResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterDatabase not implemented")
}
func (UnimplementedPgClientServiceServer) AlterTable(context.Context, *PgAlterTableRequestPB) (*PgAlterTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedPgClientServiceServer) BackfillIndex(context.Context, *PgBackfillIndexRequestPB) (*PgBackfillIndexResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackfillIndex not implemented")
}
func (UnimplementedPgClientServiceServer) CreateDatabase(context.Context, *PgCreateDatabaseRequestPB) (*PgCreateDatabaseResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDatabase not implemented")
}
func (UnimplementedPgClientServiceServer) CreateSequencesDataTable(context.Context, *PgCreateSequencesDataTableRequestPB) (*PgCreateSequencesDataTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSequencesDataTable not implemented")
}
func (UnimplementedPgClientServiceServer) CreateTable(context.Context, *PgCreateTableRequestPB) (*PgCreateTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedPgClientServiceServer) CreateTablegroup(context.Context, *PgCreateTablegroupRequestPB) (*PgCreateTablegroupResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTablegroup not implemented")
}
func (UnimplementedPgClientServiceServer) DropDatabase(context.Context, *PgDropDatabaseRequestPB) (*PgDropDatabaseResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropDatabase not implemented")
}
func (UnimplementedPgClientServiceServer) DropTable(context.Context, *PgDropTableRequestPB) (*PgDropTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTable not implemented")
}
func (UnimplementedPgClientServiceServer) DropTablegroup(context.Context, *PgDropTablegroupRequestPB) (*PgDropTablegroupResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropTablegroup not implemented")
}
func (UnimplementedPgClientServiceServer) GetCatalogMasterVersion(context.Context, *PgGetCatalogMasterVersionRequestPB) (*PgGetCatalogMasterVersionResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogMasterVersion not implemented")
}
func (UnimplementedPgClientServiceServer) GetDatabaseInfo(context.Context, *PgGetDatabaseInfoRequestPB) (*PgGetDatabaseInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDatabaseInfo not implemented")
}
func (UnimplementedPgClientServiceServer) IsInitDbDone(context.Context, *PgIsInitDbDoneRequestPB) (*PgIsInitDbDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInitDbDone not implemented")
}
func (UnimplementedPgClientServiceServer) ListLiveTabletServers(context.Context, *PgListLiveTabletServersRequestPB) (*PgListLiveTabletServersResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLiveTabletServers not implemented")
}
func (UnimplementedPgClientServiceServer) OpenTable(context.Context, *PgOpenTableRequestPB) (*PgOpenTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenTable not implemented")
}
func (UnimplementedPgClientServiceServer) ReserveOids(context.Context, *PgReserveOidsRequestPB) (*PgReserveOidsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReserveOids not implemented")
}
func (UnimplementedPgClientServiceServer) TabletServerCount(context.Context, *PgTabletServerCountRequestPB) (*PgTabletServerCountResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TabletServerCount not implemented")
}
func (UnimplementedPgClientServiceServer) TruncateTable(context.Context, *PgTruncateTableRequestPB) (*PgTruncateTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateTable not implemented")
}
func (UnimplementedPgClientServiceServer) ValidatePlacement(context.Context, *PgValidatePlacementRequestPB) (*PgValidatePlacementResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatePlacement not implemented")
}

// UnsafePgClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PgClientServiceServer will
// result in compilation errors.
type UnsafePgClientServiceServer interface {
	mustEmbedUnimplementedPgClientServiceServer()
}

func RegisterPgClientServiceServer(s grpc.ServiceRegistrar, srv PgClientServiceServer) {
	s.RegisterService(&PgClientService_ServiceDesc, srv)
}

func _PgClientService_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgHeartbeatRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).Heartbeat(ctx, req.(*PgHeartbeatRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_AlterDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgAlterDatabaseRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).AlterDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/AlterDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).AlterDatabase(ctx, req.(*PgAlterDatabaseRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgAlterTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).AlterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/AlterTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).AlterTable(ctx, req.(*PgAlterTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_BackfillIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgBackfillIndexRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).BackfillIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/BackfillIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).BackfillIndex(ctx, req.(*PgBackfillIndexRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_CreateDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgCreateDatabaseRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).CreateDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/CreateDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).CreateDatabase(ctx, req.(*PgCreateDatabaseRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_CreateSequencesDataTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgCreateSequencesDataTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).CreateSequencesDataTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/CreateSequencesDataTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).CreateSequencesDataTable(ctx, req.(*PgCreateSequencesDataTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgCreateTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).CreateTable(ctx, req.(*PgCreateTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_CreateTablegroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgCreateTablegroupRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).CreateTablegroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/CreateTablegroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).CreateTablegroup(ctx, req.(*PgCreateTablegroupRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_DropDatabase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgDropDatabaseRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).DropDatabase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/DropDatabase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).DropDatabase(ctx, req.(*PgDropDatabaseRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_DropTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgDropTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).DropTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/DropTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).DropTable(ctx, req.(*PgDropTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_DropTablegroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgDropTablegroupRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).DropTablegroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/DropTablegroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).DropTablegroup(ctx, req.(*PgDropTablegroupRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_GetCatalogMasterVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgGetCatalogMasterVersionRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).GetCatalogMasterVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/GetCatalogMasterVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).GetCatalogMasterVersion(ctx, req.(*PgGetCatalogMasterVersionRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_GetDatabaseInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgGetDatabaseInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).GetDatabaseInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/GetDatabaseInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).GetDatabaseInfo(ctx, req.(*PgGetDatabaseInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_IsInitDbDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgIsInitDbDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).IsInitDbDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/IsInitDbDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).IsInitDbDone(ctx, req.(*PgIsInitDbDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_ListLiveTabletServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgListLiveTabletServersRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).ListLiveTabletServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/ListLiveTabletServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).ListLiveTabletServers(ctx, req.(*PgListLiveTabletServersRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_OpenTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgOpenTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).OpenTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/OpenTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).OpenTable(ctx, req.(*PgOpenTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_ReserveOids_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgReserveOidsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).ReserveOids(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/ReserveOids",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).ReserveOids(ctx, req.(*PgReserveOidsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_TabletServerCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgTabletServerCountRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).TabletServerCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/TabletServerCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).TabletServerCount(ctx, req.(*PgTabletServerCountRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_TruncateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgTruncateTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).TruncateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/TruncateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).TruncateTable(ctx, req.(*PgTruncateTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _PgClientService_ValidatePlacement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PgValidatePlacementRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PgClientServiceServer).ValidatePlacement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.PgClientService/ValidatePlacement",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PgClientServiceServer).ValidatePlacement(ctx, req.(*PgValidatePlacementRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// PgClientService_ServiceDesc is the grpc.ServiceDesc for PgClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PgClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.tserver.PgClientService",
	HandlerType: (*PgClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _PgClientService_Heartbeat_Handler,
		},
		{
			MethodName: "AlterDatabase",
			Handler:    _PgClientService_AlterDatabase_Handler,
		},
		{
			MethodName: "AlterTable",
			Handler:    _PgClientService_AlterTable_Handler,
		},
		{
			MethodName: "BackfillIndex",
			Handler:    _PgClientService_BackfillIndex_Handler,
		},
		{
			MethodName: "CreateDatabase",
			Handler:    _PgClientService_CreateDatabase_Handler,
		},
		{
			MethodName: "CreateSequencesDataTable",
			Handler:    _PgClientService_CreateSequencesDataTable_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _PgClientService_CreateTable_Handler,
		},
		{
			MethodName: "CreateTablegroup",
			Handler:    _PgClientService_CreateTablegroup_Handler,
		},
		{
			MethodName: "DropDatabase",
			Handler:    _PgClientService_DropDatabase_Handler,
		},
		{
			MethodName: "DropTable",
			Handler:    _PgClientService_DropTable_Handler,
		},
		{
			MethodName: "DropTablegroup",
			Handler:    _PgClientService_DropTablegroup_Handler,
		},
		{
			MethodName: "GetCatalogMasterVersion",
			Handler:    _PgClientService_GetCatalogMasterVersion_Handler,
		},
		{
			MethodName: "GetDatabaseInfo",
			Handler:    _PgClientService_GetDatabaseInfo_Handler,
		},
		{
			MethodName: "IsInitDbDone",
			Handler:    _PgClientService_IsInitDbDone_Handler,
		},
		{
			MethodName: "ListLiveTabletServers",
			Handler:    _PgClientService_ListLiveTabletServers_Handler,
		},
		{
			MethodName: "OpenTable",
			Handler:    _PgClientService_OpenTable_Handler,
		},
		{
			MethodName: "ReserveOids",
			Handler:    _PgClientService_ReserveOids_Handler,
		},
		{
			MethodName: "TabletServerCount",
			Handler:    _PgClientService_TabletServerCount_Handler,
		},
		{
			MethodName: "TruncateTable",
			Handler:    _PgClientService_TruncateTable_Handler,
		},
		{
			MethodName: "ValidatePlacement",
			Handler:    _PgClientService_ValidatePlacement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/tserver/pg_client.proto",
}
