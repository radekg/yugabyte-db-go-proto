// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/master/master_heartbeat.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterHeartbeatClient is the client API for MasterHeartbeat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterHeartbeatClient interface {
	// TS->Master RPCs
	TSHeartbeat(ctx context.Context, in *TSHeartbeatRequestPB, opts ...grpc.CallOption) (*TSHeartbeatResponsePB, error)
}

type masterHeartbeatClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterHeartbeatClient(cc grpc.ClientConnInterface) MasterHeartbeatClient {
	return &masterHeartbeatClient{cc}
}

func (c *masterHeartbeatClient) TSHeartbeat(ctx context.Context, in *TSHeartbeatRequestPB, opts ...grpc.CallOption) (*TSHeartbeatResponsePB, error) {
	out := new(TSHeartbeatResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterHeartbeat/TSHeartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterHeartbeatServer is the server API for MasterHeartbeat service.
// All implementations should embed UnimplementedMasterHeartbeatServer
// for forward compatibility
type MasterHeartbeatServer interface {
	// TS->Master RPCs
	TSHeartbeat(context.Context, *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error)
}

// UnimplementedMasterHeartbeatServer should be embedded to have forward compatible implementations.
type UnimplementedMasterHeartbeatServer struct {
}

func (UnimplementedMasterHeartbeatServer) TSHeartbeat(context.Context, *TSHeartbeatRequestPB) (*TSHeartbeatResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSHeartbeat not implemented")
}

// UnsafeMasterHeartbeatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterHeartbeatServer will
// result in compilation errors.
type UnsafeMasterHeartbeatServer interface {
	mustEmbedUnimplementedMasterHeartbeatServer()
}

func RegisterMasterHeartbeatServer(s grpc.ServiceRegistrar, srv MasterHeartbeatServer) {
	s.RegisterService(&MasterHeartbeat_ServiceDesc, srv)
}

func _MasterHeartbeat_TSHeartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TSHeartbeatRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterHeartbeatServer).TSHeartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterHeartbeat/TSHeartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterHeartbeatServer).TSHeartbeat(ctx, req.(*TSHeartbeatRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterHeartbeat_ServiceDesc is the grpc.ServiceDesc for MasterHeartbeat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterHeartbeat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.master.MasterHeartbeat",
	HandlerType: (*MasterHeartbeatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TSHeartbeat",
			Handler:    _MasterHeartbeat_TSHeartbeat_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/master/master_heartbeat.proto",
}
