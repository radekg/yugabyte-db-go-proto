// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: yb/master/master_ddl.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterDdlClient is the client API for MasterDdl service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterDdlClient interface {
	CreateTable(ctx context.Context, in *CreateTableRequestPB, opts ...grpc.CallOption) (*CreateTableResponsePB, error)
	IsCreateTableDone(ctx context.Context, in *IsCreateTableDoneRequestPB, opts ...grpc.CallOption) (*IsCreateTableDoneResponsePB, error)
	ListTables(ctx context.Context, in *ListTablesRequestPB, opts ...grpc.CallOption) (*ListTablesResponsePB, error)
	GetTableSchema(ctx context.Context, in *GetTableSchemaRequestPB, opts ...grpc.CallOption) (*GetTableSchemaResponsePB, error)
	GetTablegroupSchema(ctx context.Context, in *GetTablegroupSchemaRequestPB, opts ...grpc.CallOption) (*GetTablegroupSchemaResponsePB, error)
	GetColocatedTabletSchema(ctx context.Context, in *GetColocatedTabletSchemaRequestPB, opts ...grpc.CallOption) (*GetColocatedTabletSchemaResponsePB, error)
	TruncateTable(ctx context.Context, in *TruncateTableRequestPB, opts ...grpc.CallOption) (*TruncateTableResponsePB, error)
	IsTruncateTableDone(ctx context.Context, in *IsTruncateTableDoneRequestPB, opts ...grpc.CallOption) (*IsTruncateTableDoneResponsePB, error)
	BackfillIndex(ctx context.Context, in *BackfillIndexRequestPB, opts ...grpc.CallOption) (*BackfillIndexResponsePB, error)
	LaunchBackfillIndexForTable(ctx context.Context, in *LaunchBackfillIndexForTableRequestPB, opts ...grpc.CallOption) (*LaunchBackfillIndexForTableResponsePB, error)
	GetBackfillJobs(ctx context.Context, in *GetBackfillJobsRequestPB, opts ...grpc.CallOption) (*GetBackfillJobsResponsePB, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequestPB, opts ...grpc.CallOption) (*DeleteTableResponsePB, error)
	IsDeleteTableDone(ctx context.Context, in *IsDeleteTableDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteTableDoneResponsePB, error)
	AlterTable(ctx context.Context, in *AlterTableRequestPB, opts ...grpc.CallOption) (*AlterTableResponsePB, error)
	IsAlterTableDone(ctx context.Context, in *IsAlterTableDoneRequestPB, opts ...grpc.CallOption) (*IsAlterTableDoneResponsePB, error)
	CreateNamespace(ctx context.Context, in *CreateNamespaceRequestPB, opts ...grpc.CallOption) (*CreateNamespaceResponsePB, error)
	IsCreateNamespaceDone(ctx context.Context, in *IsCreateNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsCreateNamespaceDoneResponsePB, error)
	DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequestPB, opts ...grpc.CallOption) (*DeleteNamespaceResponsePB, error)
	IsDeleteNamespaceDone(ctx context.Context, in *IsDeleteNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteNamespaceDoneResponsePB, error)
	AlterNamespace(ctx context.Context, in *AlterNamespaceRequestPB, opts ...grpc.CallOption) (*AlterNamespaceResponsePB, error)
	ListNamespaces(ctx context.Context, in *ListNamespacesRequestPB, opts ...grpc.CallOption) (*ListNamespacesResponsePB, error)
	GetNamespaceInfo(ctx context.Context, in *GetNamespaceInfoRequestPB, opts ...grpc.CallOption) (*GetNamespaceInfoResponsePB, error)
	// For Tablegroup:
	CreateTablegroup(ctx context.Context, in *CreateTablegroupRequestPB, opts ...grpc.CallOption) (*CreateTablegroupResponsePB, error)
	DeleteTablegroup(ctx context.Context, in *DeleteTablegroupRequestPB, opts ...grpc.CallOption) (*DeleteTablegroupResponsePB, error)
	ListTablegroups(ctx context.Context, in *ListTablegroupsRequestPB, opts ...grpc.CallOption) (*ListTablegroupsResponsePB, error)
	CreateUDType(ctx context.Context, in *CreateUDTypeRequestPB, opts ...grpc.CallOption) (*CreateUDTypeResponsePB, error)
	DeleteUDType(ctx context.Context, in *DeleteUDTypeRequestPB, opts ...grpc.CallOption) (*DeleteUDTypeResponsePB, error)
	ListUDTypes(ctx context.Context, in *ListUDTypesRequestPB, opts ...grpc.CallOption) (*ListUDTypesResponsePB, error)
	GetUDTypeInfo(ctx context.Context, in *GetUDTypeInfoRequestPB, opts ...grpc.CallOption) (*GetUDTypeInfoResponsePB, error)
}

type masterDdlClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterDdlClient(cc grpc.ClientConnInterface) MasterDdlClient {
	return &masterDdlClient{cc}
}

func (c *masterDdlClient) CreateTable(ctx context.Context, in *CreateTableRequestPB, opts ...grpc.CallOption) (*CreateTableResponsePB, error) {
	out := new(CreateTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) IsCreateTableDone(ctx context.Context, in *IsCreateTableDoneRequestPB, opts ...grpc.CallOption) (*IsCreateTableDoneResponsePB, error) {
	out := new(IsCreateTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/IsCreateTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) ListTables(ctx context.Context, in *ListTablesRequestPB, opts ...grpc.CallOption) (*ListTablesResponsePB, error) {
	out := new(ListTablesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/ListTables", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) GetTableSchema(ctx context.Context, in *GetTableSchemaRequestPB, opts ...grpc.CallOption) (*GetTableSchemaResponsePB, error) {
	out := new(GetTableSchemaResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/GetTableSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) GetTablegroupSchema(ctx context.Context, in *GetTablegroupSchemaRequestPB, opts ...grpc.CallOption) (*GetTablegroupSchemaResponsePB, error) {
	out := new(GetTablegroupSchemaResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/GetTablegroupSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) GetColocatedTabletSchema(ctx context.Context, in *GetColocatedTabletSchemaRequestPB, opts ...grpc.CallOption) (*GetColocatedTabletSchemaResponsePB, error) {
	out := new(GetColocatedTabletSchemaResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/GetColocatedTabletSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) TruncateTable(ctx context.Context, in *TruncateTableRequestPB, opts ...grpc.CallOption) (*TruncateTableResponsePB, error) {
	out := new(TruncateTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/TruncateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) IsTruncateTableDone(ctx context.Context, in *IsTruncateTableDoneRequestPB, opts ...grpc.CallOption) (*IsTruncateTableDoneResponsePB, error) {
	out := new(IsTruncateTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/IsTruncateTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) BackfillIndex(ctx context.Context, in *BackfillIndexRequestPB, opts ...grpc.CallOption) (*BackfillIndexResponsePB, error) {
	out := new(BackfillIndexResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/BackfillIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) LaunchBackfillIndexForTable(ctx context.Context, in *LaunchBackfillIndexForTableRequestPB, opts ...grpc.CallOption) (*LaunchBackfillIndexForTableResponsePB, error) {
	out := new(LaunchBackfillIndexForTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/LaunchBackfillIndexForTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) GetBackfillJobs(ctx context.Context, in *GetBackfillJobsRequestPB, opts ...grpc.CallOption) (*GetBackfillJobsResponsePB, error) {
	out := new(GetBackfillJobsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/GetBackfillJobs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) DeleteTable(ctx context.Context, in *DeleteTableRequestPB, opts ...grpc.CallOption) (*DeleteTableResponsePB, error) {
	out := new(DeleteTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) IsDeleteTableDone(ctx context.Context, in *IsDeleteTableDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteTableDoneResponsePB, error) {
	out := new(IsDeleteTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/IsDeleteTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) AlterTable(ctx context.Context, in *AlterTableRequestPB, opts ...grpc.CallOption) (*AlterTableResponsePB, error) {
	out := new(AlterTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/AlterTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) IsAlterTableDone(ctx context.Context, in *IsAlterTableDoneRequestPB, opts ...grpc.CallOption) (*IsAlterTableDoneResponsePB, error) {
	out := new(IsAlterTableDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/IsAlterTableDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) CreateNamespace(ctx context.Context, in *CreateNamespaceRequestPB, opts ...grpc.CallOption) (*CreateNamespaceResponsePB, error) {
	out := new(CreateNamespaceResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/CreateNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) IsCreateNamespaceDone(ctx context.Context, in *IsCreateNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsCreateNamespaceDoneResponsePB, error) {
	out := new(IsCreateNamespaceDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/IsCreateNamespaceDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) DeleteNamespace(ctx context.Context, in *DeleteNamespaceRequestPB, opts ...grpc.CallOption) (*DeleteNamespaceResponsePB, error) {
	out := new(DeleteNamespaceResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/DeleteNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) IsDeleteNamespaceDone(ctx context.Context, in *IsDeleteNamespaceDoneRequestPB, opts ...grpc.CallOption) (*IsDeleteNamespaceDoneResponsePB, error) {
	out := new(IsDeleteNamespaceDoneResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/IsDeleteNamespaceDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) AlterNamespace(ctx context.Context, in *AlterNamespaceRequestPB, opts ...grpc.CallOption) (*AlterNamespaceResponsePB, error) {
	out := new(AlterNamespaceResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/AlterNamespace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) ListNamespaces(ctx context.Context, in *ListNamespacesRequestPB, opts ...grpc.CallOption) (*ListNamespacesResponsePB, error) {
	out := new(ListNamespacesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/ListNamespaces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) GetNamespaceInfo(ctx context.Context, in *GetNamespaceInfoRequestPB, opts ...grpc.CallOption) (*GetNamespaceInfoResponsePB, error) {
	out := new(GetNamespaceInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/GetNamespaceInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) CreateTablegroup(ctx context.Context, in *CreateTablegroupRequestPB, opts ...grpc.CallOption) (*CreateTablegroupResponsePB, error) {
	out := new(CreateTablegroupResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/CreateTablegroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) DeleteTablegroup(ctx context.Context, in *DeleteTablegroupRequestPB, opts ...grpc.CallOption) (*DeleteTablegroupResponsePB, error) {
	out := new(DeleteTablegroupResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/DeleteTablegroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) ListTablegroups(ctx context.Context, in *ListTablegroupsRequestPB, opts ...grpc.CallOption) (*ListTablegroupsResponsePB, error) {
	out := new(ListTablegroupsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/ListTablegroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) CreateUDType(ctx context.Context, in *CreateUDTypeRequestPB, opts ...grpc.CallOption) (*CreateUDTypeResponsePB, error) {
	out := new(CreateUDTypeResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/CreateUDType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) DeleteUDType(ctx context.Context, in *DeleteUDTypeRequestPB, opts ...grpc.CallOption) (*DeleteUDTypeResponsePB, error) {
	out := new(DeleteUDTypeResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/DeleteUDType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) ListUDTypes(ctx context.Context, in *ListUDTypesRequestPB, opts ...grpc.CallOption) (*ListUDTypesResponsePB, error) {
	out := new(ListUDTypesResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/ListUDTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterDdlClient) GetUDTypeInfo(ctx context.Context, in *GetUDTypeInfoRequestPB, opts ...grpc.CallOption) (*GetUDTypeInfoResponsePB, error) {
	out := new(GetUDTypeInfoResponsePB)
	err := c.cc.Invoke(ctx, "/yb.master.MasterDdl/GetUDTypeInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterDdlServer is the server API for MasterDdl service.
// All implementations should embed UnimplementedMasterDdlServer
// for forward compatibility
type MasterDdlServer interface {
	CreateTable(context.Context, *CreateTableRequestPB) (*CreateTableResponsePB, error)
	IsCreateTableDone(context.Context, *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error)
	ListTables(context.Context, *ListTablesRequestPB) (*ListTablesResponsePB, error)
	GetTableSchema(context.Context, *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error)
	GetTablegroupSchema(context.Context, *GetTablegroupSchemaRequestPB) (*GetTablegroupSchemaResponsePB, error)
	GetColocatedTabletSchema(context.Context, *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error)
	TruncateTable(context.Context, *TruncateTableRequestPB) (*TruncateTableResponsePB, error)
	IsTruncateTableDone(context.Context, *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error)
	BackfillIndex(context.Context, *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error)
	LaunchBackfillIndexForTable(context.Context, *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error)
	GetBackfillJobs(context.Context, *GetBackfillJobsRequestPB) (*GetBackfillJobsResponsePB, error)
	DeleteTable(context.Context, *DeleteTableRequestPB) (*DeleteTableResponsePB, error)
	IsDeleteTableDone(context.Context, *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error)
	AlterTable(context.Context, *AlterTableRequestPB) (*AlterTableResponsePB, error)
	IsAlterTableDone(context.Context, *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error)
	CreateNamespace(context.Context, *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error)
	IsCreateNamespaceDone(context.Context, *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error)
	DeleteNamespace(context.Context, *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error)
	IsDeleteNamespaceDone(context.Context, *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error)
	AlterNamespace(context.Context, *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error)
	ListNamespaces(context.Context, *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error)
	GetNamespaceInfo(context.Context, *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error)
	// For Tablegroup:
	CreateTablegroup(context.Context, *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error)
	DeleteTablegroup(context.Context, *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error)
	ListTablegroups(context.Context, *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error)
	CreateUDType(context.Context, *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error)
	DeleteUDType(context.Context, *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error)
	ListUDTypes(context.Context, *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error)
	GetUDTypeInfo(context.Context, *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error)
}

// UnimplementedMasterDdlServer should be embedded to have forward compatible implementations.
type UnimplementedMasterDdlServer struct {
}

func (UnimplementedMasterDdlServer) CreateTable(context.Context, *CreateTableRequestPB) (*CreateTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedMasterDdlServer) IsCreateTableDone(context.Context, *IsCreateTableDoneRequestPB) (*IsCreateTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCreateTableDone not implemented")
}
func (UnimplementedMasterDdlServer) ListTables(context.Context, *ListTablesRequestPB) (*ListTablesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTables not implemented")
}
func (UnimplementedMasterDdlServer) GetTableSchema(context.Context, *GetTableSchemaRequestPB) (*GetTableSchemaResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableSchema not implemented")
}
func (UnimplementedMasterDdlServer) GetTablegroupSchema(context.Context, *GetTablegroupSchemaRequestPB) (*GetTablegroupSchemaResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTablegroupSchema not implemented")
}
func (UnimplementedMasterDdlServer) GetColocatedTabletSchema(context.Context, *GetColocatedTabletSchemaRequestPB) (*GetColocatedTabletSchemaResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColocatedTabletSchema not implemented")
}
func (UnimplementedMasterDdlServer) TruncateTable(context.Context, *TruncateTableRequestPB) (*TruncateTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TruncateTable not implemented")
}
func (UnimplementedMasterDdlServer) IsTruncateTableDone(context.Context, *IsTruncateTableDoneRequestPB) (*IsTruncateTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTruncateTableDone not implemented")
}
func (UnimplementedMasterDdlServer) BackfillIndex(context.Context, *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackfillIndex not implemented")
}
func (UnimplementedMasterDdlServer) LaunchBackfillIndexForTable(context.Context, *LaunchBackfillIndexForTableRequestPB) (*LaunchBackfillIndexForTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LaunchBackfillIndexForTable not implemented")
}
func (UnimplementedMasterDdlServer) GetBackfillJobs(context.Context, *GetBackfillJobsRequestPB) (*GetBackfillJobsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBackfillJobs not implemented")
}
func (UnimplementedMasterDdlServer) DeleteTable(context.Context, *DeleteTableRequestPB) (*DeleteTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedMasterDdlServer) IsDeleteTableDone(context.Context, *IsDeleteTableDoneRequestPB) (*IsDeleteTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeleteTableDone not implemented")
}
func (UnimplementedMasterDdlServer) AlterTable(context.Context, *AlterTableRequestPB) (*AlterTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterTable not implemented")
}
func (UnimplementedMasterDdlServer) IsAlterTableDone(context.Context, *IsAlterTableDoneRequestPB) (*IsAlterTableDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsAlterTableDone not implemented")
}
func (UnimplementedMasterDdlServer) CreateNamespace(context.Context, *CreateNamespaceRequestPB) (*CreateNamespaceResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNamespace not implemented")
}
func (UnimplementedMasterDdlServer) IsCreateNamespaceDone(context.Context, *IsCreateNamespaceDoneRequestPB) (*IsCreateNamespaceDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsCreateNamespaceDone not implemented")
}
func (UnimplementedMasterDdlServer) DeleteNamespace(context.Context, *DeleteNamespaceRequestPB) (*DeleteNamespaceResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNamespace not implemented")
}
func (UnimplementedMasterDdlServer) IsDeleteNamespaceDone(context.Context, *IsDeleteNamespaceDoneRequestPB) (*IsDeleteNamespaceDoneResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsDeleteNamespaceDone not implemented")
}
func (UnimplementedMasterDdlServer) AlterNamespace(context.Context, *AlterNamespaceRequestPB) (*AlterNamespaceResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterNamespace not implemented")
}
func (UnimplementedMasterDdlServer) ListNamespaces(context.Context, *ListNamespacesRequestPB) (*ListNamespacesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNamespaces not implemented")
}
func (UnimplementedMasterDdlServer) GetNamespaceInfo(context.Context, *GetNamespaceInfoRequestPB) (*GetNamespaceInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNamespaceInfo not implemented")
}
func (UnimplementedMasterDdlServer) CreateTablegroup(context.Context, *CreateTablegroupRequestPB) (*CreateTablegroupResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTablegroup not implemented")
}
func (UnimplementedMasterDdlServer) DeleteTablegroup(context.Context, *DeleteTablegroupRequestPB) (*DeleteTablegroupResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTablegroup not implemented")
}
func (UnimplementedMasterDdlServer) ListTablegroups(context.Context, *ListTablegroupsRequestPB) (*ListTablegroupsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTablegroups not implemented")
}
func (UnimplementedMasterDdlServer) CreateUDType(context.Context, *CreateUDTypeRequestPB) (*CreateUDTypeResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUDType not implemented")
}
func (UnimplementedMasterDdlServer) DeleteUDType(context.Context, *DeleteUDTypeRequestPB) (*DeleteUDTypeResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUDType not implemented")
}
func (UnimplementedMasterDdlServer) ListUDTypes(context.Context, *ListUDTypesRequestPB) (*ListUDTypesResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListUDTypes not implemented")
}
func (UnimplementedMasterDdlServer) GetUDTypeInfo(context.Context, *GetUDTypeInfoRequestPB) (*GetUDTypeInfoResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUDTypeInfo not implemented")
}

// UnsafeMasterDdlServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterDdlServer will
// result in compilation errors.
type UnsafeMasterDdlServer interface {
	mustEmbedUnimplementedMasterDdlServer()
}

func RegisterMasterDdlServer(s grpc.ServiceRegistrar, srv MasterDdlServer) {
	s.RegisterService(&MasterDdl_ServiceDesc, srv)
}

func _MasterDdl_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).CreateTable(ctx, req.(*CreateTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_IsCreateTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCreateTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).IsCreateTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/IsCreateTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).IsCreateTableDone(ctx, req.(*IsCreateTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_ListTables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).ListTables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/ListTables",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).ListTables(ctx, req.(*ListTablesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_GetTableSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableSchemaRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).GetTableSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/GetTableSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).GetTableSchema(ctx, req.(*GetTableSchemaRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_GetTablegroupSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTablegroupSchemaRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).GetTablegroupSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/GetTablegroupSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).GetTablegroupSchema(ctx, req.(*GetTablegroupSchemaRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_GetColocatedTabletSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetColocatedTabletSchemaRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).GetColocatedTabletSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/GetColocatedTabletSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).GetColocatedTabletSchema(ctx, req.(*GetColocatedTabletSchemaRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_TruncateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).TruncateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/TruncateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).TruncateTable(ctx, req.(*TruncateTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_IsTruncateTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTruncateTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).IsTruncateTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/IsTruncateTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).IsTruncateTableDone(ctx, req.(*IsTruncateTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_BackfillIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackfillIndexRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).BackfillIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/BackfillIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).BackfillIndex(ctx, req.(*BackfillIndexRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_LaunchBackfillIndexForTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LaunchBackfillIndexForTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).LaunchBackfillIndexForTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/LaunchBackfillIndexForTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).LaunchBackfillIndexForTable(ctx, req.(*LaunchBackfillIndexForTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_GetBackfillJobs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBackfillJobsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).GetBackfillJobs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/GetBackfillJobs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).GetBackfillJobs(ctx, req.(*GetBackfillJobsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).DeleteTable(ctx, req.(*DeleteTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_IsDeleteTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeleteTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).IsDeleteTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/IsDeleteTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).IsDeleteTableDone(ctx, req.(*IsDeleteTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_AlterTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).AlterTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/AlterTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).AlterTable(ctx, req.(*AlterTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_IsAlterTableDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsAlterTableDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).IsAlterTableDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/IsAlterTableDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).IsAlterTableDone(ctx, req.(*IsAlterTableDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_CreateNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateNamespaceRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).CreateNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/CreateNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).CreateNamespace(ctx, req.(*CreateNamespaceRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_IsCreateNamespaceDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsCreateNamespaceDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).IsCreateNamespaceDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/IsCreateNamespaceDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).IsCreateNamespaceDone(ctx, req.(*IsCreateNamespaceDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_DeleteNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteNamespaceRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).DeleteNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/DeleteNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).DeleteNamespace(ctx, req.(*DeleteNamespaceRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_IsDeleteNamespaceDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsDeleteNamespaceDoneRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).IsDeleteNamespaceDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/IsDeleteNamespaceDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).IsDeleteNamespaceDone(ctx, req.(*IsDeleteNamespaceDoneRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_AlterNamespace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AlterNamespaceRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).AlterNamespace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/AlterNamespace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).AlterNamespace(ctx, req.(*AlterNamespaceRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_ListNamespaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNamespacesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).ListNamespaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/ListNamespaces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).ListNamespaces(ctx, req.(*ListNamespacesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_GetNamespaceInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNamespaceInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).GetNamespaceInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/GetNamespaceInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).GetNamespaceInfo(ctx, req.(*GetNamespaceInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_CreateTablegroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTablegroupRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).CreateTablegroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/CreateTablegroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).CreateTablegroup(ctx, req.(*CreateTablegroupRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_DeleteTablegroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTablegroupRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).DeleteTablegroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/DeleteTablegroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).DeleteTablegroup(ctx, req.(*DeleteTablegroupRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_ListTablegroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTablegroupsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).ListTablegroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/ListTablegroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).ListTablegroups(ctx, req.(*ListTablegroupsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_CreateUDType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUDTypeRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).CreateUDType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/CreateUDType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).CreateUDType(ctx, req.(*CreateUDTypeRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_DeleteUDType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUDTypeRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).DeleteUDType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/DeleteUDType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).DeleteUDType(ctx, req.(*DeleteUDTypeRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_ListUDTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListUDTypesRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).ListUDTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/ListUDTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).ListUDTypes(ctx, req.(*ListUDTypesRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterDdl_GetUDTypeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUDTypeInfoRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterDdlServer).GetUDTypeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.master.MasterDdl/GetUDTypeInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterDdlServer).GetUDTypeInfo(ctx, req.(*GetUDTypeInfoRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterDdl_ServiceDesc is the grpc.ServiceDesc for MasterDdl service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterDdl_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.master.MasterDdl",
	HandlerType: (*MasterDdlServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _MasterDdl_CreateTable_Handler,
		},
		{
			MethodName: "IsCreateTableDone",
			Handler:    _MasterDdl_IsCreateTableDone_Handler,
		},
		{
			MethodName: "ListTables",
			Handler:    _MasterDdl_ListTables_Handler,
		},
		{
			MethodName: "GetTableSchema",
			Handler:    _MasterDdl_GetTableSchema_Handler,
		},
		{
			MethodName: "GetTablegroupSchema",
			Handler:    _MasterDdl_GetTablegroupSchema_Handler,
		},
		{
			MethodName: "GetColocatedTabletSchema",
			Handler:    _MasterDdl_GetColocatedTabletSchema_Handler,
		},
		{
			MethodName: "TruncateTable",
			Handler:    _MasterDdl_TruncateTable_Handler,
		},
		{
			MethodName: "IsTruncateTableDone",
			Handler:    _MasterDdl_IsTruncateTableDone_Handler,
		},
		{
			MethodName: "BackfillIndex",
			Handler:    _MasterDdl_BackfillIndex_Handler,
		},
		{
			MethodName: "LaunchBackfillIndexForTable",
			Handler:    _MasterDdl_LaunchBackfillIndexForTable_Handler,
		},
		{
			MethodName: "GetBackfillJobs",
			Handler:    _MasterDdl_GetBackfillJobs_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _MasterDdl_DeleteTable_Handler,
		},
		{
			MethodName: "IsDeleteTableDone",
			Handler:    _MasterDdl_IsDeleteTableDone_Handler,
		},
		{
			MethodName: "AlterTable",
			Handler:    _MasterDdl_AlterTable_Handler,
		},
		{
			MethodName: "IsAlterTableDone",
			Handler:    _MasterDdl_IsAlterTableDone_Handler,
		},
		{
			MethodName: "CreateNamespace",
			Handler:    _MasterDdl_CreateNamespace_Handler,
		},
		{
			MethodName: "IsCreateNamespaceDone",
			Handler:    _MasterDdl_IsCreateNamespaceDone_Handler,
		},
		{
			MethodName: "DeleteNamespace",
			Handler:    _MasterDdl_DeleteNamespace_Handler,
		},
		{
			MethodName: "IsDeleteNamespaceDone",
			Handler:    _MasterDdl_IsDeleteNamespaceDone_Handler,
		},
		{
			MethodName: "AlterNamespace",
			Handler:    _MasterDdl_AlterNamespace_Handler,
		},
		{
			MethodName: "ListNamespaces",
			Handler:    _MasterDdl_ListNamespaces_Handler,
		},
		{
			MethodName: "GetNamespaceInfo",
			Handler:    _MasterDdl_GetNamespaceInfo_Handler,
		},
		{
			MethodName: "CreateTablegroup",
			Handler:    _MasterDdl_CreateTablegroup_Handler,
		},
		{
			MethodName: "DeleteTablegroup",
			Handler:    _MasterDdl_DeleteTablegroup_Handler,
		},
		{
			MethodName: "ListTablegroups",
			Handler:    _MasterDdl_ListTablegroups_Handler,
		},
		{
			MethodName: "CreateUDType",
			Handler:    _MasterDdl_CreateUDType_Handler,
		},
		{
			MethodName: "DeleteUDType",
			Handler:    _MasterDdl_DeleteUDType_Handler,
		},
		{
			MethodName: "ListUDTypes",
			Handler:    _MasterDdl_ListUDTypes_Handler,
		},
		{
			MethodName: "GetUDTypeInfo",
			Handler:    _MasterDdl_GetUDTypeInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/master/master_ddl.proto",
}
