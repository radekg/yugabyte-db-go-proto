// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: yb/tserver/tserver_admin.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enum of the server's Tablet Manager state: currently this is only
// used for assertions, but this can also be sent to the master.
type TSTabletManagerStatePB int32

const (
	TSTabletManagerStatePB_UNKNOWN TSTabletManagerStatePB = 999
	// Indicates that Tablet Manager is initializing.
	TSTabletManagerStatePB_MANAGER_INITIALIZING TSTabletManagerStatePB = 0
	// Indicates that Tablet Manager is running and can create new
	// tablets.
	TSTabletManagerStatePB_MANAGER_RUNNING TSTabletManagerStatePB = 1
	// Indicates that tablet manager is shutting down and no new tablets
	// can be created.
	TSTabletManagerStatePB_MANAGER_QUIESCING TSTabletManagerStatePB = 2
	// Tablet Manager has shutdown.
	TSTabletManagerStatePB_MANAGER_SHUTDOWN TSTabletManagerStatePB = 3
)

// Enum value maps for TSTabletManagerStatePB.
var (
	TSTabletManagerStatePB_name = map[int32]string{
		999: "UNKNOWN",
		0:   "MANAGER_INITIALIZING",
		1:   "MANAGER_RUNNING",
		2:   "MANAGER_QUIESCING",
		3:   "MANAGER_SHUTDOWN",
	}
	TSTabletManagerStatePB_value = map[string]int32{
		"UNKNOWN":              999,
		"MANAGER_INITIALIZING": 0,
		"MANAGER_RUNNING":      1,
		"MANAGER_QUIESCING":    2,
		"MANAGER_SHUTDOWN":     3,
	}
)

func (x TSTabletManagerStatePB) Enum() *TSTabletManagerStatePB {
	p := new(TSTabletManagerStatePB)
	*p = x
	return p
}

func (x TSTabletManagerStatePB) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TSTabletManagerStatePB) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_tserver_admin_proto_enumTypes[0].Descriptor()
}

func (TSTabletManagerStatePB) Type() protoreflect.EnumType {
	return &file_yb_tserver_tserver_admin_proto_enumTypes[0]
}

func (x TSTabletManagerStatePB) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *TSTabletManagerStatePB) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = TSTabletManagerStatePB(num)
	return nil
}

// Deprecated: Use TSTabletManagerStatePB.Descriptor instead.
func (TSTabletManagerStatePB) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{0}
}

type FlushTabletsRequestPB_Operation int32

const (
	FlushTabletsRequestPB_FLUSH   FlushTabletsRequestPB_Operation = 0
	FlushTabletsRequestPB_COMPACT FlushTabletsRequestPB_Operation = 1
	FlushTabletsRequestPB_LOG_GC  FlushTabletsRequestPB_Operation = 2
)

// Enum value maps for FlushTabletsRequestPB_Operation.
var (
	FlushTabletsRequestPB_Operation_name = map[int32]string{
		0: "FLUSH",
		1: "COMPACT",
		2: "LOG_GC",
	}
	FlushTabletsRequestPB_Operation_value = map[string]int32{
		"FLUSH":   0,
		"COMPACT": 1,
		"LOG_GC":  2,
	}
)

func (x FlushTabletsRequestPB_Operation) Enum() *FlushTabletsRequestPB_Operation {
	p := new(FlushTabletsRequestPB_Operation)
	*p = x
	return p
}

func (x FlushTabletsRequestPB_Operation) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlushTabletsRequestPB_Operation) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_tserver_admin_proto_enumTypes[1].Descriptor()
}

func (FlushTabletsRequestPB_Operation) Type() protoreflect.EnumType {
	return &file_yb_tserver_tserver_admin_proto_enumTypes[1]
}

func (x FlushTabletsRequestPB_Operation) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *FlushTabletsRequestPB_Operation) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = FlushTabletsRequestPB_Operation(num)
	return nil
}

// Deprecated: Use FlushTabletsRequestPB_Operation.Descriptor instead.
func (FlushTabletsRequestPB_Operation) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{13, 0}
}

type ChangeMetadataRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,5,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// TODO: Replace with the table descriptor
	// (Schema, Column IDs, Column Attributes)
	Schema               *SchemaPB      `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	Indexes              []*IndexInfoPB `protobuf:"bytes,7,rep,name=indexes" json:"indexes,omitempty"`
	SchemaVersion        *uint32        `protobuf:"varint,3,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	NewTableName         *string        `protobuf:"bytes,4,opt,name=new_table_name,json=newTableName" json:"new_table_name,omitempty"`
	PropagatedHybridTime *uint64        `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	AddTable             *TableInfoPB   `protobuf:"bytes,8,opt,name=add_table,json=addTable" json:"add_table,omitempty"`
	WalRetentionSecs     *uint32        `protobuf:"varint,9,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	RemoveTableId        []byte         `protobuf:"bytes,10,opt,name=remove_table_id,json=removeTableId" json:"remove_table_id,omitempty"`
	// Note that we don't use the value of this and just check has_mark_backfill_done.
	MarkBackfillDone *bool `protobuf:"varint,11,opt,name=mark_backfill_done,json=markBackfillDone" json:"mark_backfill_done,omitempty"`
	// Used for alter schema on a non-primary table (e.g. colocated user table).
	AlterTableId []byte `protobuf:"bytes,12,opt,name=alter_table_id,json=alterTableId" json:"alter_table_id,omitempty"`
	// Used to update schema of a colocated user table upon backfill completion.
	BackfillDoneTableId []byte `protobuf:"bytes,13,opt,name=backfill_done_table_id,json=backfillDoneTableId" json:"backfill_done_table_id,omitempty"`
	// Transactions will be aborted except the one with this id which triggered the AlterTable.
	TransactionId []byte `protobuf:"bytes,14,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"` // 16 byte uuid
	// Used for AlterTable to determine if active transactions on the tablet needs to be aborted.
	ShouldAbortActiveTxns *bool `protobuf:"varint,16,opt,name=should_abort_active_txns,json=shouldAbortActiveTxns,def=0" json:"should_abort_active_txns,omitempty"`
}

// Default values for ChangeMetadataRequestPB fields.
const (
	Default_ChangeMetadataRequestPB_ShouldAbortActiveTxns = bool(false)
)

func (x *ChangeMetadataRequestPB) Reset() {
	*x = ChangeMetadataRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMetadataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMetadataRequestPB) ProtoMessage() {}

func (x *ChangeMetadataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMetadataRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeMetadataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{0}
}

func (x *ChangeMetadataRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetSchema() *SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetIndexes() []*IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetNewTableName() string {
	if x != nil && x.NewTableName != nil {
		return *x.NewTableName
	}
	return ""
}

func (x *ChangeMetadataRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetAddTable() *TableInfoPB {
	if x != nil {
		return x.AddTable
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetRemoveTableId() []byte {
	if x != nil {
		return x.RemoveTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetMarkBackfillDone() bool {
	if x != nil && x.MarkBackfillDone != nil {
		return *x.MarkBackfillDone
	}
	return false
}

func (x *ChangeMetadataRequestPB) GetAlterTableId() []byte {
	if x != nil {
		return x.AlterTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetBackfillDoneTableId() []byte {
	if x != nil {
		return x.BackfillDoneTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetShouldAbortActiveTxns() bool {
	if x != nil && x.ShouldAbortActiveTxns != nil {
		return *x.ShouldAbortActiveTxns
	}
	return Default_ChangeMetadataRequestPB_ShouldAbortActiveTxns
}

// This is used to export tablet metadata changes to a protobuf file to be reloaded on a new cluster
// startup to avoid running initdb.
type ExportedTabletMetadataChanges struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataChanges []*ChangeMetadataRequestPB `protobuf:"bytes,1,rep,name=metadata_changes,json=metadataChanges" json:"metadata_changes,omitempty"`
}

func (x *ExportedTabletMetadataChanges) Reset() {
	*x = ExportedTabletMetadataChanges{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportedTabletMetadataChanges) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportedTabletMetadataChanges) ProtoMessage() {}

func (x *ExportedTabletMetadataChanges) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportedTabletMetadataChanges.ProtoReflect.Descriptor instead.
func (*ExportedTabletMetadataChanges) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{1}
}

func (x *ExportedTabletMetadataChanges) GetMetadataChanges() []*ChangeMetadataRequestPB {
	if x != nil {
		return x.MetadataChanges
	}
	return nil
}

type ChangeMetadataResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *ChangeMetadataResponsePB) Reset() {
	*x = ChangeMetadataResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMetadataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMetadataResponsePB) ProtoMessage() {}

func (x *ChangeMetadataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMetadataResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeMetadataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{2}
}

func (x *ChangeMetadataResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ChangeMetadataResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type GetSafeTimeRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid                 []byte  `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId                 []byte  `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	SchemaVersion            *uint32 `protobuf:"varint,3,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	PropagatedHybridTime     *uint64 `protobuf:"fixed64,4,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	MinHybridTimeForBackfill *uint64 `protobuf:"fixed64,5,opt,name=min_hybrid_time_for_backfill,json=minHybridTimeForBackfill" json:"min_hybrid_time_for_backfill,omitempty"`
}

func (x *GetSafeTimeRequestPB) Reset() {
	*x = GetSafeTimeRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSafeTimeRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafeTimeRequestPB) ProtoMessage() {}

func (x *GetSafeTimeRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafeTimeRequestPB.ProtoReflect.Descriptor instead.
func (*GetSafeTimeRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{3}
}

func (x *GetSafeTimeRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *GetSafeTimeRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *GetSafeTimeRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *GetSafeTimeRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *GetSafeTimeRequestPB) GetMinHybridTimeForBackfill() uint64 {
	if x != nil && x.MinHybridTimeForBackfill != nil {
		return *x.MinHybridTimeForBackfill
	}
	return 0
}

type GetSafeTimeResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	SafeTime             *uint64              `protobuf:"fixed64,2,opt,name=safe_time,json=safeTime" json:"safe_time,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *GetSafeTimeResponsePB) Reset() {
	*x = GetSafeTimeResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSafeTimeResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSafeTimeResponsePB) ProtoMessage() {}

func (x *GetSafeTimeResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSafeTimeResponsePB.ProtoReflect.Descriptor instead.
func (*GetSafeTimeResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{4}
}

func (x *GetSafeTimeResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetSafeTimeResponsePB) GetSafeTime() uint64 {
	if x != nil && x.SafeTime != nil {
		return *x.SafeTime
	}
	return 0
}

func (x *GetSafeTimeResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type BackfillIndexRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Indexes on the _same table_ to backfill.
	Indexes              []*IndexInfoPB `protobuf:"bytes,3,rep,name=indexes" json:"indexes,omitempty"`
	SchemaVersion        *uint32        `protobuf:"varint,4,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	ReadAtHybridTime     *uint64        `protobuf:"fixed64,5,opt,name=read_at_hybrid_time,json=readAtHybridTime" json:"read_at_hybrid_time,omitempty"`
	StartKey             []byte         `protobuf:"bytes,6,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	EndKey               []byte         `protobuf:"bytes,7,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	PropagatedHybridTime *uint64        `protobuf:"fixed64,8,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Currently only used for YSQL.
	NamespaceName *string `protobuf:"bytes,9,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	// Indexed table ID so we can properly address a colocated table.
	IndexedTableId []byte `protobuf:"bytes,10,opt,name=indexed_table_id,json=indexedTableId" json:"indexed_table_id,omitempty"`
}

func (x *BackfillIndexRequestPB) Reset() {
	*x = BackfillIndexRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillIndexRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexRequestPB) ProtoMessage() {}

func (x *BackfillIndexRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexRequestPB.ProtoReflect.Descriptor instead.
func (*BackfillIndexRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{5}
}

func (x *BackfillIndexRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetIndexes() []*IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *BackfillIndexRequestPB) GetReadAtHybridTime() uint64 {
	if x != nil && x.ReadAtHybridTime != nil {
		return *x.ReadAtHybridTime
	}
	return 0
}

func (x *BackfillIndexRequestPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *BackfillIndexRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *BackfillIndexRequestPB) GetNamespaceName() string {
	if x != nil && x.NamespaceName != nil {
		return *x.NamespaceName
	}
	return ""
}

func (x *BackfillIndexRequestPB) GetIndexedTableId() []byte {
	if x != nil {
		return x.IndexedTableId
	}
	return nil
}

type BackfillIndexResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// If non-empty, this is used to keep track of how far along
	// the backfill has completed, so that it can be resumed.
	// Encoded as the DocKey for the next row to be backfilled.
	BackfilledUntil []byte `protobuf:"bytes,3,opt,name=backfilled_until,json=backfilledUntil" json:"backfilled_until,omitempty"`
	// In case of a partial error, list of indexes that failed.
	FailedIndexIds [][]byte `protobuf:"bytes,4,rep,name=failed_index_ids,json=failedIndexIds" json:"failed_index_ids,omitempty"`
	// Returns the number of rows backfilled in the request.
	NumberRowsProcessed *uint64 `protobuf:"varint,5,opt,name=number_rows_processed,json=numberRowsProcessed" json:"number_rows_processed,omitempty"`
}

func (x *BackfillIndexResponsePB) Reset() {
	*x = BackfillIndexResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BackfillIndexResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BackfillIndexResponsePB) ProtoMessage() {}

func (x *BackfillIndexResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BackfillIndexResponsePB.ProtoReflect.Descriptor instead.
func (*BackfillIndexResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{6}
}

func (x *BackfillIndexResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *BackfillIndexResponsePB) GetBackfilledUntil() []byte {
	if x != nil {
		return x.BackfilledUntil
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetFailedIndexIds() [][]byte {
	if x != nil {
		return x.FailedIndexIds
	}
	return nil
}

func (x *BackfillIndexResponsePB) GetNumberRowsProcessed() uint64 {
	if x != nil && x.NumberRowsProcessed != nil {
		return *x.NumberRowsProcessed
	}
	return 0
}

type CopartitionTableRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid  []byte  `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TableId   []byte  `protobuf:"bytes,2,opt,name=table_id,json=tableId" json:"table_id,omitempty"`
	TabletId  []byte  `protobuf:"bytes,3,opt,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	TableName *string `protobuf:"bytes,4,opt,name=table_name,json=tableName" json:"table_name,omitempty"`
}

func (x *CopartitionTableRequestPB) Reset() {
	*x = CopartitionTableRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopartitionTableRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopartitionTableRequestPB) ProtoMessage() {}

func (x *CopartitionTableRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopartitionTableRequestPB.ProtoReflect.Descriptor instead.
func (*CopartitionTableRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{7}
}

func (x *CopartitionTableRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *CopartitionTableRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CopartitionTableRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *CopartitionTableRequestPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

type CopartitionTableResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *CopartitionTableResponsePB) Reset() {
	*x = CopartitionTableResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopartitionTableResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopartitionTableResponsePB) ProtoMessage() {}

func (x *CopartitionTableResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopartitionTableResponsePB.ProtoReflect.Descriptor instead.
func (*CopartitionTableResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{8}
}

func (x *CopartitionTableResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// A create tablet request.
type CreateTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,8,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TableId  []byte `protobuf:"bytes,1,req,name=table_id,json=tableId" json:"table_id,omitempty"`
	TabletId []byte `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// DEPRECATED.
	StartKey []byte `protobuf:"bytes,3,opt,name=start_key,json=startKey" json:"start_key,omitempty"`
	// DEPRECATED.
	EndKey []byte `protobuf:"bytes,4,opt,name=end_key,json=endKey" json:"end_key,omitempty"`
	// The partition of the tablet.
	Partition     *PartitionPB `protobuf:"bytes,9,opt,name=partition" json:"partition,omitempty"`
	NamespaceId   []byte       `protobuf:"bytes,14,opt,name=namespace_id,json=namespaceId" json:"namespace_id,omitempty"`
	NamespaceName []byte       `protobuf:"bytes,15,opt,name=namespace_name,json=namespaceName" json:"namespace_name,omitempty"`
	TableName     *string      `protobuf:"bytes,5,req,name=table_name,json=tableName" json:"table_name,omitempty"`
	TableType     *TableType   `protobuf:"varint,11,opt,name=table_type,json=tableType,enum=yb.TableType" json:"table_type,omitempty"`
	Schema        *SchemaPB    `protobuf:"bytes,6,req,name=schema" json:"schema,omitempty"`
	// The partition schema of the table which the tablet belongs to.
	PartitionSchema *PartitionSchemaPB `protobuf:"bytes,10,opt,name=partition_schema,json=partitionSchema" json:"partition_schema,omitempty"`
	// Initial consensus configuration for the tablet.
	Config *RaftConfigPB `protobuf:"bytes,7,req,name=config" json:"config,omitempty"`
	// For index table: information about this index.
	IndexInfo *IndexInfoPB `protobuf:"bytes,12,opt,name=index_info,json=indexInfo" json:"index_info,omitempty"`
	// True if the tablet is colocated.
	Colocated         *bool    `protobuf:"varint,13,opt,name=colocated,def=0" json:"colocated,omitempty"`
	SnapshotSchedules [][]byte `protobuf:"bytes,16,rep,name=snapshot_schedules,json=snapshotSchedules" json:"snapshot_schedules,omitempty"`
}

// Default values for CreateTabletRequestPB fields.
const (
	Default_CreateTabletRequestPB_Colocated = bool(false)
)

func (x *CreateTabletRequestPB) Reset() {
	*x = CreateTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTabletRequestPB) ProtoMessage() {}

func (x *CreateTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTabletRequestPB.ProtoReflect.Descriptor instead.
func (*CreateTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{9}
}

func (x *CreateTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *CreateTabletRequestPB) GetTableId() []byte {
	if x != nil {
		return x.TableId
	}
	return nil
}

func (x *CreateTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *CreateTabletRequestPB) GetStartKey() []byte {
	if x != nil {
		return x.StartKey
	}
	return nil
}

func (x *CreateTabletRequestPB) GetEndKey() []byte {
	if x != nil {
		return x.EndKey
	}
	return nil
}

func (x *CreateTabletRequestPB) GetPartition() *PartitionPB {
	if x != nil {
		return x.Partition
	}
	return nil
}

func (x *CreateTabletRequestPB) GetNamespaceId() []byte {
	if x != nil {
		return x.NamespaceId
	}
	return nil
}

func (x *CreateTabletRequestPB) GetNamespaceName() []byte {
	if x != nil {
		return x.NamespaceName
	}
	return nil
}

func (x *CreateTabletRequestPB) GetTableName() string {
	if x != nil && x.TableName != nil {
		return *x.TableName
	}
	return ""
}

func (x *CreateTabletRequestPB) GetTableType() TableType {
	if x != nil && x.TableType != nil {
		return *x.TableType
	}
	return TableType_YQL_TABLE_TYPE
}

func (x *CreateTabletRequestPB) GetSchema() *SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CreateTabletRequestPB) GetPartitionSchema() *PartitionSchemaPB {
	if x != nil {
		return x.PartitionSchema
	}
	return nil
}

func (x *CreateTabletRequestPB) GetConfig() *RaftConfigPB {
	if x != nil {
		return x.Config
	}
	return nil
}

func (x *CreateTabletRequestPB) GetIndexInfo() *IndexInfoPB {
	if x != nil {
		return x.IndexInfo
	}
	return nil
}

func (x *CreateTabletRequestPB) GetColocated() bool {
	if x != nil && x.Colocated != nil {
		return *x.Colocated
	}
	return Default_CreateTabletRequestPB_Colocated
}

func (x *CreateTabletRequestPB) GetSnapshotSchedules() [][]byte {
	if x != nil {
		return x.SnapshotSchedules
	}
	return nil
}

type CreateTabletResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *CreateTabletResponsePB) Reset() {
	*x = CreateTabletResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTabletResponsePB) ProtoMessage() {}

func (x *CreateTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTabletResponsePB.ProtoReflect.Descriptor instead.
func (*CreateTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{10}
}

func (x *CreateTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// A delete tablet request.
type DeleteTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,4,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// Reason the tablet is being deleted (for logging purposes)
	Reason *string `protobuf:"bytes,2,opt,name=reason" json:"reason,omitempty"`
	// Must be one of TABLET_DATA_DELETED (for table deletes) or
	// TABLET_DATA_TOMBSTONED (for replica retirement).
	DeleteType *TabletDataState `protobuf:"varint,3,opt,name=delete_type,json=deleteType,enum=yb.tablet.TabletDataState,def=3" json:"delete_type,omitempty"`
	// The highest allowed OpId index of the latest known committed config.
	// This optional parameter is here to provide an atomic (compare-and-swap)
	// DeleteTablet operation. If this parameter is specified, the DeleteTablet()
	// operation will succeed only if the committed config has an opid_index that
	// is less than or equal to this value.
	// See also the definition of RaftConfigPB.
	// Note: At the time of this writing, there is a small race between checking
	// the value of the committed config opid index and shutting down the tablet
	// for deletion. See comments in ts_tablet_manager.cc
	CasConfigOpidIndexLessOrEqual *int64 `protobuf:"varint,5,opt,name=cas_config_opid_index_less_or_equal,json=casConfigOpidIndexLessOrEqual" json:"cas_config_opid_index_less_or_equal,omitempty"`
	// Hide tablet instead of deleting it.
	HideOnly *bool `protobuf:"varint,6,opt,name=hide_only,json=hideOnly" json:"hide_only,omitempty"`
}

// Default values for DeleteTabletRequestPB fields.
const (
	Default_DeleteTabletRequestPB_DeleteType = TabletDataState_TABLET_DATA_TOMBSTONED
)

func (x *DeleteTabletRequestPB) Reset() {
	*x = DeleteTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletRequestPB) ProtoMessage() {}

func (x *DeleteTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletRequestPB.ProtoReflect.Descriptor instead.
func (*DeleteTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *DeleteTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *DeleteTabletRequestPB) GetReason() string {
	if x != nil && x.Reason != nil {
		return *x.Reason
	}
	return ""
}

func (x *DeleteTabletRequestPB) GetDeleteType() TabletDataState {
	if x != nil && x.DeleteType != nil {
		return *x.DeleteType
	}
	return Default_DeleteTabletRequestPB_DeleteType
}

func (x *DeleteTabletRequestPB) GetCasConfigOpidIndexLessOrEqual() int64 {
	if x != nil && x.CasConfigOpidIndexLessOrEqual != nil {
		return *x.CasConfigOpidIndexLessOrEqual
	}
	return 0
}

func (x *DeleteTabletRequestPB) GetHideOnly() bool {
	if x != nil && x.HideOnly != nil {
		return *x.HideOnly
	}
	return false
}

type DeleteTabletResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *DeleteTabletResponsePB) Reset() {
	*x = DeleteTabletResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTabletResponsePB) ProtoMessage() {}

func (x *DeleteTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTabletResponsePB.ProtoReflect.Descriptor instead.
func (*DeleteTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// TODO: rename this to FlushOrCompactTabletsRequestPB
type FlushTabletsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	// Tablets to flush.
	TabletIds            [][]byte `protobuf:"bytes,2,rep,name=tablet_ids,json=tabletIds" json:"tablet_ids,omitempty"`
	PropagatedHybridTime *uint64  `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	// Actual operation that we plan to perform.
	Operation *FlushTabletsRequestPB_Operation `protobuf:"varint,4,opt,name=operation,enum=yb.tserver.FlushTabletsRequestPB_Operation" json:"operation,omitempty"`
	// Whether we want to flush or compact all tablets in the server.
	AllTablets *bool `protobuf:"varint,5,opt,name=all_tablets,json=allTablets" json:"all_tablets,omitempty"`
}

func (x *FlushTabletsRequestPB) Reset() {
	*x = FlushTabletsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushTabletsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTabletsRequestPB) ProtoMessage() {}

func (x *FlushTabletsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTabletsRequestPB.ProtoReflect.Descriptor instead.
func (*FlushTabletsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{13}
}

func (x *FlushTabletsRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *FlushTabletsRequestPB) GetTabletIds() [][]byte {
	if x != nil {
		return x.TabletIds
	}
	return nil
}

func (x *FlushTabletsRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *FlushTabletsRequestPB) GetOperation() FlushTabletsRequestPB_Operation {
	if x != nil && x.Operation != nil {
		return *x.Operation
	}
	return FlushTabletsRequestPB_FLUSH
}

func (x *FlushTabletsRequestPB) GetAllTablets() bool {
	if x != nil && x.AllTablets != nil {
		return *x.AllTablets
	}
	return false
}

type FlushTabletsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	FailedTabletId       []byte               `protobuf:"bytes,2,opt,name=failed_tablet_id,json=failedTabletId" json:"failed_tablet_id,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,3,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *FlushTabletsResponsePB) Reset() {
	*x = FlushTabletsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushTabletsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushTabletsResponsePB) ProtoMessage() {}

func (x *FlushTabletsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushTabletsResponsePB.ProtoReflect.Descriptor instead.
func (*FlushTabletsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{14}
}

func (x *FlushTabletsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FlushTabletsResponsePB) GetFailedTabletId() []byte {
	if x != nil {
		return x.FailedTabletId
	}
	return nil
}

func (x *FlushTabletsResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type CountIntentsRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CountIntentsRequestPB) Reset() {
	*x = CountIntentsRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountIntentsRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountIntentsRequestPB) ProtoMessage() {}

func (x *CountIntentsRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountIntentsRequestPB.ProtoReflect.Descriptor instead.
func (*CountIntentsRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{15}
}

type CountIntentsResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error      *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	NumIntents *int64               `protobuf:"varint,2,opt,name=num_intents,json=numIntents" json:"num_intents,omitempty"`
}

func (x *CountIntentsResponsePB) Reset() {
	*x = CountIntentsResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountIntentsResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountIntentsResponsePB) ProtoMessage() {}

func (x *CountIntentsResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountIntentsResponsePB.ProtoReflect.Descriptor instead.
func (*CountIntentsResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{16}
}

func (x *CountIntentsResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CountIntentsResponsePB) GetNumIntents() int64 {
	if x != nil && x.NumIntents != nil {
		return *x.NumIntents
	}
	return 0
}

type AddTableToTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId []byte       `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	AddTable *TableInfoPB `protobuf:"bytes,2,req,name=add_table,json=addTable" json:"add_table,omitempty"`
}

func (x *AddTableToTabletRequestPB) Reset() {
	*x = AddTableToTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTableToTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTableToTabletRequestPB) ProtoMessage() {}

func (x *AddTableToTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTableToTabletRequestPB.ProtoReflect.Descriptor instead.
func (*AddTableToTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{17}
}

func (x *AddTableToTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *AddTableToTabletRequestPB) GetAddTable() *TableInfoPB {
	if x != nil {
		return x.AddTable
	}
	return nil
}

type AddTableToTabletResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *AddTableToTabletResponsePB) Reset() {
	*x = AddTableToTabletResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTableToTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTableToTabletResponsePB) ProtoMessage() {}

func (x *AddTableToTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTableToTabletResponsePB.ProtoReflect.Descriptor instead.
func (*AddTableToTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{18}
}

func (x *AddTableToTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *AddTableToTabletResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type RemoveTableFromTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabletId      []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	RemoveTableId []byte `protobuf:"bytes,2,req,name=remove_table_id,json=removeTableId" json:"remove_table_id,omitempty"`
}

func (x *RemoveTableFromTabletRequestPB) Reset() {
	*x = RemoveTableFromTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableFromTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableFromTabletRequestPB) ProtoMessage() {}

func (x *RemoveTableFromTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableFromTabletRequestPB.ProtoReflect.Descriptor instead.
func (*RemoveTableFromTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{19}
}

func (x *RemoveTableFromTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *RemoveTableFromTabletRequestPB) GetRemoveTableId() []byte {
	if x != nil {
		return x.RemoveTableId
	}
	return nil
}

type RemoveTableFromTabletResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *RemoveTableFromTabletResponsePB) Reset() {
	*x = RemoveTableFromTabletResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveTableFromTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveTableFromTabletResponsePB) ProtoMessage() {}

func (x *RemoveTableFromTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveTableFromTabletResponsePB.ProtoReflect.Descriptor instead.
func (*RemoveTableFromTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{20}
}

func (x *RemoveTableFromTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *RemoveTableFromTabletResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

type SplitTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid             []byte  `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TabletId             []byte  `protobuf:"bytes,3,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	NewTablet1Id         []byte  `protobuf:"bytes,4,req,name=new_tablet1_id,json=newTablet1Id" json:"new_tablet1_id,omitempty"`
	NewTablet2Id         []byte  `protobuf:"bytes,5,req,name=new_tablet2_id,json=newTablet2Id" json:"new_tablet2_id,omitempty"`
	SplitPartitionKey    []byte  `protobuf:"bytes,6,req,name=split_partition_key,json=splitPartitionKey" json:"split_partition_key,omitempty"`
	SplitEncodedKey      []byte  `protobuf:"bytes,7,req,name=split_encoded_key,json=splitEncodedKey" json:"split_encoded_key,omitempty"`
}

func (x *SplitTabletRequestPB) Reset() {
	*x = SplitTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletRequestPB) ProtoMessage() {}

func (x *SplitTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletRequestPB.ProtoReflect.Descriptor instead.
func (*SplitTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{21}
}

func (x *SplitTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *SplitTabletRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *SplitTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *SplitTabletRequestPB) GetNewTablet1Id() []byte {
	if x != nil {
		return x.NewTablet1Id
	}
	return nil
}

func (x *SplitTabletRequestPB) GetNewTablet2Id() []byte {
	if x != nil {
		return x.NewTablet2Id
	}
	return nil
}

func (x *SplitTabletRequestPB) GetSplitPartitionKey() []byte {
	if x != nil {
		return x.SplitPartitionKey
	}
	return nil
}

func (x *SplitTabletRequestPB) GetSplitEncodedKey() []byte {
	if x != nil {
		return x.SplitEncodedKey
	}
	return nil
}

type SplitTabletResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *TabletServerErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	PropagatedHybridTime *uint64              `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
}

func (x *SplitTabletResponsePB) Reset() {
	*x = SplitTabletResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_tserver_admin_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTabletResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletResponsePB) ProtoMessage() {}

func (x *SplitTabletResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_tserver_admin_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletResponsePB.ProtoReflect.Descriptor instead.
func (*SplitTabletResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_tserver_admin_proto_rawDescGZIP(), []int{22}
}

func (x *SplitTabletResponsePB) GetError() *TabletServerErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *SplitTabletResponsePB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

var File_yb_tserver_tserver_admin_proto protoreflect.FileDescriptor

var file_yb_tserver_tserver_admin_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x0a, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0x16, 0x79, 0x62,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x79, 0x62, 0x2f,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x79, 0x62,
	0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x05, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x79,
	0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e, 0x65,
	0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x08, 0x61, 0x64, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x74,
	0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x65, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x6d,
	0x61, 0x72, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x61, 0x63,
	0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12,
	0x33, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x13, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x18, 0x73,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66,
	0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x62, 0x6f, 0x72,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x22, 0x6f, 0x0a, 0x1d, 0x45,
	0x78, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x12, 0x4e, 0x0a, 0x10,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x52, 0x0f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a,
	0x18, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x1c, 0x6d, 0x69, 0x6e, 0x5f, 0x68, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x18, 0x6d, 0x69,
	0x6e, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x6f, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x22, 0xa1, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x53, 0x61,
	0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x61, 0x66, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x08, 0x73, 0x61, 0x66, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x90, 0x03, 0x0a, 0x16, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x61, 0x74, 0x5f, 0x68, 0x79, 0x62,
	0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10,
	0x72, 0x65, 0x61, 0x64, 0x41, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a,
	0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06,
	0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x69,
	0x6e, 0x64, 0x65, 0x78, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8f, 0x02,
	0x0a, 0x17, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x75, 0x6e, 0x74, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x55, 0x6e, 0x74, 0x69,
	0x6c, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0e, 0x66, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x64, 0x73, 0x12, 0x32, 0x0a, 0x15, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x22,
	0x8f, 0x01, 0x0a, 0x19, 0x43, 0x6f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a,
	0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x53, 0x0a, 0x1a, 0x43, 0x6f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x88, 0x05, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x09, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x05, 0x20, 0x02, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x06, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x40, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x0f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x50, 0x42, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a,
	0x0a, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x50, 0x42, 0x52, 0x09, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x23, 0x0a,
	0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08,
	0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x11,
	0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x73, 0x22, 0x4f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xa7, 0x02, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x53,
	0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x74, 0x61, 0x74, 0x65, 0x3a,
	0x16, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x54, 0x4f, 0x4d,
	0x42, 0x53, 0x54, 0x4f, 0x4e, 0x45, 0x44, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x4a, 0x0a, 0x23, 0x63, 0x61, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x6f, 0x70, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x65, 0x73,
	0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x65, 0x71, 0x75, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x1d, 0x63, 0x61, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4f, 0x70, 0x69, 0x64, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x4c, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x68, 0x69, 0x64, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x4f, 0x0a, 0x16,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xa6, 0x02,
	0x0a, 0x15, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f,
	0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x73, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x2e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x73, 0x22, 0x2f, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x55, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x4f,
	0x47, 0x5f, 0x47, 0x43, 0x10, 0x02, 0x22, 0xaf, 0x01, 0x0a, 0x16, 0x46, 0x6c, 0x75, 0x73, 0x68,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x10, 0x66, 0x61, 0x69, 0x6c,
	0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x49, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x22, 0x70, 0x0a, 0x16, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x73, 0x22, 0x6d, 0x0a, 0x19, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x09, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x08, 0x61, 0x64, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x22, 0x89, 0x01, 0x0a, 0x1a, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54,
	0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65,
	0x0a, 0x1e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f,
	0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x26, 0x0a,
	0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68,
	0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xae, 0x02, 0x0a, 0x14, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12,
	0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64, 0x12, 0x34, 0x0a, 0x16,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x31, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x31, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x6e,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x32, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x07, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x45, 0x6e, 0x63,
	0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x22, 0x84, 0x01, 0x0a, 0x15, 0x53, 0x70, 0x6c, 0x69,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x35, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70,
	0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67,
	0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x2a, 0x82,
	0x01, 0x0a, 0x16, 0x54, 0x53, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x0c, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0xe7, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4d, 0x41, 0x4e, 0x41, 0x47,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x49, 0x4e, 0x47, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x52, 0x55, 0x4e,
	0x4e, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45,
	0x52, 0x5f, 0x51, 0x55, 0x49, 0x45, 0x53, 0x43, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a,
	0x10, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x52, 0x5f, 0x53, 0x48, 0x55, 0x54, 0x44, 0x4f, 0x57,
	0x4e, 0x10, 0x03, 0x32, 0xe5, 0x08, 0x0a, 0x18, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x55, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x58,
	0x0a, 0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x23, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53,
	0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x61, 0x66, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x0d,
	0x42, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x22, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x61, 0x63, 0x6b, 0x66,
	0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42,
	0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x59, 0x0a, 0x0c, 0x42, 0x61, 0x63, 0x6b, 0x66, 0x69,
	0x6c, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x61, 0x0a, 0x10, 0x43, 0x6f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x70, 0x61, 0x72, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x55, 0x0a, 0x0c, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x55, 0x0a, 0x0c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x21, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x22,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x61, 0x0a, 0x10, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x70, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x2a,
	0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e,
	0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x52, 0x0a, 0x0b, 0x53, 0x70, 0x6c, 0x69, 0x74,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x12, 0x20, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x21, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x42, 0x10, 0x0a, 0x0e, 0x6f,
	0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
}

var (
	file_yb_tserver_tserver_admin_proto_rawDescOnce sync.Once
	file_yb_tserver_tserver_admin_proto_rawDescData = file_yb_tserver_tserver_admin_proto_rawDesc
)

func file_yb_tserver_tserver_admin_proto_rawDescGZIP() []byte {
	file_yb_tserver_tserver_admin_proto_rawDescOnce.Do(func() {
		file_yb_tserver_tserver_admin_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_tserver_tserver_admin_proto_rawDescData)
	})
	return file_yb_tserver_tserver_admin_proto_rawDescData
}

var file_yb_tserver_tserver_admin_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yb_tserver_tserver_admin_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_yb_tserver_tserver_admin_proto_goTypes = []interface{}{
	(TSTabletManagerStatePB)(0),             // 0: yb.tserver.TSTabletManagerStatePB
	(FlushTabletsRequestPB_Operation)(0),    // 1: yb.tserver.FlushTabletsRequestPB.Operation
	(*ChangeMetadataRequestPB)(nil),         // 2: yb.tserver.ChangeMetadataRequestPB
	(*ExportedTabletMetadataChanges)(nil),   // 3: yb.tserver.ExportedTabletMetadataChanges
	(*ChangeMetadataResponsePB)(nil),        // 4: yb.tserver.ChangeMetadataResponsePB
	(*GetSafeTimeRequestPB)(nil),            // 5: yb.tserver.GetSafeTimeRequestPB
	(*GetSafeTimeResponsePB)(nil),           // 6: yb.tserver.GetSafeTimeResponsePB
	(*BackfillIndexRequestPB)(nil),          // 7: yb.tserver.BackfillIndexRequestPB
	(*BackfillIndexResponsePB)(nil),         // 8: yb.tserver.BackfillIndexResponsePB
	(*CopartitionTableRequestPB)(nil),       // 9: yb.tserver.CopartitionTableRequestPB
	(*CopartitionTableResponsePB)(nil),      // 10: yb.tserver.CopartitionTableResponsePB
	(*CreateTabletRequestPB)(nil),           // 11: yb.tserver.CreateTabletRequestPB
	(*CreateTabletResponsePB)(nil),          // 12: yb.tserver.CreateTabletResponsePB
	(*DeleteTabletRequestPB)(nil),           // 13: yb.tserver.DeleteTabletRequestPB
	(*DeleteTabletResponsePB)(nil),          // 14: yb.tserver.DeleteTabletResponsePB
	(*FlushTabletsRequestPB)(nil),           // 15: yb.tserver.FlushTabletsRequestPB
	(*FlushTabletsResponsePB)(nil),          // 16: yb.tserver.FlushTabletsResponsePB
	(*CountIntentsRequestPB)(nil),           // 17: yb.tserver.CountIntentsRequestPB
	(*CountIntentsResponsePB)(nil),          // 18: yb.tserver.CountIntentsResponsePB
	(*AddTableToTabletRequestPB)(nil),       // 19: yb.tserver.AddTableToTabletRequestPB
	(*AddTableToTabletResponsePB)(nil),      // 20: yb.tserver.AddTableToTabletResponsePB
	(*RemoveTableFromTabletRequestPB)(nil),  // 21: yb.tserver.RemoveTableFromTabletRequestPB
	(*RemoveTableFromTabletResponsePB)(nil), // 22: yb.tserver.RemoveTableFromTabletResponsePB
	(*SplitTabletRequestPB)(nil),            // 23: yb.tserver.SplitTabletRequestPB
	(*SplitTabletResponsePB)(nil),           // 24: yb.tserver.SplitTabletResponsePB
	(*SchemaPB)(nil),                        // 25: yb.SchemaPB
	(*IndexInfoPB)(nil),                     // 26: yb.IndexInfoPB
	(*TableInfoPB)(nil),                     // 27: yb.tablet.TableInfoPB
	(*TabletServerErrorPB)(nil),             // 28: yb.tserver.TabletServerErrorPB
	(*PartitionPB)(nil),                     // 29: yb.PartitionPB
	(TableType)(0),                          // 30: yb.TableType
	(*PartitionSchemaPB)(nil),               // 31: yb.PartitionSchemaPB
	(*RaftConfigPB)(nil),                    // 32: yb.consensus.RaftConfigPB
	(TabletDataState)(0),                    // 33: yb.tablet.TabletDataState
}
var file_yb_tserver_tserver_admin_proto_depIdxs = []int32{
	25, // 0: yb.tserver.ChangeMetadataRequestPB.schema:type_name -> yb.SchemaPB
	26, // 1: yb.tserver.ChangeMetadataRequestPB.indexes:type_name -> yb.IndexInfoPB
	27, // 2: yb.tserver.ChangeMetadataRequestPB.add_table:type_name -> yb.tablet.TableInfoPB
	2,  // 3: yb.tserver.ExportedTabletMetadataChanges.metadata_changes:type_name -> yb.tserver.ChangeMetadataRequestPB
	28, // 4: yb.tserver.ChangeMetadataResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 5: yb.tserver.GetSafeTimeResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	26, // 6: yb.tserver.BackfillIndexRequestPB.indexes:type_name -> yb.IndexInfoPB
	28, // 7: yb.tserver.BackfillIndexResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 8: yb.tserver.CopartitionTableResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	29, // 9: yb.tserver.CreateTabletRequestPB.partition:type_name -> yb.PartitionPB
	30, // 10: yb.tserver.CreateTabletRequestPB.table_type:type_name -> yb.TableType
	25, // 11: yb.tserver.CreateTabletRequestPB.schema:type_name -> yb.SchemaPB
	31, // 12: yb.tserver.CreateTabletRequestPB.partition_schema:type_name -> yb.PartitionSchemaPB
	32, // 13: yb.tserver.CreateTabletRequestPB.config:type_name -> yb.consensus.RaftConfigPB
	26, // 14: yb.tserver.CreateTabletRequestPB.index_info:type_name -> yb.IndexInfoPB
	28, // 15: yb.tserver.CreateTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	33, // 16: yb.tserver.DeleteTabletRequestPB.delete_type:type_name -> yb.tablet.TabletDataState
	28, // 17: yb.tserver.DeleteTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	1,  // 18: yb.tserver.FlushTabletsRequestPB.operation:type_name -> yb.tserver.FlushTabletsRequestPB.Operation
	28, // 19: yb.tserver.FlushTabletsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 20: yb.tserver.CountIntentsResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	27, // 21: yb.tserver.AddTableToTabletRequestPB.add_table:type_name -> yb.tablet.TableInfoPB
	28, // 22: yb.tserver.AddTableToTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 23: yb.tserver.RemoveTableFromTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	28, // 24: yb.tserver.SplitTabletResponsePB.error:type_name -> yb.tserver.TabletServerErrorPB
	11, // 25: yb.tserver.TabletServerAdminService.CreateTablet:input_type -> yb.tserver.CreateTabletRequestPB
	13, // 26: yb.tserver.TabletServerAdminService.DeleteTablet:input_type -> yb.tserver.DeleteTabletRequestPB
	2,  // 27: yb.tserver.TabletServerAdminService.AlterSchema:input_type -> yb.tserver.ChangeMetadataRequestPB
	5,  // 28: yb.tserver.TabletServerAdminService.GetSafeTime:input_type -> yb.tserver.GetSafeTimeRequestPB
	7,  // 29: yb.tserver.TabletServerAdminService.BackfillIndex:input_type -> yb.tserver.BackfillIndexRequestPB
	2,  // 30: yb.tserver.TabletServerAdminService.BackfillDone:input_type -> yb.tserver.ChangeMetadataRequestPB
	9,  // 31: yb.tserver.TabletServerAdminService.CopartitionTable:input_type -> yb.tserver.CopartitionTableRequestPB
	15, // 32: yb.tserver.TabletServerAdminService.FlushTablets:input_type -> yb.tserver.FlushTabletsRequestPB
	17, // 33: yb.tserver.TabletServerAdminService.CountIntents:input_type -> yb.tserver.CountIntentsRequestPB
	19, // 34: yb.tserver.TabletServerAdminService.AddTableToTablet:input_type -> yb.tserver.AddTableToTabletRequestPB
	21, // 35: yb.tserver.TabletServerAdminService.RemoveTableFromTablet:input_type -> yb.tserver.RemoveTableFromTabletRequestPB
	23, // 36: yb.tserver.TabletServerAdminService.SplitTablet:input_type -> yb.tserver.SplitTabletRequestPB
	12, // 37: yb.tserver.TabletServerAdminService.CreateTablet:output_type -> yb.tserver.CreateTabletResponsePB
	14, // 38: yb.tserver.TabletServerAdminService.DeleteTablet:output_type -> yb.tserver.DeleteTabletResponsePB
	4,  // 39: yb.tserver.TabletServerAdminService.AlterSchema:output_type -> yb.tserver.ChangeMetadataResponsePB
	6,  // 40: yb.tserver.TabletServerAdminService.GetSafeTime:output_type -> yb.tserver.GetSafeTimeResponsePB
	8,  // 41: yb.tserver.TabletServerAdminService.BackfillIndex:output_type -> yb.tserver.BackfillIndexResponsePB
	4,  // 42: yb.tserver.TabletServerAdminService.BackfillDone:output_type -> yb.tserver.ChangeMetadataResponsePB
	10, // 43: yb.tserver.TabletServerAdminService.CopartitionTable:output_type -> yb.tserver.CopartitionTableResponsePB
	16, // 44: yb.tserver.TabletServerAdminService.FlushTablets:output_type -> yb.tserver.FlushTabletsResponsePB
	18, // 45: yb.tserver.TabletServerAdminService.CountIntents:output_type -> yb.tserver.CountIntentsResponsePB
	20, // 46: yb.tserver.TabletServerAdminService.AddTableToTablet:output_type -> yb.tserver.AddTableToTabletResponsePB
	22, // 47: yb.tserver.TabletServerAdminService.RemoveTableFromTablet:output_type -> yb.tserver.RemoveTableFromTabletResponsePB
	24, // 48: yb.tserver.TabletServerAdminService.SplitTablet:output_type -> yb.tserver.SplitTabletResponsePB
	37, // [37:49] is the sub-list for method output_type
	25, // [25:37] is the sub-list for method input_type
	25, // [25:25] is the sub-list for extension type_name
	25, // [25:25] is the sub-list for extension extendee
	0,  // [0:25] is the sub-list for field type_name
}

func init() { file_yb_tserver_tserver_admin_proto_init() }
func file_yb_tserver_tserver_admin_proto_init() {
	if File_yb_tserver_tserver_admin_proto != nil {
		return
	}
	file_yb_common_common_proto_init()
	file_yb_consensus_consensus_metadata_proto_init()
	file_yb_tablet_tablet_metadata_proto_init()
	file_yb_tserver_tserver_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_tserver_tserver_admin_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMetadataRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportedTabletMetadataChanges); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMetadataResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSafeTimeRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSafeTimeResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillIndexRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BackfillIndexResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopartitionTableRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopartitionTableResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTabletResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTabletResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushTabletsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushTabletsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountIntentsRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountIntentsResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTableToTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTableToTabletResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableFromTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveTableFromTabletResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_tserver_admin_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTabletResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_tserver_tserver_admin_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_tserver_tserver_admin_proto_goTypes,
		DependencyIndexes: file_yb_tserver_tserver_admin_proto_depIdxs,
		EnumInfos:         file_yb_tserver_tserver_admin_proto_enumTypes,
		MessageInfos:      file_yb_tserver_tserver_admin_proto_msgTypes,
	}.Build()
	File_yb_tserver_tserver_admin_proto = out.File
	file_yb_tserver_tserver_admin_proto_rawDesc = nil
	file_yb_tserver_tserver_admin_proto_goTypes = nil
	file_yb_tserver_tserver_admin_proto_depIdxs = nil
}
