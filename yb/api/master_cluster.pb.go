// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/master/master_cluster.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListTabletServersRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true, return only the tservers which are in the primary/sync cluster.
	PrimaryOnly *bool `protobuf:"varint,1,opt,name=primary_only,json=primaryOnly,def=0" json:"primary_only,omitempty"`
}

// Default values for ListTabletServersRequestPB fields.
const (
	Default_ListTabletServersRequestPB_PrimaryOnly = bool(false)
)

func (x *ListTabletServersRequestPB) Reset() {
	*x = ListTabletServersRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletServersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletServersRequestPB) ProtoMessage() {}

func (x *ListTabletServersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletServersRequestPB.ProtoReflect.Descriptor instead.
func (*ListTabletServersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{0}
}

func (x *ListTabletServersRequestPB) GetPrimaryOnly() bool {
	if x != nil && x.PrimaryOnly != nil {
		return *x.PrimaryOnly
	}
	return Default_ListTabletServersRequestPB_PrimaryOnly
}

type ListTabletServersResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *MasterErrorPB                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Servers []*ListTabletServersResponsePB_Entry `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
}

func (x *ListTabletServersResponsePB) Reset() {
	*x = ListTabletServersResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletServersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletServersResponsePB) ProtoMessage() {}

func (x *ListTabletServersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletServersResponsePB.ProtoReflect.Descriptor instead.
func (*ListTabletServersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{1}
}

func (x *ListTabletServersResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListTabletServersResponsePB) GetServers() []*ListTabletServersResponsePB_Entry {
	if x != nil {
		return x.Servers
	}
	return nil
}

type ListLiveTabletServersRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If set to true, return only the live tservers which are in the primary/sync cluster.
	PrimaryOnly *bool `protobuf:"varint,1,opt,name=primary_only,json=primaryOnly,def=0" json:"primary_only,omitempty"`
}

// Default values for ListLiveTabletServersRequestPB fields.
const (
	Default_ListLiveTabletServersRequestPB_PrimaryOnly = bool(false)
)

func (x *ListLiveTabletServersRequestPB) Reset() {
	*x = ListLiveTabletServersRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLiveTabletServersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLiveTabletServersRequestPB) ProtoMessage() {}

func (x *ListLiveTabletServersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLiveTabletServersRequestPB.ProtoReflect.Descriptor instead.
func (*ListLiveTabletServersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{2}
}

func (x *ListLiveTabletServersRequestPB) GetPrimaryOnly() bool {
	if x != nil && x.PrimaryOnly != nil {
		return *x.PrimaryOnly
	}
	return Default_ListLiveTabletServersRequestPB_PrimaryOnly
}

type ListLiveTabletServersResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error   *MasterErrorPB                           `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Servers []*ListLiveTabletServersResponsePB_Entry `protobuf:"bytes,2,rep,name=servers" json:"servers,omitempty"`
}

func (x *ListLiveTabletServersResponsePB) Reset() {
	*x = ListLiveTabletServersResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLiveTabletServersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLiveTabletServersResponsePB) ProtoMessage() {}

func (x *ListLiveTabletServersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLiveTabletServersResponsePB.ProtoReflect.Descriptor instead.
func (*ListLiveTabletServersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{3}
}

func (x *ListLiveTabletServersResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ListLiveTabletServersResponsePB) GetServers() []*ListLiveTabletServersResponsePB_Entry {
	if x != nil {
		return x.Servers
	}
	return nil
}

// ListMastersRequest/Response: get information about all of the known
// master servers, including this node from the in-memory options.
type ListMastersRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMastersRequestPB) Reset() {
	*x = ListMastersRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMastersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMastersRequestPB) ProtoMessage() {}

func (x *ListMastersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMastersRequestPB.ProtoReflect.Descriptor instead.
func (*ListMastersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{4}
}

type ListMastersResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An entry for each individual master server.
	Masters []*ServerEntryPB `protobuf:"bytes,1,rep,name=masters" json:"masters,omitempty"`
	// Set only if there's an error in retrieving the list of servers or
	// in getting this server's own local registration information.
	Error *MasterErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *ListMastersResponsePB) Reset() {
	*x = ListMastersResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMastersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMastersResponsePB) ProtoMessage() {}

func (x *ListMastersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMastersResponsePB.ProtoReflect.Descriptor instead.
func (*ListMastersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{5}
}

func (x *ListMastersResponsePB) GetMasters() []*ServerEntryPB {
	if x != nil {
		return x.Masters
	}
	return nil
}

func (x *ListMastersResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// ListMasterRaftPeersRequest/Response: get information about all of the known servers
// which are part of this master's version of the currently active Raft quorum. This also
// captures any inflight change config operations which are not yet tracked by in-memory options
// and hence can give a more current picture of peers compared with ListMastersResponse.
type ListMasterRaftPeersRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListMasterRaftPeersRequestPB) Reset() {
	*x = ListMasterRaftPeersRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMasterRaftPeersRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterRaftPeersRequestPB) ProtoMessage() {}

func (x *ListMasterRaftPeersRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterRaftPeersRequestPB.ProtoReflect.Descriptor instead.
func (*ListMasterRaftPeersRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{6}
}

type ListMasterRaftPeersResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An entry for each individual master server.
	Masters []*RaftPeerPB `protobuf:"bytes,1,rep,name=masters" json:"masters,omitempty"`
	// Set only if there's an error in retrieving the list of servers or
	// in getting this server's own local registration information.
	Error *MasterErrorPB `protobuf:"bytes,2,opt,name=error" json:"error,omitempty"`
}

func (x *ListMasterRaftPeersResponsePB) Reset() {
	*x = ListMasterRaftPeersResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMasterRaftPeersResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMasterRaftPeersResponsePB) ProtoMessage() {}

func (x *ListMasterRaftPeersResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMasterRaftPeersResponsePB.ProtoReflect.Descriptor instead.
func (*ListMasterRaftPeersResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{7}
}

func (x *ListMasterRaftPeersResponsePB) GetMasters() []*RaftPeerPB {
	if x != nil {
		return x.Masters
	}
	return nil
}

func (x *ListMasterRaftPeersResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// GetMasterRegistrationRequest/Response: get the instance id and
// HTTP/RPC addresses for this Master server.
type GetMasterRegistrationRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMasterRegistrationRequestPB) Reset() {
	*x = GetMasterRegistrationRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterRegistrationRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterRegistrationRequestPB) ProtoMessage() {}

func (x *GetMasterRegistrationRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterRegistrationRequestPB.ProtoReflect.Descriptor instead.
func (*GetMasterRegistrationRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{8}
}

// TODO: Just use ServerRegistration here.
type GetMasterRegistrationResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Node instance information is always set.
	InstanceId *NodeInstancePB `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	// These fields are optional, as they won't be set if there's an
	// error retrieving the host/port information.
	Registration *ServerRegistrationPB `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	// This server's role in the consensus configuration.
	Role *PeerRole `protobuf:"varint,3,opt,name=role,enum=yb.PeerRole" json:"role,omitempty"`
	// Set if there an error retrieving the registration information.
	Error *MasterErrorPB `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
}

func (x *GetMasterRegistrationResponsePB) Reset() {
	*x = GetMasterRegistrationResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterRegistrationResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterRegistrationResponsePB) ProtoMessage() {}

func (x *GetMasterRegistrationResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterRegistrationResponsePB.ProtoReflect.Descriptor instead.
func (*GetMasterRegistrationResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{9}
}

func (x *GetMasterRegistrationResponsePB) GetInstanceId() *NodeInstancePB {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *GetMasterRegistrationResponsePB) GetRegistration() *ServerRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *GetMasterRegistrationResponsePB) GetRole() PeerRole {
	if x != nil && x.Role != nil {
		return *x.Role
	}
	return PeerRole_FOLLOWER
}

func (x *GetMasterRegistrationResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get a master's notion being ready as the leader.
// NOTE: Should be used only for unit testing purposes.
type IsMasterLeaderReadyRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsMasterLeaderReadyRequestPB) Reset() {
	*x = IsMasterLeaderReadyRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMasterLeaderReadyRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMasterLeaderReadyRequestPB) ProtoMessage() {}

func (x *IsMasterLeaderReadyRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMasterLeaderReadyRequestPB.ProtoReflect.Descriptor instead.
func (*IsMasterLeaderReadyRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{10}
}

// When no errors, the master will be deemed ready as per its catalog manager layer.
type IsMasterLeaderReadyResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *IsMasterLeaderReadyResponsePB) Reset() {
	*x = IsMasterLeaderReadyResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsMasterLeaderReadyResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsMasterLeaderReadyResponsePB) ProtoMessage() {}

func (x *IsMasterLeaderReadyResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsMasterLeaderReadyResponsePB.ProtoReflect.Descriptor instead.
func (*IsMasterLeaderReadyResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{11}
}

func (x *IsMasterLeaderReadyResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Make the masters dump all their in-memory and on-disk state to their respective log files.
// Sent to the master leader first, and then propogated to its peers if peers_also is set to true.
type DumpMasterStateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Dump on-disk state known to this master - including sys.catalog and raft config related info
	OnDisk *bool `protobuf:"varint,1,opt,name=on_disk,json=onDisk,def=1" json:"on_disk,omitempty"`
	// If set to true, the leader sends request to all current peers to dump their state too.
	// The on_disk is sent along to peers too.
	PeersAlso *bool `protobuf:"varint,2,opt,name=peers_also,json=peersAlso,def=0" json:"peers_also,omitempty"`
	// If set to true, the dump will be returned back as a string in the response.
	// Else the dump will be saved into the master respective log files.
	ReturnDumpAsString *bool `protobuf:"varint,3,opt,name=return_dump_as_string,json=returnDumpAsString,def=0" json:"return_dump_as_string,omitempty"`
}

// Default values for DumpMasterStateRequestPB fields.
const (
	Default_DumpMasterStateRequestPB_OnDisk             = bool(true)
	Default_DumpMasterStateRequestPB_PeersAlso          = bool(false)
	Default_DumpMasterStateRequestPB_ReturnDumpAsString = bool(false)
)

func (x *DumpMasterStateRequestPB) Reset() {
	*x = DumpMasterStateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpMasterStateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMasterStateRequestPB) ProtoMessage() {}

func (x *DumpMasterStateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMasterStateRequestPB.ProtoReflect.Descriptor instead.
func (*DumpMasterStateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{12}
}

func (x *DumpMasterStateRequestPB) GetOnDisk() bool {
	if x != nil && x.OnDisk != nil {
		return *x.OnDisk
	}
	return Default_DumpMasterStateRequestPB_OnDisk
}

func (x *DumpMasterStateRequestPB) GetPeersAlso() bool {
	if x != nil && x.PeersAlso != nil {
		return *x.PeersAlso
	}
	return Default_DumpMasterStateRequestPB_PeersAlso
}

func (x *DumpMasterStateRequestPB) GetReturnDumpAsString() bool {
	if x != nil && x.ReturnDumpAsString != nil {
		return *x.ReturnDumpAsString
	}
	return Default_DumpMasterStateRequestPB_ReturnDumpAsString
}

type DumpMasterStateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Dump  *string        `protobuf:"bytes,2,opt,name=dump" json:"dump,omitempty"`
}

func (x *DumpMasterStateResponsePB) Reset() {
	*x = DumpMasterStateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpMasterStateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpMasterStateResponsePB) ProtoMessage() {}

func (x *DumpMasterStateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpMasterStateResponsePB.ProtoReflect.Descriptor instead.
func (*DumpMasterStateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{13}
}

func (x *DumpMasterStateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *DumpMasterStateResponsePB) GetDump() string {
	if x != nil && x.Dump != nil {
		return *x.Dump
	}
	return ""
}

type ChangeLoadBalancerStateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsEnabled *bool `protobuf:"varint,1,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (x *ChangeLoadBalancerStateRequestPB) Reset() {
	*x = ChangeLoadBalancerStateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeLoadBalancerStateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLoadBalancerStateRequestPB) ProtoMessage() {}

func (x *ChangeLoadBalancerStateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLoadBalancerStateRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeLoadBalancerStateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{14}
}

func (x *ChangeLoadBalancerStateRequestPB) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

type ChangeLoadBalancerStateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *ChangeLoadBalancerStateResponsePB) Reset() {
	*x = ChangeLoadBalancerStateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeLoadBalancerStateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeLoadBalancerStateResponsePB) ProtoMessage() {}

func (x *ChangeLoadBalancerStateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeLoadBalancerStateResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeLoadBalancerStateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{15}
}

func (x *ChangeLoadBalancerStateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetLoadBalancerStateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoadBalancerStateRequestPB) Reset() {
	*x = GetLoadBalancerStateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerStateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerStateRequestPB) ProtoMessage() {}

func (x *GetLoadBalancerStateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerStateRequestPB.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerStateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{16}
}

type GetLoadBalancerStateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error     *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	IsEnabled *bool          `protobuf:"varint,2,opt,name=is_enabled,json=isEnabled" json:"is_enabled,omitempty"`
}

func (x *GetLoadBalancerStateResponsePB) Reset() {
	*x = GetLoadBalancerStateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadBalancerStateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadBalancerStateResponsePB) ProtoMessage() {}

func (x *GetLoadBalancerStateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadBalancerStateResponsePB.ProtoReflect.Descriptor instead.
func (*GetLoadBalancerStateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{17}
}

func (x *GetLoadBalancerStateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLoadBalancerStateResponsePB) GetIsEnabled() bool {
	if x != nil && x.IsEnabled != nil {
		return *x.IsEnabled
	}
	return false
}

// Update an ex-peer about its removal from the cluster.
type RemovedMasterUpdateRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemovedMasterUpdateRequestPB) Reset() {
	*x = RemovedMasterUpdateRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovedMasterUpdateRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovedMasterUpdateRequestPB) ProtoMessage() {}

func (x *RemovedMasterUpdateRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovedMasterUpdateRequestPB.ProtoReflect.Descriptor instead.
func (*RemovedMasterUpdateRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{18}
}

type RemovedMasterUpdateResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *RemovedMasterUpdateResponsePB) Reset() {
	*x = RemovedMasterUpdateResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemovedMasterUpdateResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemovedMasterUpdateResponsePB) ProtoMessage() {}

func (x *RemovedMasterUpdateResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemovedMasterUpdateResponsePB.ProtoReflect.Descriptor instead.
func (*RemovedMasterUpdateResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{19}
}

func (x *RemovedMasterUpdateResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type SetPreferredZonesRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PreferredZones []*CloudInfoPB `protobuf:"bytes,1,rep,name=preferred_zones,json=preferredZones" json:"preferred_zones,omitempty"`
}

func (x *SetPreferredZonesRequestPB) Reset() {
	*x = SetPreferredZonesRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPreferredZonesRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPreferredZonesRequestPB) ProtoMessage() {}

func (x *SetPreferredZonesRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPreferredZonesRequestPB.ProtoReflect.Descriptor instead.
func (*SetPreferredZonesRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{20}
}

func (x *SetPreferredZonesRequestPB) GetPreferredZones() []*CloudInfoPB {
	if x != nil {
		return x.PreferredZones
	}
	return nil
}

type SetPreferredZonesResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *SetPreferredZonesResponsePB) Reset() {
	*x = SetPreferredZonesResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetPreferredZonesResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetPreferredZonesResponsePB) ProtoMessage() {}

func (x *SetPreferredZonesResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetPreferredZonesResponsePB.ProtoReflect.Descriptor instead.
func (*SetPreferredZonesResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{21}
}

func (x *SetPreferredZonesResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type GetMasterClusterConfigRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMasterClusterConfigRequestPB) Reset() {
	*x = GetMasterClusterConfigRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterClusterConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterClusterConfigRequestPB) ProtoMessage() {}

func (x *GetMasterClusterConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterClusterConfigRequestPB.ProtoReflect.Descriptor instead.
func (*GetMasterClusterConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{22}
}

type GetMasterClusterConfigResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error         *MasterErrorPB           `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	ClusterConfig *SysClusterConfigEntryPB `protobuf:"bytes,2,opt,name=cluster_config,json=clusterConfig" json:"cluster_config,omitempty"`
}

func (x *GetMasterClusterConfigResponsePB) Reset() {
	*x = GetMasterClusterConfigResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMasterClusterConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMasterClusterConfigResponsePB) ProtoMessage() {}

func (x *GetMasterClusterConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMasterClusterConfigResponsePB.ProtoReflect.Descriptor instead.
func (*GetMasterClusterConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{23}
}

func (x *GetMasterClusterConfigResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetMasterClusterConfigResponsePB) GetClusterConfig() *SysClusterConfigEntryPB {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

type ChangeMasterClusterConfigRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClusterConfig *SysClusterConfigEntryPB `protobuf:"bytes,1,opt,name=cluster_config,json=clusterConfig" json:"cluster_config,omitempty"`
}

func (x *ChangeMasterClusterConfigRequestPB) Reset() {
	*x = ChangeMasterClusterConfigRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMasterClusterConfigRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMasterClusterConfigRequestPB) ProtoMessage() {}

func (x *ChangeMasterClusterConfigRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMasterClusterConfigRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeMasterClusterConfigRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{24}
}

func (x *ChangeMasterClusterConfigRequestPB) GetClusterConfig() *SysClusterConfigEntryPB {
	if x != nil {
		return x.ClusterConfig
	}
	return nil
}

type ChangeMasterClusterConfigResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *ChangeMasterClusterConfigResponsePB) Reset() {
	*x = ChangeMasterClusterConfigResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMasterClusterConfigResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMasterClusterConfigResponsePB) ProtoMessage() {}

func (x *ChangeMasterClusterConfigResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMasterClusterConfigResponsePB.ProtoReflect.Descriptor instead.
func (*ChangeMasterClusterConfigResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{25}
}

func (x *ChangeMasterClusterConfigResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Get the percentage of tablet data that got moved as part of a blacklist config change.
// Handled by the master leader and picked up by new leader on failover.
type GetLoadMovePercentRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLoadMovePercentRequestPB) Reset() {
	*x = GetLoadMovePercentRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadMovePercentRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadMovePercentRequestPB) ProtoMessage() {}

func (x *GetLoadMovePercentRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadMovePercentRequestPB.ProtoReflect.Descriptor instead.
func (*GetLoadMovePercentRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{26}
}

// When no errors, the percent reflects the progress of load removal from the blacklisted tservers.
type GetLoadMovePercentResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	// To be deprecated. Replaced by "100 * (total - remaining) / total".
	Percent   *float64 `protobuf:"fixed64,2,opt,name=percent" json:"percent,omitempty"`
	Remaining *uint64  `protobuf:"varint,3,opt,name=remaining" json:"remaining,omitempty"`
	Total     *uint64  `protobuf:"varint,4,opt,name=total" json:"total,omitempty"`
}

func (x *GetLoadMovePercentResponsePB) Reset() {
	*x = GetLoadMovePercentResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLoadMovePercentResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLoadMovePercentResponsePB) ProtoMessage() {}

func (x *GetLoadMovePercentResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLoadMovePercentResponsePB.ProtoReflect.Descriptor instead.
func (*GetLoadMovePercentResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{27}
}

func (x *GetLoadMovePercentResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *GetLoadMovePercentResponsePB) GetPercent() float64 {
	if x != nil && x.Percent != nil {
		return *x.Percent
	}
	return 0
}

func (x *GetLoadMovePercentResponsePB) GetRemaining() uint64 {
	if x != nil && x.Remaining != nil {
		return *x.Remaining
	}
	return 0
}

func (x *GetLoadMovePercentResponsePB) GetTotal() uint64 {
	if x != nil && x.Total != nil {
		return *x.Total
	}
	return 0
}

// Get the percentage of tablet leadership that got moved as part of a leader blacklist config
// change. Handled by the master leader and picked up by new leader on failover.
type GetLeaderBlacklistPercentRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLeaderBlacklistPercentRequestPB) Reset() {
	*x = GetLeaderBlacklistPercentRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLeaderBlacklistPercentRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLeaderBlacklistPercentRequestPB) ProtoMessage() {}

func (x *GetLeaderBlacklistPercentRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLeaderBlacklistPercentRequestPB.ProtoReflect.Descriptor instead.
func (*GetLeaderBlacklistPercentRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{28}
}

// When no errors, the master leader will have balanced all the load across the live tservers.
// The client can send in an optional value for the expected number of servers. If the master
// finds fewer alive in its snapshot than these, it will consider the load imbalanced.
type IsLoadBalancedRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExpectedNumServers *int32 `protobuf:"varint,1,opt,name=expected_num_servers,json=expectedNumServers" json:"expected_num_servers,omitempty"`
}

func (x *IsLoadBalancedRequestPB) Reset() {
	*x = IsLoadBalancedRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancedRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancedRequestPB) ProtoMessage() {}

func (x *IsLoadBalancedRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancedRequestPB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancedRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{29}
}

func (x *IsLoadBalancedRequestPB) GetExpectedNumServers() int32 {
	if x != nil && x.ExpectedNumServers != nil {
		return *x.ExpectedNumServers
	}
	return 0
}

type IsLoadBalancedResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any error being set implies that the load is not balanced across the servers.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *IsLoadBalancedResponsePB) Reset() {
	*x = IsLoadBalancedResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancedResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancedResponsePB) ProtoMessage() {}

func (x *IsLoadBalancedResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancedResponsePB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancedResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{30}
}

func (x *IsLoadBalancedResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

// Is load balancer idle.
type IsLoadBalancerIdleRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IsLoadBalancerIdleRequestPB) Reset() {
	*x = IsLoadBalancerIdleRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancerIdleRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancerIdleRequestPB) ProtoMessage() {}

func (x *IsLoadBalancerIdleRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancerIdleRequestPB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancerIdleRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{31}
}

// When no errors, load balancer is idle.
type IsLoadBalancerIdleResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *IsLoadBalancerIdleResponsePB) Reset() {
	*x = IsLoadBalancerIdleResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IsLoadBalancerIdleResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IsLoadBalancerIdleResponsePB) ProtoMessage() {}

func (x *IsLoadBalancerIdleResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IsLoadBalancerIdleResponsePB.ProtoReflect.Descriptor instead.
func (*IsLoadBalancerIdleResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{32}
}

func (x *IsLoadBalancerIdleResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type AreLeadersOnPreferredOnlyRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AreLeadersOnPreferredOnlyRequestPB) Reset() {
	*x = AreLeadersOnPreferredOnlyRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreLeadersOnPreferredOnlyRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreLeadersOnPreferredOnlyRequestPB) ProtoMessage() {}

func (x *AreLeadersOnPreferredOnlyRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreLeadersOnPreferredOnlyRequestPB.ProtoReflect.Descriptor instead.
func (*AreLeadersOnPreferredOnlyRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{33}
}

type AreLeadersOnPreferredOnlyResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Any error being set implies that the leader load is not balanced across the servers.
	Error *MasterErrorPB `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
}

func (x *AreLeadersOnPreferredOnlyResponsePB) Reset() {
	*x = AreLeadersOnPreferredOnlyResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AreLeadersOnPreferredOnlyResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AreLeadersOnPreferredOnlyResponsePB) ProtoMessage() {}

func (x *AreLeadersOnPreferredOnlyResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AreLeadersOnPreferredOnlyResponsePB.ProtoReflect.Descriptor instead.
func (*AreLeadersOnPreferredOnlyResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{34}
}

func (x *AreLeadersOnPreferredOnlyResponsePB) GetError() *MasterErrorPB {
	if x != nil {
		return x.Error
	}
	return nil
}

type ListTabletServersResponsePB_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId           *NodeInstancePB   `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Registration         *TSRegistrationPB `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	MillisSinceHeartbeat *int32            `protobuf:"varint,3,opt,name=millis_since_heartbeat,json=millisSinceHeartbeat" json:"millis_since_heartbeat,omitempty"`
	Alive                *bool             `protobuf:"varint,4,opt,name=alive" json:"alive,omitempty"`
	Metrics              *TServerMetricsPB `protobuf:"bytes,5,opt,name=metrics" json:"metrics,omitempty"`
}

func (x *ListTabletServersResponsePB_Entry) Reset() {
	*x = ListTabletServersResponsePB_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTabletServersResponsePB_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTabletServersResponsePB_Entry) ProtoMessage() {}

func (x *ListTabletServersResponsePB_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTabletServersResponsePB_Entry.ProtoReflect.Descriptor instead.
func (*ListTabletServersResponsePB_Entry) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{1, 0}
}

func (x *ListTabletServersResponsePB_Entry) GetInstanceId() *NodeInstancePB {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *ListTabletServersResponsePB_Entry) GetRegistration() *TSRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *ListTabletServersResponsePB_Entry) GetMillisSinceHeartbeat() int32 {
	if x != nil && x.MillisSinceHeartbeat != nil {
		return *x.MillisSinceHeartbeat
	}
	return 0
}

func (x *ListTabletServersResponsePB_Entry) GetAlive() bool {
	if x != nil && x.Alive != nil {
		return *x.Alive
	}
	return false
}

func (x *ListTabletServersResponsePB_Entry) GetMetrics() *TServerMetricsPB {
	if x != nil {
		return x.Metrics
	}
	return nil
}

type ListLiveTabletServersResponsePB_Entry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InstanceId        *NodeInstancePB   `protobuf:"bytes,1,req,name=instance_id,json=instanceId" json:"instance_id,omitempty"`
	Registration      *TSRegistrationPB `protobuf:"bytes,2,opt,name=registration" json:"registration,omitempty"`
	IsFromReadReplica *bool             `protobuf:"varint,3,opt,name=isFromReadReplica" json:"isFromReadReplica,omitempty"`
}

func (x *ListLiveTabletServersResponsePB_Entry) Reset() {
	*x = ListLiveTabletServersResponsePB_Entry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_master_master_cluster_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListLiveTabletServersResponsePB_Entry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLiveTabletServersResponsePB_Entry) ProtoMessage() {}

func (x *ListLiveTabletServersResponsePB_Entry) ProtoReflect() protoreflect.Message {
	mi := &file_yb_master_master_cluster_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLiveTabletServersResponsePB_Entry.ProtoReflect.Descriptor instead.
func (*ListLiveTabletServersResponsePB_Entry) Descriptor() ([]byte, []int) {
	return file_yb_master_master_cluster_proto_rawDescGZIP(), []int{3, 0}
}

func (x *ListLiveTabletServersResponsePB_Entry) GetInstanceId() *NodeInstancePB {
	if x != nil {
		return x.InstanceId
	}
	return nil
}

func (x *ListLiveTabletServersResponsePB_Entry) GetRegistration() *TSRegistrationPB {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *ListLiveTabletServersResponsePB_Entry) GetIsFromReadReplica() bool {
	if x != nil && x.IsFromReadReplica != nil {
		return *x.IsFromReadReplica
	}
	return false
}

var File_yb_master_master_cluster_proto protoreflect.FileDescriptor

var file_yb_master_master_cluster_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x09, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x1a, 0x1a, 0x79, 0x62, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x6e, 0x65,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73,
	0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x23, 0x79, 0x62, 0x2f,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x5f, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1c, 0x79, 0x62, 0x2f, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2f, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14,
	0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x6e,
	0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x6e, 0x6c, 0x79, 0x22, 0x98, 0x03, 0x0a,
	0x1b, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x46, 0x0a, 0x07,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x1a, 0x80, 0x02, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x33,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x16, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x5f, 0x73,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x14, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x76, 0x65,
	0x12, 0x35, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x50, 0x42, 0x52, 0x07,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x22, 0x4a, 0x0a, 0x1e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x0c, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x6e, 0x6c, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x0b, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f,
	0x6e, 0x6c, 0x79, 0x22, 0xcb, 0x02, 0x0a, 0x1f, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x07, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x1a, 0xab, 0x01, 0x0a, 0x05, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x33, 0x0a,
	0x0b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x53, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x42, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x61,
	0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x61, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x22, 0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x74, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12,
	0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x66,
	0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x83, 0x01, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61,
	0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x50, 0x42, 0x52, 0x07, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x20, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0xe6, 0x01, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x33, 0x0a, 0x0b, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x79, 0x62, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x42, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x42,
	0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x79,
	0x62, 0x2e, 0x50, 0x65, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x1e, 0x0a, 0x1c, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x22, 0x4f, 0x0a, 0x1d, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0x99, 0x01, 0x0a, 0x18, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d,
	0x0a, 0x07, 0x6f, 0x6e, 0x5f, 0x64, 0x69, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a,
	0x04, 0x74, 0x72, 0x75, 0x65, 0x52, 0x06, 0x6f, 0x6e, 0x44, 0x69, 0x73, 0x6b, 0x12, 0x24, 0x0a,
	0x0a, 0x70, 0x65, 0x65, 0x72, 0x73, 0x5f, 0x61, 0x6c, 0x73, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x09, 0x70, 0x65, 0x65, 0x72, 0x73, 0x41,
	0x6c, 0x73, 0x6f, 0x12, 0x38, 0x0a, 0x15, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x64, 0x75,
	0x6d, 0x70, 0x5f, 0x61, 0x73, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x12, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x44, 0x75, 0x6d, 0x70, 0x41, 0x73, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x22, 0x5f, 0x0a,
	0x19, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x75,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x75, 0x6d, 0x70, 0x22, 0x41,
	0x0a, 0x20, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x22, 0x53, 0x0a, 0x21, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1f, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x6f, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x22, 0x1e, 0x0a, 0x1c, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x4f, 0x0a, 0x1d, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x56, 0x0a, 0x1a, 0x53, 0x65, 0x74,
	0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x38, 0x0a, 0x0f, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x72, 0x65, 0x64, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x50,
	0x42, 0x52, 0x0e, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x22, 0x4d, 0x0a, 0x1b, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x22, 0x21, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x22, 0x9d, 0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x22, 0x6f, 0x0a, 0x22, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x49, 0x0a, 0x0e, 0x63, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x79,
	0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x50, 0x42, 0x52, 0x0d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x55, 0x0a, 0x23, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x9c, 0x01, 0x0a, 0x1c, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x70,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x70, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x24, 0x0a, 0x22, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22,
	0x4b, 0x0a, 0x17, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x22, 0x4a, 0x0a, 0x18,
	0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50,
	0x42, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x1d, 0x0a, 0x1b, 0x49, 0x73, 0x4c, 0x6f,
	0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x4e, 0x0a, 0x1c, 0x49, 0x73, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x24, 0x0a, 0x22, 0x41, 0x72, 0x65, 0x4c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64,
	0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x22, 0x55, 0x0a,
	0x23, 0x41, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x2e, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x32, 0xb5, 0x0f, 0x0a, 0x0d, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x12, 0x62, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x12, 0x25, 0x2e, 0x79, 0x62,
	0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a,
	0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x50, 0x0a, 0x0b, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x20, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x68, 0x0a, 0x13,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79,
	0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x61, 0x66, 0x74, 0x50, 0x65, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6e, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2a, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6f, 0x0a, 0x1a, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x28, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x56, 0x0a, 0x09, 0x44, 0x75, 0x6d, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x24, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x74, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2b, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2c, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x6b, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28, 0x2e,
	0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x29, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x68, 0x0a, 0x13, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x42, 0x1a, 0x28, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x62, 0x0a, 0x11,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65,
	0x73, 0x12, 0x25, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x5a, 0x6f, 0x6e, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x12, 0x71, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2a, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2b, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x68, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42,
	0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74,
	0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x76, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42, 0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x42,
	0x6c, 0x61, 0x63, 0x6b, 0x6c, 0x69, 0x73, 0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61,
	0x73, 0x74, 0x65, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x4d, 0x6f, 0x76, 0x65,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50,
	0x42, 0x12, 0x59, 0x0a, 0x0e, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e,
	0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73,
	0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x65, 0x0a, 0x12,
	0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64,
	0x6c, 0x65, 0x12, 0x26, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49,
	0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x27, 0x2e, 0x79, 0x62, 0x2e,
	0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x49, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x65, 0x72, 0x49, 0x64, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x50, 0x42, 0x12, 0x7a, 0x0a, 0x19, 0x41, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79,
	0x12, 0x2d, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x65,
	0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72,
	0x65, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x41, 0x72, 0x65, 0x4c,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65,
	0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x1a,
	0x1b, 0xda, 0xb5, 0x18, 0x17, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x4d,
	0x61, 0x73, 0x74, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d,
	0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72,
}

var (
	file_yb_master_master_cluster_proto_rawDescOnce sync.Once
	file_yb_master_master_cluster_proto_rawDescData = file_yb_master_master_cluster_proto_rawDesc
)

func file_yb_master_master_cluster_proto_rawDescGZIP() []byte {
	file_yb_master_master_cluster_proto_rawDescOnce.Do(func() {
		file_yb_master_master_cluster_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_master_master_cluster_proto_rawDescData)
	})
	return file_yb_master_master_cluster_proto_rawDescData
}

var file_yb_master_master_cluster_proto_msgTypes = make([]protoimpl.MessageInfo, 37)
var file_yb_master_master_cluster_proto_goTypes = []interface{}{
	(*ListTabletServersRequestPB)(nil),            // 0: yb.master.ListTabletServersRequestPB
	(*ListTabletServersResponsePB)(nil),           // 1: yb.master.ListTabletServersResponsePB
	(*ListLiveTabletServersRequestPB)(nil),        // 2: yb.master.ListLiveTabletServersRequestPB
	(*ListLiveTabletServersResponsePB)(nil),       // 3: yb.master.ListLiveTabletServersResponsePB
	(*ListMastersRequestPB)(nil),                  // 4: yb.master.ListMastersRequestPB
	(*ListMastersResponsePB)(nil),                 // 5: yb.master.ListMastersResponsePB
	(*ListMasterRaftPeersRequestPB)(nil),          // 6: yb.master.ListMasterRaftPeersRequestPB
	(*ListMasterRaftPeersResponsePB)(nil),         // 7: yb.master.ListMasterRaftPeersResponsePB
	(*GetMasterRegistrationRequestPB)(nil),        // 8: yb.master.GetMasterRegistrationRequestPB
	(*GetMasterRegistrationResponsePB)(nil),       // 9: yb.master.GetMasterRegistrationResponsePB
	(*IsMasterLeaderReadyRequestPB)(nil),          // 10: yb.master.IsMasterLeaderReadyRequestPB
	(*IsMasterLeaderReadyResponsePB)(nil),         // 11: yb.master.IsMasterLeaderReadyResponsePB
	(*DumpMasterStateRequestPB)(nil),              // 12: yb.master.DumpMasterStateRequestPB
	(*DumpMasterStateResponsePB)(nil),             // 13: yb.master.DumpMasterStateResponsePB
	(*ChangeLoadBalancerStateRequestPB)(nil),      // 14: yb.master.ChangeLoadBalancerStateRequestPB
	(*ChangeLoadBalancerStateResponsePB)(nil),     // 15: yb.master.ChangeLoadBalancerStateResponsePB
	(*GetLoadBalancerStateRequestPB)(nil),         // 16: yb.master.GetLoadBalancerStateRequestPB
	(*GetLoadBalancerStateResponsePB)(nil),        // 17: yb.master.GetLoadBalancerStateResponsePB
	(*RemovedMasterUpdateRequestPB)(nil),          // 18: yb.master.RemovedMasterUpdateRequestPB
	(*RemovedMasterUpdateResponsePB)(nil),         // 19: yb.master.RemovedMasterUpdateResponsePB
	(*SetPreferredZonesRequestPB)(nil),            // 20: yb.master.SetPreferredZonesRequestPB
	(*SetPreferredZonesResponsePB)(nil),           // 21: yb.master.SetPreferredZonesResponsePB
	(*GetMasterClusterConfigRequestPB)(nil),       // 22: yb.master.GetMasterClusterConfigRequestPB
	(*GetMasterClusterConfigResponsePB)(nil),      // 23: yb.master.GetMasterClusterConfigResponsePB
	(*ChangeMasterClusterConfigRequestPB)(nil),    // 24: yb.master.ChangeMasterClusterConfigRequestPB
	(*ChangeMasterClusterConfigResponsePB)(nil),   // 25: yb.master.ChangeMasterClusterConfigResponsePB
	(*GetLoadMovePercentRequestPB)(nil),           // 26: yb.master.GetLoadMovePercentRequestPB
	(*GetLoadMovePercentResponsePB)(nil),          // 27: yb.master.GetLoadMovePercentResponsePB
	(*GetLeaderBlacklistPercentRequestPB)(nil),    // 28: yb.master.GetLeaderBlacklistPercentRequestPB
	(*IsLoadBalancedRequestPB)(nil),               // 29: yb.master.IsLoadBalancedRequestPB
	(*IsLoadBalancedResponsePB)(nil),              // 30: yb.master.IsLoadBalancedResponsePB
	(*IsLoadBalancerIdleRequestPB)(nil),           // 31: yb.master.IsLoadBalancerIdleRequestPB
	(*IsLoadBalancerIdleResponsePB)(nil),          // 32: yb.master.IsLoadBalancerIdleResponsePB
	(*AreLeadersOnPreferredOnlyRequestPB)(nil),    // 33: yb.master.AreLeadersOnPreferredOnlyRequestPB
	(*AreLeadersOnPreferredOnlyResponsePB)(nil),   // 34: yb.master.AreLeadersOnPreferredOnlyResponsePB
	(*ListTabletServersResponsePB_Entry)(nil),     // 35: yb.master.ListTabletServersResponsePB.Entry
	(*ListLiveTabletServersResponsePB_Entry)(nil), // 36: yb.master.ListLiveTabletServersResponsePB.Entry
	(*MasterErrorPB)(nil),                         // 37: yb.master.MasterErrorPB
	(*ServerEntryPB)(nil),                         // 38: yb.ServerEntryPB
	(*RaftPeerPB)(nil),                            // 39: yb.consensus.RaftPeerPB
	(*NodeInstancePB)(nil),                        // 40: yb.NodeInstancePB
	(*ServerRegistrationPB)(nil),                  // 41: yb.ServerRegistrationPB
	(PeerRole)(0),                                 // 42: yb.PeerRole
	(*CloudInfoPB)(nil),                           // 43: yb.CloudInfoPB
	(*SysClusterConfigEntryPB)(nil),               // 44: yb.master.SysClusterConfigEntryPB
	(*TSRegistrationPB)(nil),                      // 45: yb.master.TSRegistrationPB
	(*TServerMetricsPB)(nil),                      // 46: yb.master.TServerMetricsPB
}
var file_yb_master_master_cluster_proto_depIdxs = []int32{
	37, // 0: yb.master.ListTabletServersResponsePB.error:type_name -> yb.master.MasterErrorPB
	35, // 1: yb.master.ListTabletServersResponsePB.servers:type_name -> yb.master.ListTabletServersResponsePB.Entry
	37, // 2: yb.master.ListLiveTabletServersResponsePB.error:type_name -> yb.master.MasterErrorPB
	36, // 3: yb.master.ListLiveTabletServersResponsePB.servers:type_name -> yb.master.ListLiveTabletServersResponsePB.Entry
	38, // 4: yb.master.ListMastersResponsePB.masters:type_name -> yb.ServerEntryPB
	37, // 5: yb.master.ListMastersResponsePB.error:type_name -> yb.master.MasterErrorPB
	39, // 6: yb.master.ListMasterRaftPeersResponsePB.masters:type_name -> yb.consensus.RaftPeerPB
	37, // 7: yb.master.ListMasterRaftPeersResponsePB.error:type_name -> yb.master.MasterErrorPB
	40, // 8: yb.master.GetMasterRegistrationResponsePB.instance_id:type_name -> yb.NodeInstancePB
	41, // 9: yb.master.GetMasterRegistrationResponsePB.registration:type_name -> yb.ServerRegistrationPB
	42, // 10: yb.master.GetMasterRegistrationResponsePB.role:type_name -> yb.PeerRole
	37, // 11: yb.master.GetMasterRegistrationResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 12: yb.master.IsMasterLeaderReadyResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 13: yb.master.DumpMasterStateResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 14: yb.master.ChangeLoadBalancerStateResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 15: yb.master.GetLoadBalancerStateResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 16: yb.master.RemovedMasterUpdateResponsePB.error:type_name -> yb.master.MasterErrorPB
	43, // 17: yb.master.SetPreferredZonesRequestPB.preferred_zones:type_name -> yb.CloudInfoPB
	37, // 18: yb.master.SetPreferredZonesResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 19: yb.master.GetMasterClusterConfigResponsePB.error:type_name -> yb.master.MasterErrorPB
	44, // 20: yb.master.GetMasterClusterConfigResponsePB.cluster_config:type_name -> yb.master.SysClusterConfigEntryPB
	44, // 21: yb.master.ChangeMasterClusterConfigRequestPB.cluster_config:type_name -> yb.master.SysClusterConfigEntryPB
	37, // 22: yb.master.ChangeMasterClusterConfigResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 23: yb.master.GetLoadMovePercentResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 24: yb.master.IsLoadBalancedResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 25: yb.master.IsLoadBalancerIdleResponsePB.error:type_name -> yb.master.MasterErrorPB
	37, // 26: yb.master.AreLeadersOnPreferredOnlyResponsePB.error:type_name -> yb.master.MasterErrorPB
	40, // 27: yb.master.ListTabletServersResponsePB.Entry.instance_id:type_name -> yb.NodeInstancePB
	45, // 28: yb.master.ListTabletServersResponsePB.Entry.registration:type_name -> yb.master.TSRegistrationPB
	46, // 29: yb.master.ListTabletServersResponsePB.Entry.metrics:type_name -> yb.master.TServerMetricsPB
	40, // 30: yb.master.ListLiveTabletServersResponsePB.Entry.instance_id:type_name -> yb.NodeInstancePB
	45, // 31: yb.master.ListLiveTabletServersResponsePB.Entry.registration:type_name -> yb.master.TSRegistrationPB
	0,  // 32: yb.master.MasterCluster.ListTabletServers:input_type -> yb.master.ListTabletServersRequestPB
	2,  // 33: yb.master.MasterCluster.ListLiveTabletServers:input_type -> yb.master.ListLiveTabletServersRequestPB
	4,  // 34: yb.master.MasterCluster.ListMasters:input_type -> yb.master.ListMastersRequestPB
	6,  // 35: yb.master.MasterCluster.ListMasterRaftPeers:input_type -> yb.master.ListMasterRaftPeersRequestPB
	8,  // 36: yb.master.MasterCluster.GetMasterRegistration:input_type -> yb.master.GetMasterRegistrationRequestPB
	10, // 37: yb.master.MasterCluster.IsMasterLeaderServiceReady:input_type -> yb.master.IsMasterLeaderReadyRequestPB
	12, // 38: yb.master.MasterCluster.DumpState:input_type -> yb.master.DumpMasterStateRequestPB
	14, // 39: yb.master.MasterCluster.ChangeLoadBalancerState:input_type -> yb.master.ChangeLoadBalancerStateRequestPB
	16, // 40: yb.master.MasterCluster.GetLoadBalancerState:input_type -> yb.master.GetLoadBalancerStateRequestPB
	18, // 41: yb.master.MasterCluster.RemovedMasterUpdate:input_type -> yb.master.RemovedMasterUpdateRequestPB
	20, // 42: yb.master.MasterCluster.SetPreferredZones:input_type -> yb.master.SetPreferredZonesRequestPB
	22, // 43: yb.master.MasterCluster.GetMasterClusterConfig:input_type -> yb.master.GetMasterClusterConfigRequestPB
	24, // 44: yb.master.MasterCluster.ChangeMasterClusterConfig:input_type -> yb.master.ChangeMasterClusterConfigRequestPB
	26, // 45: yb.master.MasterCluster.GetLoadMoveCompletion:input_type -> yb.master.GetLoadMovePercentRequestPB
	28, // 46: yb.master.MasterCluster.GetLeaderBlacklistCompletion:input_type -> yb.master.GetLeaderBlacklistPercentRequestPB
	29, // 47: yb.master.MasterCluster.IsLoadBalanced:input_type -> yb.master.IsLoadBalancedRequestPB
	31, // 48: yb.master.MasterCluster.IsLoadBalancerIdle:input_type -> yb.master.IsLoadBalancerIdleRequestPB
	33, // 49: yb.master.MasterCluster.AreLeadersOnPreferredOnly:input_type -> yb.master.AreLeadersOnPreferredOnlyRequestPB
	1,  // 50: yb.master.MasterCluster.ListTabletServers:output_type -> yb.master.ListTabletServersResponsePB
	3,  // 51: yb.master.MasterCluster.ListLiveTabletServers:output_type -> yb.master.ListLiveTabletServersResponsePB
	5,  // 52: yb.master.MasterCluster.ListMasters:output_type -> yb.master.ListMastersResponsePB
	7,  // 53: yb.master.MasterCluster.ListMasterRaftPeers:output_type -> yb.master.ListMasterRaftPeersResponsePB
	9,  // 54: yb.master.MasterCluster.GetMasterRegistration:output_type -> yb.master.GetMasterRegistrationResponsePB
	11, // 55: yb.master.MasterCluster.IsMasterLeaderServiceReady:output_type -> yb.master.IsMasterLeaderReadyResponsePB
	13, // 56: yb.master.MasterCluster.DumpState:output_type -> yb.master.DumpMasterStateResponsePB
	15, // 57: yb.master.MasterCluster.ChangeLoadBalancerState:output_type -> yb.master.ChangeLoadBalancerStateResponsePB
	17, // 58: yb.master.MasterCluster.GetLoadBalancerState:output_type -> yb.master.GetLoadBalancerStateResponsePB
	19, // 59: yb.master.MasterCluster.RemovedMasterUpdate:output_type -> yb.master.RemovedMasterUpdateResponsePB
	21, // 60: yb.master.MasterCluster.SetPreferredZones:output_type -> yb.master.SetPreferredZonesResponsePB
	23, // 61: yb.master.MasterCluster.GetMasterClusterConfig:output_type -> yb.master.GetMasterClusterConfigResponsePB
	25, // 62: yb.master.MasterCluster.ChangeMasterClusterConfig:output_type -> yb.master.ChangeMasterClusterConfigResponsePB
	27, // 63: yb.master.MasterCluster.GetLoadMoveCompletion:output_type -> yb.master.GetLoadMovePercentResponsePB
	27, // 64: yb.master.MasterCluster.GetLeaderBlacklistCompletion:output_type -> yb.master.GetLoadMovePercentResponsePB
	30, // 65: yb.master.MasterCluster.IsLoadBalanced:output_type -> yb.master.IsLoadBalancedResponsePB
	32, // 66: yb.master.MasterCluster.IsLoadBalancerIdle:output_type -> yb.master.IsLoadBalancerIdleResponsePB
	34, // 67: yb.master.MasterCluster.AreLeadersOnPreferredOnly:output_type -> yb.master.AreLeadersOnPreferredOnlyResponsePB
	50, // [50:68] is the sub-list for method output_type
	32, // [32:50] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_yb_master_master_cluster_proto_init() }
func file_yb_master_master_cluster_proto_init() {
	if File_yb_master_master_cluster_proto != nil {
		return
	}
	file_yb_common_common_net_proto_init()
	file_yb_common_common_types_proto_init()
	file_yb_common_wire_protocol_proto_init()
	file_yb_consensus_consensus_metadata_proto_init()
	file_yb_master_catalog_entity_info_proto_init()
	file_yb_master_master_types_proto_init()
	file_yb_rpc_service_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_master_master_cluster_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletServersRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletServersResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLiveTabletServersRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLiveTabletServersResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMastersRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMastersResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMasterRaftPeersRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMasterRaftPeersResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterRegistrationRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterRegistrationResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMasterLeaderReadyRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsMasterLeaderReadyResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpMasterStateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpMasterStateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeLoadBalancerStateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeLoadBalancerStateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerStateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadBalancerStateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovedMasterUpdateRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemovedMasterUpdateResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPreferredZonesRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetPreferredZonesResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterClusterConfigRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMasterClusterConfigResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMasterClusterConfigRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMasterClusterConfigResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadMovePercentRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLoadMovePercentResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLeaderBlacklistPercentRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancedRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancedResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancerIdleRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IsLoadBalancerIdleResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreLeadersOnPreferredOnlyRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AreLeadersOnPreferredOnlyResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTabletServersResponsePB_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_master_master_cluster_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListLiveTabletServersResponsePB_Entry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_master_master_cluster_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   37,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_yb_master_master_cluster_proto_goTypes,
		DependencyIndexes: file_yb_master_master_cluster_proto_depIdxs,
		MessageInfos:      file_yb_master_master_cluster_proto_msgTypes,
	}.Build()
	File_yb_master_master_cluster_proto = out.File
	file_yb_master_master_cluster_proto_rawDesc = nil
	file_yb_master_master_cluster_proto_goTypes = nil
	file_yb_master_master_cluster_proto_depIdxs = nil
}
