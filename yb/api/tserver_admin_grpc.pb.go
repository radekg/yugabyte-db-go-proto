// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TabletServerAdminServiceClient is the client API for TabletServerAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TabletServerAdminServiceClient interface {
	// Create a new, empty tablet with the specified parameters. Only used for
	// brand-new tablets, not for "moves".
	CreateTablet(ctx context.Context, in *CreateTabletRequestPB, opts ...grpc.CallOption) (*CreateTabletResponsePB, error)
	// Delete a tablet replica.
	DeleteTablet(ctx context.Context, in *DeleteTabletRequestPB, opts ...grpc.CallOption) (*DeleteTabletResponsePB, error)
	// Alter a tablet's schema.
	AlterSchema(ctx context.Context, in *ChangeMetadataRequestPB, opts ...grpc.CallOption) (*ChangeMetadataResponsePB, error)
	// GetSafeTime API to get the current safe time.
	GetSafeTime(ctx context.Context, in *GetSafeTimeRequestPB, opts ...grpc.CallOption) (*GetSafeTimeResponsePB, error)
	// Backfill the index for the specified index tables. Addressed to the indexed
	// table.
	BackfillIndex(ctx context.Context, in *BackfillIndexRequestPB, opts ...grpc.CallOption) (*BackfillIndexResponsePB, error)
	// Marks an index table as having completed backfilling.
	BackfillDone(ctx context.Context, in *ChangeMetadataRequestPB, opts ...grpc.CallOption) (*ChangeMetadataResponsePB, error)
	// Create a co-partitioned table in an existing tablet
	CopartitionTable(ctx context.Context, in *CopartitionTableRequestPB, opts ...grpc.CallOption) (*CopartitionTableResponsePB, error)
	FlushTablets(ctx context.Context, in *FlushTabletsRequestPB, opts ...grpc.CallOption) (*FlushTabletsResponsePB, error)
	CountIntents(ctx context.Context, in *CountIntentsRequestPB, opts ...grpc.CallOption) (*CountIntentsResponsePB, error)
	AddTableToTablet(ctx context.Context, in *AddTableToTabletRequestPB, opts ...grpc.CallOption) (*AddTableToTabletResponsePB, error)
	RemoveTableFromTablet(ctx context.Context, in *RemoveTableFromTabletRequestPB, opts ...grpc.CallOption) (*RemoveTableFromTabletResponsePB, error)
	GetSplitKey(ctx context.Context, in *GetSplitKeyRequestPB, opts ...grpc.CallOption) (*GetSplitKeyResponsePB, error)
	SplitTablet(ctx context.Context, in *SplitTabletRequestPB, opts ...grpc.CallOption) (*SplitTabletResponsePB, error)
}

type tabletServerAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTabletServerAdminServiceClient(cc grpc.ClientConnInterface) TabletServerAdminServiceClient {
	return &tabletServerAdminServiceClient{cc}
}

func (c *tabletServerAdminServiceClient) CreateTablet(ctx context.Context, in *CreateTabletRequestPB, opts ...grpc.CallOption) (*CreateTabletResponsePB, error) {
	out := new(CreateTabletResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/CreateTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) DeleteTablet(ctx context.Context, in *DeleteTabletRequestPB, opts ...grpc.CallOption) (*DeleteTabletResponsePB, error) {
	out := new(DeleteTabletResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/DeleteTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) AlterSchema(ctx context.Context, in *ChangeMetadataRequestPB, opts ...grpc.CallOption) (*ChangeMetadataResponsePB, error) {
	out := new(ChangeMetadataResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/AlterSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) GetSafeTime(ctx context.Context, in *GetSafeTimeRequestPB, opts ...grpc.CallOption) (*GetSafeTimeResponsePB, error) {
	out := new(GetSafeTimeResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/GetSafeTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) BackfillIndex(ctx context.Context, in *BackfillIndexRequestPB, opts ...grpc.CallOption) (*BackfillIndexResponsePB, error) {
	out := new(BackfillIndexResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/BackfillIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) BackfillDone(ctx context.Context, in *ChangeMetadataRequestPB, opts ...grpc.CallOption) (*ChangeMetadataResponsePB, error) {
	out := new(ChangeMetadataResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/BackfillDone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) CopartitionTable(ctx context.Context, in *CopartitionTableRequestPB, opts ...grpc.CallOption) (*CopartitionTableResponsePB, error) {
	out := new(CopartitionTableResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/CopartitionTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) FlushTablets(ctx context.Context, in *FlushTabletsRequestPB, opts ...grpc.CallOption) (*FlushTabletsResponsePB, error) {
	out := new(FlushTabletsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/FlushTablets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) CountIntents(ctx context.Context, in *CountIntentsRequestPB, opts ...grpc.CallOption) (*CountIntentsResponsePB, error) {
	out := new(CountIntentsResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/CountIntents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) AddTableToTablet(ctx context.Context, in *AddTableToTabletRequestPB, opts ...grpc.CallOption) (*AddTableToTabletResponsePB, error) {
	out := new(AddTableToTabletResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/AddTableToTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) RemoveTableFromTablet(ctx context.Context, in *RemoveTableFromTabletRequestPB, opts ...grpc.CallOption) (*RemoveTableFromTabletResponsePB, error) {
	out := new(RemoveTableFromTabletResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/RemoveTableFromTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) GetSplitKey(ctx context.Context, in *GetSplitKeyRequestPB, opts ...grpc.CallOption) (*GetSplitKeyResponsePB, error) {
	out := new(GetSplitKeyResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/GetSplitKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tabletServerAdminServiceClient) SplitTablet(ctx context.Context, in *SplitTabletRequestPB, opts ...grpc.CallOption) (*SplitTabletResponsePB, error) {
	out := new(SplitTabletResponsePB)
	err := c.cc.Invoke(ctx, "/yb.tserver.TabletServerAdminService/SplitTablet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TabletServerAdminServiceServer is the server API for TabletServerAdminService service.
// All implementations should embed UnimplementedTabletServerAdminServiceServer
// for forward compatibility
type TabletServerAdminServiceServer interface {
	// Create a new, empty tablet with the specified parameters. Only used for
	// brand-new tablets, not for "moves".
	CreateTablet(context.Context, *CreateTabletRequestPB) (*CreateTabletResponsePB, error)
	// Delete a tablet replica.
	DeleteTablet(context.Context, *DeleteTabletRequestPB) (*DeleteTabletResponsePB, error)
	// Alter a tablet's schema.
	AlterSchema(context.Context, *ChangeMetadataRequestPB) (*ChangeMetadataResponsePB, error)
	// GetSafeTime API to get the current safe time.
	GetSafeTime(context.Context, *GetSafeTimeRequestPB) (*GetSafeTimeResponsePB, error)
	// Backfill the index for the specified index tables. Addressed to the indexed
	// table.
	BackfillIndex(context.Context, *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error)
	// Marks an index table as having completed backfilling.
	BackfillDone(context.Context, *ChangeMetadataRequestPB) (*ChangeMetadataResponsePB, error)
	// Create a co-partitioned table in an existing tablet
	CopartitionTable(context.Context, *CopartitionTableRequestPB) (*CopartitionTableResponsePB, error)
	FlushTablets(context.Context, *FlushTabletsRequestPB) (*FlushTabletsResponsePB, error)
	CountIntents(context.Context, *CountIntentsRequestPB) (*CountIntentsResponsePB, error)
	AddTableToTablet(context.Context, *AddTableToTabletRequestPB) (*AddTableToTabletResponsePB, error)
	RemoveTableFromTablet(context.Context, *RemoveTableFromTabletRequestPB) (*RemoveTableFromTabletResponsePB, error)
	GetSplitKey(context.Context, *GetSplitKeyRequestPB) (*GetSplitKeyResponsePB, error)
	SplitTablet(context.Context, *SplitTabletRequestPB) (*SplitTabletResponsePB, error)
}

// UnimplementedTabletServerAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTabletServerAdminServiceServer struct {
}

func (UnimplementedTabletServerAdminServiceServer) CreateTablet(context.Context, *CreateTabletRequestPB) (*CreateTabletResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTablet not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) DeleteTablet(context.Context, *DeleteTabletRequestPB) (*DeleteTabletResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTablet not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) AlterSchema(context.Context, *ChangeMetadataRequestPB) (*ChangeMetadataResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AlterSchema not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) GetSafeTime(context.Context, *GetSafeTimeRequestPB) (*GetSafeTimeResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSafeTime not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) BackfillIndex(context.Context, *BackfillIndexRequestPB) (*BackfillIndexResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackfillIndex not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) BackfillDone(context.Context, *ChangeMetadataRequestPB) (*ChangeMetadataResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackfillDone not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) CopartitionTable(context.Context, *CopartitionTableRequestPB) (*CopartitionTableResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopartitionTable not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) FlushTablets(context.Context, *FlushTabletsRequestPB) (*FlushTabletsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FlushTablets not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) CountIntents(context.Context, *CountIntentsRequestPB) (*CountIntentsResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountIntents not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) AddTableToTablet(context.Context, *AddTableToTabletRequestPB) (*AddTableToTabletResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTableToTablet not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) RemoveTableFromTablet(context.Context, *RemoveTableFromTabletRequestPB) (*RemoveTableFromTabletResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveTableFromTablet not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) GetSplitKey(context.Context, *GetSplitKeyRequestPB) (*GetSplitKeyResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSplitKey not implemented")
}
func (UnimplementedTabletServerAdminServiceServer) SplitTablet(context.Context, *SplitTabletRequestPB) (*SplitTabletResponsePB, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SplitTablet not implemented")
}

// UnsafeTabletServerAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TabletServerAdminServiceServer will
// result in compilation errors.
type UnsafeTabletServerAdminServiceServer interface {
	mustEmbedUnimplementedTabletServerAdminServiceServer()
}

func RegisterTabletServerAdminServiceServer(s grpc.ServiceRegistrar, srv TabletServerAdminServiceServer) {
	s.RegisterService(&TabletServerAdminService_ServiceDesc, srv)
}

func _TabletServerAdminService_CreateTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTabletRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).CreateTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/CreateTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).CreateTablet(ctx, req.(*CreateTabletRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_DeleteTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTabletRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).DeleteTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/DeleteTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).DeleteTablet(ctx, req.(*DeleteTabletRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_AlterSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMetadataRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).AlterSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/AlterSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).AlterSchema(ctx, req.(*ChangeMetadataRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_GetSafeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSafeTimeRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).GetSafeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/GetSafeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).GetSafeTime(ctx, req.(*GetSafeTimeRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_BackfillIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackfillIndexRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).BackfillIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/BackfillIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).BackfillIndex(ctx, req.(*BackfillIndexRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_BackfillDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeMetadataRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).BackfillDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/BackfillDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).BackfillDone(ctx, req.(*ChangeMetadataRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_CopartitionTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopartitionTableRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).CopartitionTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/CopartitionTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).CopartitionTable(ctx, req.(*CopartitionTableRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_FlushTablets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushTabletsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).FlushTablets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/FlushTablets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).FlushTablets(ctx, req.(*FlushTabletsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_CountIntents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CountIntentsRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).CountIntents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/CountIntents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).CountIntents(ctx, req.(*CountIntentsRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_AddTableToTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTableToTabletRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).AddTableToTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/AddTableToTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).AddTableToTablet(ctx, req.(*AddTableToTabletRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_RemoveTableFromTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveTableFromTabletRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).RemoveTableFromTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/RemoveTableFromTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).RemoveTableFromTablet(ctx, req.(*RemoveTableFromTabletRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_GetSplitKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSplitKeyRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).GetSplitKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/GetSplitKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).GetSplitKey(ctx, req.(*GetSplitKeyRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

func _TabletServerAdminService_SplitTablet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SplitTabletRequestPB)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TabletServerAdminServiceServer).SplitTablet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yb.tserver.TabletServerAdminService/SplitTablet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TabletServerAdminServiceServer).SplitTablet(ctx, req.(*SplitTabletRequestPB))
	}
	return interceptor(ctx, in, info, handler)
}

// TabletServerAdminService_ServiceDesc is the grpc.ServiceDesc for TabletServerAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TabletServerAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yb.tserver.TabletServerAdminService",
	HandlerType: (*TabletServerAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTablet",
			Handler:    _TabletServerAdminService_CreateTablet_Handler,
		},
		{
			MethodName: "DeleteTablet",
			Handler:    _TabletServerAdminService_DeleteTablet_Handler,
		},
		{
			MethodName: "AlterSchema",
			Handler:    _TabletServerAdminService_AlterSchema_Handler,
		},
		{
			MethodName: "GetSafeTime",
			Handler:    _TabletServerAdminService_GetSafeTime_Handler,
		},
		{
			MethodName: "BackfillIndex",
			Handler:    _TabletServerAdminService_BackfillIndex_Handler,
		},
		{
			MethodName: "BackfillDone",
			Handler:    _TabletServerAdminService_BackfillDone_Handler,
		},
		{
			MethodName: "CopartitionTable",
			Handler:    _TabletServerAdminService_CopartitionTable_Handler,
		},
		{
			MethodName: "FlushTablets",
			Handler:    _TabletServerAdminService_FlushTablets_Handler,
		},
		{
			MethodName: "CountIntents",
			Handler:    _TabletServerAdminService_CountIntents_Handler,
		},
		{
			MethodName: "AddTableToTablet",
			Handler:    _TabletServerAdminService_AddTableToTablet_Handler,
		},
		{
			MethodName: "RemoveTableFromTablet",
			Handler:    _TabletServerAdminService_RemoveTableFromTablet_Handler,
		},
		{
			MethodName: "GetSplitKey",
			Handler:    _TabletServerAdminService_GetSplitKey_Handler,
		},
		{
			MethodName: "SplitTablet",
			Handler:    _TabletServerAdminService_SplitTablet_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "yb/tserver/tserver_admin.proto",
}
