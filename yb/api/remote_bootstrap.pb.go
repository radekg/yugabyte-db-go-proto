// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// The following only applies to changes made to this file as part of YugaByte development.
//
// Portions Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.
//

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/tserver/remote_bootstrap.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RemoteBootstrapErrorPB_Code int32

const (
	// An error which has no more specific error code.
	// The code and message in 'status' may reveal more details.
	//
	// RPCs should avoid returning this, since callers will not be
	// able to easily parse the error.
	RemoteBootstrapErrorPB_UNKNOWN_ERROR RemoteBootstrapErrorPB_Code = 1
	// The specified remote bootstrap session either never existed or has expired.
	RemoteBootstrapErrorPB_NO_SESSION RemoteBootstrapErrorPB_Code = 2
	// Unknown tablet.
	RemoteBootstrapErrorPB_TABLET_NOT_FOUND RemoteBootstrapErrorPB_Code = 3
	// Unknown data block.
	RemoteBootstrapErrorPB_BLOCK_NOT_FOUND RemoteBootstrapErrorPB_Code = 4
	// Unknown WAL segment.
	RemoteBootstrapErrorPB_WAL_SEGMENT_NOT_FOUND RemoteBootstrapErrorPB_Code = 5
	// Invalid request. Possibly missing parameters.
	RemoteBootstrapErrorPB_INVALID_REMOTE_BOOTSTRAP_REQUEST RemoteBootstrapErrorPB_Code = 6
	// Error reading or transferring data.
	RemoteBootstrapErrorPB_IO_ERROR RemoteBootstrapErrorPB_Code = 7
	// Unknown RocksDB file.
	RemoteBootstrapErrorPB_ROCKSDB_FILE_NOT_FOUND RemoteBootstrapErrorPB_Code = 8
)

// Enum value maps for RemoteBootstrapErrorPB_Code.
var (
	RemoteBootstrapErrorPB_Code_name = map[int32]string{
		1: "UNKNOWN_ERROR",
		2: "NO_SESSION",
		3: "TABLET_NOT_FOUND",
		4: "BLOCK_NOT_FOUND",
		5: "WAL_SEGMENT_NOT_FOUND",
		6: "INVALID_REMOTE_BOOTSTRAP_REQUEST",
		7: "IO_ERROR",
		8: "ROCKSDB_FILE_NOT_FOUND",
	}
	RemoteBootstrapErrorPB_Code_value = map[string]int32{
		"UNKNOWN_ERROR":                    1,
		"NO_SESSION":                       2,
		"TABLET_NOT_FOUND":                 3,
		"BLOCK_NOT_FOUND":                  4,
		"WAL_SEGMENT_NOT_FOUND":            5,
		"INVALID_REMOTE_BOOTSTRAP_REQUEST": 6,
		"IO_ERROR":                         7,
		"ROCKSDB_FILE_NOT_FOUND":           8,
	}
)

func (x RemoteBootstrapErrorPB_Code) Enum() *RemoteBootstrapErrorPB_Code {
	p := new(RemoteBootstrapErrorPB_Code)
	*p = x
	return p
}

func (x RemoteBootstrapErrorPB_Code) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RemoteBootstrapErrorPB_Code) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_remote_bootstrap_proto_enumTypes[0].Descriptor()
}

func (RemoteBootstrapErrorPB_Code) Type() protoreflect.EnumType {
	return &file_yb_tserver_remote_bootstrap_proto_enumTypes[0]
}

func (x RemoteBootstrapErrorPB_Code) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *RemoteBootstrapErrorPB_Code) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = RemoteBootstrapErrorPB_Code(num)
	return nil
}

// Deprecated: Use RemoteBootstrapErrorPB_Code.Descriptor instead.
func (RemoteBootstrapErrorPB_Code) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{0, 0}
}

type DataIdPB_IdType int32

const (
	DataIdPB_UNKNOWN       DataIdPB_IdType = 0
	DataIdPB_LOG_SEGMENT   DataIdPB_IdType = 2
	DataIdPB_ROCKSDB_FILE  DataIdPB_IdType = 3
	DataIdPB_SNAPSHOT_FILE DataIdPB_IdType = 4
)

// Enum value maps for DataIdPB_IdType.
var (
	DataIdPB_IdType_name = map[int32]string{
		0: "UNKNOWN",
		2: "LOG_SEGMENT",
		3: "ROCKSDB_FILE",
		4: "SNAPSHOT_FILE",
	}
	DataIdPB_IdType_value = map[string]int32{
		"UNKNOWN":       0,
		"LOG_SEGMENT":   2,
		"ROCKSDB_FILE":  3,
		"SNAPSHOT_FILE": 4,
	}
)

func (x DataIdPB_IdType) Enum() *DataIdPB_IdType {
	p := new(DataIdPB_IdType)
	*p = x
	return p
}

func (x DataIdPB_IdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataIdPB_IdType) Descriptor() protoreflect.EnumDescriptor {
	return file_yb_tserver_remote_bootstrap_proto_enumTypes[1].Descriptor()
}

func (DataIdPB_IdType) Type() protoreflect.EnumType {
	return &file_yb_tserver_remote_bootstrap_proto_enumTypes[1]
}

func (x DataIdPB_IdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *DataIdPB_IdType) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = DataIdPB_IdType(num)
	return nil
}

// Deprecated: Use DataIdPB_IdType.Descriptor instead.
func (DataIdPB_IdType) EnumDescriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{5, 0}
}

// Remote bootstrap-specific errors use this protobuf.
type RemoteBootstrapErrorPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The error code.
	Code *RemoteBootstrapErrorPB_Code `protobuf:"varint,1,req,name=code,enum=yb.tserver.RemoteBootstrapErrorPB_Code,def=1" json:"code,omitempty"`
	// The Status object for the error. This will include a textual
	// message that may be more useful to present in log messages, etc,
	// though its error code is less specific.
	Status *AppStatusPB `protobuf:"bytes,2,req,name=status" json:"status,omitempty"`
}

// Default values for RemoteBootstrapErrorPB fields.
const (
	Default_RemoteBootstrapErrorPB_Code = RemoteBootstrapErrorPB_UNKNOWN_ERROR
)

func (x *RemoteBootstrapErrorPB) Reset() {
	*x = RemoteBootstrapErrorPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteBootstrapErrorPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteBootstrapErrorPB) ProtoMessage() {}

func (x *RemoteBootstrapErrorPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteBootstrapErrorPB.ProtoReflect.Descriptor instead.
func (*RemoteBootstrapErrorPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{0}
}

func (x *RemoteBootstrapErrorPB) GetCode() RemoteBootstrapErrorPB_Code {
	if x != nil && x.Code != nil {
		return *x.Code
	}
	return Default_RemoteBootstrapErrorPB_Code
}

func (x *RemoteBootstrapErrorPB) GetStatus() *AppStatusPB {
	if x != nil {
		return x.Status
	}
	return nil
}

type BeginRemoteBootstrapSessionRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// permanent_uuid of the requesting peer.
	RequestorUuid []byte `protobuf:"bytes,1,req,name=requestor_uuid,json=requestorUuid" json:"requestor_uuid,omitempty"`
	// tablet_id of the tablet the requester desires to bootstrap from.
	TabletId []byte `protobuf:"bytes,2,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
}

func (x *BeginRemoteBootstrapSessionRequestPB) Reset() {
	*x = BeginRemoteBootstrapSessionRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginRemoteBootstrapSessionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginRemoteBootstrapSessionRequestPB) ProtoMessage() {}

func (x *BeginRemoteBootstrapSessionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginRemoteBootstrapSessionRequestPB.ProtoReflect.Descriptor instead.
func (*BeginRemoteBootstrapSessionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{1}
}

func (x *BeginRemoteBootstrapSessionRequestPB) GetRequestorUuid() []byte {
	if x != nil {
		return x.RequestorUuid
	}
	return nil
}

func (x *BeginRemoteBootstrapSessionRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

type BeginRemoteBootstrapSessionResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Opaque session id assigned by the server.
	// No guarantees are made as to the format of the session id.
	SessionId []byte `protobuf:"bytes,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Maximum session idle timeout between requests.
	// Learners will have to start over again if they reach this timeout.
	// A value of 0 means there is no timeout.
	SessionIdleTimeoutMillis *uint64 `protobuf:"varint,2,req,name=session_idle_timeout_millis,json=sessionIdleTimeoutMillis" json:"session_idle_timeout_millis,omitempty"`
	// Active superblock at the time of the request.
	Superblock *RaftGroupReplicaSuperBlockPB `protobuf:"bytes,3,req,name=superblock" json:"superblock,omitempty"`
	// Identifiers for the WAL segments available for download.
	// Each WAL segment is keyed by its sequence number.
	DEPRECATEDWalSegmentSeqnos []uint64 `protobuf:"varint,4,rep,name=DEPRECATED_wal_segment_seqnos,json=DEPRECATEDWalSegmentSeqnos" json:"DEPRECATED_wal_segment_seqnos,omitempty"`
	// Sequence number of first WAL segment available for download.
	FirstWalSegmentSeqno *uint64 `protobuf:"varint,6,opt,name=first_wal_segment_seqno,json=firstWalSegmentSeqno" json:"first_wal_segment_seqno,omitempty"`
	// A snapshot of the committed Consensus state at the time that the
	// remote bootstrap session was started.
	InitialCommittedCstate *ConsensusStatePB `protobuf:"bytes,5,req,name=initial_committed_cstate,json=initialCommittedCstate" json:"initial_committed_cstate,omitempty"`
}

func (x *BeginRemoteBootstrapSessionResponsePB) Reset() {
	*x = BeginRemoteBootstrapSessionResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BeginRemoteBootstrapSessionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BeginRemoteBootstrapSessionResponsePB) ProtoMessage() {}

func (x *BeginRemoteBootstrapSessionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BeginRemoteBootstrapSessionResponsePB.ProtoReflect.Descriptor instead.
func (*BeginRemoteBootstrapSessionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{2}
}

func (x *BeginRemoteBootstrapSessionResponsePB) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *BeginRemoteBootstrapSessionResponsePB) GetSessionIdleTimeoutMillis() uint64 {
	if x != nil && x.SessionIdleTimeoutMillis != nil {
		return *x.SessionIdleTimeoutMillis
	}
	return 0
}

func (x *BeginRemoteBootstrapSessionResponsePB) GetSuperblock() *RaftGroupReplicaSuperBlockPB {
	if x != nil {
		return x.Superblock
	}
	return nil
}

func (x *BeginRemoteBootstrapSessionResponsePB) GetDEPRECATEDWalSegmentSeqnos() []uint64 {
	if x != nil {
		return x.DEPRECATEDWalSegmentSeqnos
	}
	return nil
}

func (x *BeginRemoteBootstrapSessionResponsePB) GetFirstWalSegmentSeqno() uint64 {
	if x != nil && x.FirstWalSegmentSeqno != nil {
		return *x.FirstWalSegmentSeqno
	}
	return 0
}

func (x *BeginRemoteBootstrapSessionResponsePB) GetInitialCommittedCstate() *ConsensusStatePB {
	if x != nil {
		return x.InitialCommittedCstate
	}
	return nil
}

type CheckRemoteBootstrapSessionActiveRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Valid Session ID returned by a BeginRemoteBootstrapSession() RPC call.
	SessionId []byte `protobuf:"bytes,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Set keepalive to true to reset the session timeout timer.
	Keepalive *bool `protobuf:"varint,2,opt,name=keepalive,def=0" json:"keepalive,omitempty"`
}

// Default values for CheckRemoteBootstrapSessionActiveRequestPB fields.
const (
	Default_CheckRemoteBootstrapSessionActiveRequestPB_Keepalive = bool(false)
)

func (x *CheckRemoteBootstrapSessionActiveRequestPB) Reset() {
	*x = CheckRemoteBootstrapSessionActiveRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRemoteBootstrapSessionActiveRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRemoteBootstrapSessionActiveRequestPB) ProtoMessage() {}

func (x *CheckRemoteBootstrapSessionActiveRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRemoteBootstrapSessionActiveRequestPB.ProtoReflect.Descriptor instead.
func (*CheckRemoteBootstrapSessionActiveRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{3}
}

func (x *CheckRemoteBootstrapSessionActiveRequestPB) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *CheckRemoteBootstrapSessionActiveRequestPB) GetKeepalive() bool {
	if x != nil && x.Keepalive != nil {
		return *x.Keepalive
	}
	return Default_CheckRemoteBootstrapSessionActiveRequestPB_Keepalive
}

type CheckRemoteBootstrapSessionActiveResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether the given session id represents an active remote bootstrap session.
	SessionIsActive *bool `protobuf:"varint,1,req,name=session_is_active,json=sessionIsActive" json:"session_is_active,omitempty"`
}

func (x *CheckRemoteBootstrapSessionActiveResponsePB) Reset() {
	*x = CheckRemoteBootstrapSessionActiveResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckRemoteBootstrapSessionActiveResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckRemoteBootstrapSessionActiveResponsePB) ProtoMessage() {}

func (x *CheckRemoteBootstrapSessionActiveResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckRemoteBootstrapSessionActiveResponsePB.ProtoReflect.Descriptor instead.
func (*CheckRemoteBootstrapSessionActiveResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{4}
}

func (x *CheckRemoteBootstrapSessionActiveResponsePB) GetSessionIsActive() bool {
	if x != nil && x.SessionIsActive != nil {
		return *x.SessionIsActive
	}
	return false
}

// A "union" type that allows the same RPC call to fetch different types of
// data (data blocks or log files).
type DataIdPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicator whether it's a block or log segment id.
	Type            *DataIdPB_IdType `protobuf:"varint,1,req,name=type,enum=yb.tserver.DataIdPB_IdType" json:"type,omitempty"`
	WalSegmentSeqno *uint64          `protobuf:"varint,3,opt,name=wal_segment_seqno,json=walSegmentSeqno" json:"wal_segment_seqno,omitempty"` // To fetch a log segment.
	FileName        *string          `protobuf:"bytes,4,opt,name=file_name,json=fileName" json:"file_name,omitempty"`                         // To fetch a RocksDB file.
	SnapshotId      []byte           `protobuf:"bytes,5,opt,name=snapshot_id,json=snapshotId" json:"snapshot_id,omitempty"`                   // To fetch a Snapshot file.
}

func (x *DataIdPB) Reset() {
	*x = DataIdPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataIdPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataIdPB) ProtoMessage() {}

func (x *DataIdPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataIdPB.ProtoReflect.Descriptor instead.
func (*DataIdPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{5}
}

func (x *DataIdPB) GetType() DataIdPB_IdType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return DataIdPB_UNKNOWN
}

func (x *DataIdPB) GetWalSegmentSeqno() uint64 {
	if x != nil && x.WalSegmentSeqno != nil {
		return *x.WalSegmentSeqno
	}
	return 0
}

func (x *DataIdPB) GetFileName() string {
	if x != nil && x.FileName != nil {
		return *x.FileName
	}
	return ""
}

func (x *DataIdPB) GetSnapshotId() []byte {
	if x != nil {
		return x.SnapshotId
	}
	return nil
}

type FetchDataRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Valid Session ID returned by a BeginRemoteBootstrapSession() RPC call.
	SessionId []byte `protobuf:"bytes,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// The server will use this ID to determine the key and type of data
	// that was requested.
	DataId *DataIdPB `protobuf:"bytes,2,req,name=data_id,json=dataId" json:"data_id,omitempty"`
	// Offset into data to start reading from.
	// If not specified, the server will send the data from offset 0.
	Offset *uint64 `protobuf:"varint,3,opt,name=offset,def=0" json:"offset,omitempty"`
	// Maximum length of the chunk of data to return.
	// If max_length is not specified, or if the server's max is less than the
	// requested max, the server will use its own max.
	MaxLength *int64 `protobuf:"varint,4,opt,name=max_length,json=maxLength,def=0" json:"max_length,omitempty"`
}

// Default values for FetchDataRequestPB fields.
const (
	Default_FetchDataRequestPB_Offset    = uint64(0)
	Default_FetchDataRequestPB_MaxLength = int64(0)
)

func (x *FetchDataRequestPB) Reset() {
	*x = FetchDataRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDataRequestPB) ProtoMessage() {}

func (x *FetchDataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDataRequestPB.ProtoReflect.Descriptor instead.
func (*FetchDataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{6}
}

func (x *FetchDataRequestPB) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *FetchDataRequestPB) GetDataId() *DataIdPB {
	if x != nil {
		return x.DataId
	}
	return nil
}

func (x *FetchDataRequestPB) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return Default_FetchDataRequestPB_Offset
}

func (x *FetchDataRequestPB) GetMaxLength() int64 {
	if x != nil && x.MaxLength != nil {
		return *x.MaxLength
	}
	return Default_FetchDataRequestPB_MaxLength
}

// A chunk of data (a slice of a block, file, etc).
type DataChunkPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Offset into the complete data block or file that 'data' starts at.
	Offset *uint64 `protobuf:"varint,1,req,name=offset" json:"offset,omitempty"`
	// Actual bytes of data from the data block, starting at 'offset'.
	Data []byte `protobuf:"bytes,2,req,name=data" json:"data,omitempty"`
	// CRC32C of the bytes contained in 'data'.
	Crc32 *uint32 `protobuf:"fixed32,3,req,name=crc32" json:"crc32,omitempty"`
	// Full length, in bytes, of the complete data block or file on the server.
	// The number of bytes returned in 'data' can certainly be less than this.
	TotalDataLength *int64 `protobuf:"varint,4,req,name=total_data_length,json=totalDataLength" json:"total_data_length,omitempty"`
}

func (x *DataChunkPB) Reset() {
	*x = DataChunkPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataChunkPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataChunkPB) ProtoMessage() {}

func (x *DataChunkPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataChunkPB.ProtoReflect.Descriptor instead.
func (*DataChunkPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{7}
}

func (x *DataChunkPB) GetOffset() uint64 {
	if x != nil && x.Offset != nil {
		return *x.Offset
	}
	return 0
}

func (x *DataChunkPB) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *DataChunkPB) GetCrc32() uint32 {
	if x != nil && x.Crc32 != nil {
		return *x.Crc32
	}
	return 0
}

func (x *DataChunkPB) GetTotalDataLength() int64 {
	if x != nil && x.TotalDataLength != nil {
		return *x.TotalDataLength
	}
	return 0
}

type FetchDataResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The server will automatically release the resources (i.e. close file, free
	// read buffers) for a given data resource after the last byte is read.
	// So, per-resource, chunks are optimized to be fetched in-order.
	Chunk *DataChunkPB `protobuf:"bytes,1,req,name=chunk" json:"chunk,omitempty"`
}

func (x *FetchDataResponsePB) Reset() {
	*x = FetchDataResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchDataResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchDataResponsePB) ProtoMessage() {}

func (x *FetchDataResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchDataResponsePB.ProtoReflect.Descriptor instead.
func (*FetchDataResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{8}
}

func (x *FetchDataResponsePB) GetChunk() *DataChunkPB {
	if x != nil {
		return x.Chunk
	}
	return nil
}

type EndRemoteBootstrapSessionRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId []byte `protobuf:"bytes,1,req,name=session_id,json=sessionId" json:"session_id,omitempty"`
	// Set to true if bootstrap is successful.
	IsSuccess *bool `protobuf:"varint,2,req,name=is_success,json=isSuccess" json:"is_success,omitempty"`
	// Client-provided error message. The server will log this error so that an
	// admin can identify when bad things are happening with remote bootstrap.
	Error *AppStatusPB `protobuf:"bytes,3,opt,name=error" json:"error,omitempty"`
	// True if we should not remove session on this request, and it will be removed by upcoming
	// RemoveRemoteBootstrapSession.
	KeepSession *bool `protobuf:"varint,4,opt,name=keep_session,json=keepSession,def=0" json:"keep_session,omitempty"`
}

// Default values for EndRemoteBootstrapSessionRequestPB fields.
const (
	Default_EndRemoteBootstrapSessionRequestPB_KeepSession = bool(false)
)

func (x *EndRemoteBootstrapSessionRequestPB) Reset() {
	*x = EndRemoteBootstrapSessionRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndRemoteBootstrapSessionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRemoteBootstrapSessionRequestPB) ProtoMessage() {}

func (x *EndRemoteBootstrapSessionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRemoteBootstrapSessionRequestPB.ProtoReflect.Descriptor instead.
func (*EndRemoteBootstrapSessionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{9}
}

func (x *EndRemoteBootstrapSessionRequestPB) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

func (x *EndRemoteBootstrapSessionRequestPB) GetIsSuccess() bool {
	if x != nil && x.IsSuccess != nil {
		return *x.IsSuccess
	}
	return false
}

func (x *EndRemoteBootstrapSessionRequestPB) GetError() *AppStatusPB {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *EndRemoteBootstrapSessionRequestPB) GetKeepSession() bool {
	if x != nil && x.KeepSession != nil {
		return *x.KeepSession
	}
	return Default_EndRemoteBootstrapSessionRequestPB_KeepSession
}

type EndRemoteBootstrapSessionResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionKept *bool `protobuf:"varint,1,opt,name=session_kept,json=sessionKept,def=0" json:"session_kept,omitempty"`
}

// Default values for EndRemoteBootstrapSessionResponsePB fields.
const (
	Default_EndRemoteBootstrapSessionResponsePB_SessionKept = bool(false)
)

func (x *EndRemoteBootstrapSessionResponsePB) Reset() {
	*x = EndRemoteBootstrapSessionResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EndRemoteBootstrapSessionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndRemoteBootstrapSessionResponsePB) ProtoMessage() {}

func (x *EndRemoteBootstrapSessionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndRemoteBootstrapSessionResponsePB.ProtoReflect.Descriptor instead.
func (*EndRemoteBootstrapSessionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{10}
}

func (x *EndRemoteBootstrapSessionResponsePB) GetSessionKept() bool {
	if x != nil && x.SessionKept != nil {
		return *x.SessionKept
	}
	return Default_EndRemoteBootstrapSessionResponsePB_SessionKept
}

type RemoveSessionRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId []byte `protobuf:"bytes,1,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
}

func (x *RemoveSessionRequestPB) Reset() {
	*x = RemoveSessionRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSessionRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSessionRequestPB) ProtoMessage() {}

func (x *RemoveSessionRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSessionRequestPB.ProtoReflect.Descriptor instead.
func (*RemoveSessionRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{11}
}

func (x *RemoveSessionRequestPB) GetSessionId() []byte {
	if x != nil {
		return x.SessionId
	}
	return nil
}

type RemoveSessionResponsePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveSessionResponsePB) Reset() {
	*x = RemoveSessionResponsePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveSessionResponsePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveSessionResponsePB) ProtoMessage() {}

func (x *RemoveSessionResponsePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tserver_remote_bootstrap_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveSessionResponsePB.ProtoReflect.Descriptor instead.
func (*RemoveSessionResponsePB) Descriptor() ([]byte, []int) {
	return file_yb_tserver_remote_bootstrap_proto_rawDescGZIP(), []int{12}
}

var file_yb_tserver_remote_bootstrap_proto_extTypes = []protoimpl.ExtensionInfo{
	{
		ExtendedType:  (*ErrorStatusPB)(nil),
		ExtensionType: (*RemoteBootstrapErrorPB)(nil),
		Field:         102,
		Name:          "yb.tserver.RemoteBootstrapErrorPB.remote_bootstrap_error_ext",
		Tag:           "bytes,102,opt,name=remote_bootstrap_error_ext",
		Filename:      "yb/tserver/remote_bootstrap.proto",
	},
}

// Extension fields to ErrorStatusPB.
var (
	// optional yb.tserver.RemoteBootstrapErrorPB remote_bootstrap_error_ext = 102;
	E_RemoteBootstrapErrorPB_RemoteBootstrapErrorExt = &file_yb_tserver_remote_bootstrap_proto_extTypes[0]
)

var File_yb_tserver_remote_bootstrap_proto protoreflect.FileDescriptor

var file_yb_tserver_remote_bootstrap_proto_rawDesc = []byte{
	0x0a, 0x21, 0x79, 0x62, 0x2f, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x1a,
	0x1d, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x77, 0x69, 0x72, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x25,
	0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x2f, 0x63, 0x6f, 0x6e,
	0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x79, 0x62, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x72, 0x70,
	0x63, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc7, 0x03, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x12, 0x4a, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42, 0x2e, 0x43, 0x6f, 0x64,
	0x65, 0x3a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x70, 0x70, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0xbf, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54,
	0x41, 0x42, 0x4c, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x03, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46,
	0x4f, 0x55, 0x4e, 0x44, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x41, 0x4c, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x05, 0x12, 0x24, 0x0a, 0x20, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52, 0x45, 0x4d,
	0x4f, 0x54, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x54, 0x53, 0x54, 0x52, 0x41, 0x50, 0x5f, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4f, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x07, 0x12, 0x1a, 0x0a, 0x16, 0x52, 0x4f, 0x43, 0x4b, 0x53, 0x44, 0x42,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x08, 0x32, 0x76, 0x0a, 0x1a, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x62, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x65, 0x78, 0x74, 0x12,
	0x15, 0x2e, 0x79, 0x62, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x79,
	0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65,
	0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x50, 0x42,
	0x52, 0x17, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x45, 0x78, 0x74, 0x22, 0x6a, 0x0a, 0x24, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x5f, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x22, 0xa2, 0x03, 0x0a, 0x25, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3d,
	0x0a, 0x1b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x18, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x47, 0x0a,
	0x0a, 0x73, 0x75, 0x70, 0x65, 0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x02, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2e, 0x52, 0x61,
	0x66, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x53, 0x75,
	0x70, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x50, 0x42, 0x52, 0x0a, 0x73, 0x75, 0x70, 0x65,
	0x72, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x41, 0x0a, 0x1d, 0x44, 0x45, 0x50, 0x52, 0x45, 0x43,
	0x41, 0x54, 0x45, 0x44, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x1a, 0x44,
	0x45, 0x50, 0x52, 0x45, 0x43, 0x41, 0x54, 0x45, 0x44, 0x57, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x6e, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x17, 0x66, 0x69, 0x72,
	0x73, 0x74, 0x5f, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x65, 0x71, 0x6e, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73,
	0x74, 0x57, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x6e, 0x6f,
	0x12, 0x58, 0x0a, 0x18, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75,
	0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x65, 0x6e, 0x73, 0x75, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x50, 0x42, 0x52, 0x16, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x69,
	0x74, 0x74, 0x65, 0x64, 0x43, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22, 0x70, 0x0a, 0x2a, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72,
	0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61,
	0x6c, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x22, 0x59, 0x0a, 0x2b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73,
	0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x02, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61,
	0x49, 0x64, 0x50, 0x42, 0x12, 0x2f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x50, 0x42, 0x2e, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x77, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x67,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x71, 0x6e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x77, 0x61, 0x6c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x71, 0x6e,
	0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x49, 0x64, 0x22,
	0x4b, 0x0a, 0x06, 0x49, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x4f, 0x47, 0x5f, 0x53, 0x45,
	0x47, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x4f, 0x43, 0x4b, 0x53,
	0x44, 0x42, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x4e, 0x41,
	0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x02,
	0x10, 0x03, 0x22, 0x9f, 0x01, 0x0a, 0x12, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x09, 0x73,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x07, 0x64, 0x61, 0x74, 0x61,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64, 0x50, 0x42, 0x52,
	0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x3a, 0x01, 0x30, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x3a, 0x01, 0x30, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0x7b, 0x0a, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e,
	0x6b, 0x50, 0x42, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x04, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x72, 0x63, 0x33, 0x32, 0x18, 0x03, 0x20, 0x02, 0x28, 0x07, 0x52, 0x05,
	0x63, 0x72, 0x63, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x04, 0x20, 0x02, 0x28, 0x03,
	0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x22, 0x44, 0x0a, 0x13, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x68, 0x75, 0x6e,
	0x6b, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x50, 0x42,
	0x52, 0x05, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x22, 0xb3, 0x01, 0x0a, 0x22, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x02, 0x28,
	0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62,
	0x2e, 0x41, 0x70, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x42, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0c, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73, 0x65,
	0x52, 0x0b, 0x6b, 0x65, 0x65, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a,
	0x23, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x6b, 0x65, 0x70, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05, 0x66, 0x61, 0x6c, 0x73,
	0x65, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x70, 0x74, 0x22, 0x37,
	0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x19, 0x0a, 0x17, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x32, 0xcb, 0x04, 0x0a, 0x16, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x82, 0x01,
	0x0a, 0x1b, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f,
	0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x2e,
	0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a,
	0x31, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x42, 0x65, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61,
	0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x50, 0x42, 0x12, 0x85, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x2e, 0x79, 0x62, 0x2e, 0x74,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x42, 0x1a, 0x37, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74,
	0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x4c, 0x0a, 0x09, 0x46, 0x65,
	0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x1f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x7c, 0x0a, 0x19, 0x45, 0x6e, 0x64, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74, 0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x2f, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x42, 0x6f, 0x6f, 0x74,
	0x73, 0x74, 0x72, 0x61, 0x70, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42, 0x12, 0x58, 0x0a, 0x0d, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65,
	0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x42, 0x1a, 0x23, 0x2e, 0x79, 0x62,
	0x2e, 0x74, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x50, 0x42,
	0x42, 0x10, 0x0a, 0x0e, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72,
}

var (
	file_yb_tserver_remote_bootstrap_proto_rawDescOnce sync.Once
	file_yb_tserver_remote_bootstrap_proto_rawDescData = file_yb_tserver_remote_bootstrap_proto_rawDesc
)

func file_yb_tserver_remote_bootstrap_proto_rawDescGZIP() []byte {
	file_yb_tserver_remote_bootstrap_proto_rawDescOnce.Do(func() {
		file_yb_tserver_remote_bootstrap_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_tserver_remote_bootstrap_proto_rawDescData)
	})
	return file_yb_tserver_remote_bootstrap_proto_rawDescData
}

var file_yb_tserver_remote_bootstrap_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_yb_tserver_remote_bootstrap_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_yb_tserver_remote_bootstrap_proto_goTypes = []interface{}{
	(RemoteBootstrapErrorPB_Code)(0),                    // 0: yb.tserver.RemoteBootstrapErrorPB.Code
	(DataIdPB_IdType)(0),                                // 1: yb.tserver.DataIdPB.IdType
	(*RemoteBootstrapErrorPB)(nil),                      // 2: yb.tserver.RemoteBootstrapErrorPB
	(*BeginRemoteBootstrapSessionRequestPB)(nil),        // 3: yb.tserver.BeginRemoteBootstrapSessionRequestPB
	(*BeginRemoteBootstrapSessionResponsePB)(nil),       // 4: yb.tserver.BeginRemoteBootstrapSessionResponsePB
	(*CheckRemoteBootstrapSessionActiveRequestPB)(nil),  // 5: yb.tserver.CheckRemoteBootstrapSessionActiveRequestPB
	(*CheckRemoteBootstrapSessionActiveResponsePB)(nil), // 6: yb.tserver.CheckRemoteBootstrapSessionActiveResponsePB
	(*DataIdPB)(nil),                                    // 7: yb.tserver.DataIdPB
	(*FetchDataRequestPB)(nil),                          // 8: yb.tserver.FetchDataRequestPB
	(*DataChunkPB)(nil),                                 // 9: yb.tserver.DataChunkPB
	(*FetchDataResponsePB)(nil),                         // 10: yb.tserver.FetchDataResponsePB
	(*EndRemoteBootstrapSessionRequestPB)(nil),          // 11: yb.tserver.EndRemoteBootstrapSessionRequestPB
	(*EndRemoteBootstrapSessionResponsePB)(nil),         // 12: yb.tserver.EndRemoteBootstrapSessionResponsePB
	(*RemoveSessionRequestPB)(nil),                      // 13: yb.tserver.RemoveSessionRequestPB
	(*RemoveSessionResponsePB)(nil),                     // 14: yb.tserver.RemoveSessionResponsePB
	(*AppStatusPB)(nil),                                 // 15: yb.AppStatusPB
	(*RaftGroupReplicaSuperBlockPB)(nil),                // 16: yb.tablet.RaftGroupReplicaSuperBlockPB
	(*ConsensusStatePB)(nil),                            // 17: yb.consensus.ConsensusStatePB
	(*ErrorStatusPB)(nil),                               // 18: yb.rpc.ErrorStatusPB
}
var file_yb_tserver_remote_bootstrap_proto_depIdxs = []int32{
	0,  // 0: yb.tserver.RemoteBootstrapErrorPB.code:type_name -> yb.tserver.RemoteBootstrapErrorPB.Code
	15, // 1: yb.tserver.RemoteBootstrapErrorPB.status:type_name -> yb.AppStatusPB
	16, // 2: yb.tserver.BeginRemoteBootstrapSessionResponsePB.superblock:type_name -> yb.tablet.RaftGroupReplicaSuperBlockPB
	17, // 3: yb.tserver.BeginRemoteBootstrapSessionResponsePB.initial_committed_cstate:type_name -> yb.consensus.ConsensusStatePB
	1,  // 4: yb.tserver.DataIdPB.type:type_name -> yb.tserver.DataIdPB.IdType
	7,  // 5: yb.tserver.FetchDataRequestPB.data_id:type_name -> yb.tserver.DataIdPB
	9,  // 6: yb.tserver.FetchDataResponsePB.chunk:type_name -> yb.tserver.DataChunkPB
	15, // 7: yb.tserver.EndRemoteBootstrapSessionRequestPB.error:type_name -> yb.AppStatusPB
	18, // 8: yb.tserver.RemoteBootstrapErrorPB.remote_bootstrap_error_ext:extendee -> yb.rpc.ErrorStatusPB
	2,  // 9: yb.tserver.RemoteBootstrapErrorPB.remote_bootstrap_error_ext:type_name -> yb.tserver.RemoteBootstrapErrorPB
	3,  // 10: yb.tserver.RemoteBootstrapService.BeginRemoteBootstrapSession:input_type -> yb.tserver.BeginRemoteBootstrapSessionRequestPB
	5,  // 11: yb.tserver.RemoteBootstrapService.CheckSessionActive:input_type -> yb.tserver.CheckRemoteBootstrapSessionActiveRequestPB
	8,  // 12: yb.tserver.RemoteBootstrapService.FetchData:input_type -> yb.tserver.FetchDataRequestPB
	11, // 13: yb.tserver.RemoteBootstrapService.EndRemoteBootstrapSession:input_type -> yb.tserver.EndRemoteBootstrapSessionRequestPB
	13, // 14: yb.tserver.RemoteBootstrapService.RemoveSession:input_type -> yb.tserver.RemoveSessionRequestPB
	4,  // 15: yb.tserver.RemoteBootstrapService.BeginRemoteBootstrapSession:output_type -> yb.tserver.BeginRemoteBootstrapSessionResponsePB
	6,  // 16: yb.tserver.RemoteBootstrapService.CheckSessionActive:output_type -> yb.tserver.CheckRemoteBootstrapSessionActiveResponsePB
	10, // 17: yb.tserver.RemoteBootstrapService.FetchData:output_type -> yb.tserver.FetchDataResponsePB
	12, // 18: yb.tserver.RemoteBootstrapService.EndRemoteBootstrapSession:output_type -> yb.tserver.EndRemoteBootstrapSessionResponsePB
	14, // 19: yb.tserver.RemoteBootstrapService.RemoveSession:output_type -> yb.tserver.RemoveSessionResponsePB
	15, // [15:20] is the sub-list for method output_type
	10, // [10:15] is the sub-list for method input_type
	9,  // [9:10] is the sub-list for extension type_name
	8,  // [8:9] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_yb_tserver_remote_bootstrap_proto_init() }
func file_yb_tserver_remote_bootstrap_proto_init() {
	if File_yb_tserver_remote_bootstrap_proto != nil {
		return
	}
	file_yb_common_wire_protocol_proto_init()
	file_yb_consensus_consensus_metadata_proto_init()
	file_yb_rpc_rpc_header_proto_init()
	file_yb_tablet_tablet_metadata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_tserver_remote_bootstrap_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteBootstrapErrorPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginRemoteBootstrapSessionRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BeginRemoteBootstrapSessionResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRemoteBootstrapSessionActiveRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckRemoteBootstrapSessionActiveResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataIdPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDataRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataChunkPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchDataResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndRemoteBootstrapSessionRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EndRemoteBootstrapSessionResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSessionRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tserver_remote_bootstrap_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveSessionResponsePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_tserver_remote_bootstrap_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   13,
			NumExtensions: 1,
			NumServices:   1,
		},
		GoTypes:           file_yb_tserver_remote_bootstrap_proto_goTypes,
		DependencyIndexes: file_yb_tserver_remote_bootstrap_proto_depIdxs,
		EnumInfos:         file_yb_tserver_remote_bootstrap_proto_enumTypes,
		MessageInfos:      file_yb_tserver_remote_bootstrap_proto_msgTypes,
		ExtensionInfos:    file_yb_tserver_remote_bootstrap_proto_extTypes,
	}.Build()
	File_yb_tserver_remote_bootstrap_proto = out.File
	file_yb_tserver_remote_bootstrap_proto_rawDesc = nil
	file_yb_tserver_remote_bootstrap_proto_goTypes = nil
	file_yb_tserver_remote_bootstrap_proto_depIdxs = nil
}
