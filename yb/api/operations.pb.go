// Copyright (c) YugaByte, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.  You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software distributed under the License
// is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
// or implied.  See the License for the specific language governing permissions and limitations
// under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: yb/tablet/operations.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TransactionStatePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TransactionId []byte             `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
	Status        *TransactionStatus `protobuf:"varint,2,opt,name=status,enum=yb.TransactionStatus" json:"status,omitempty"`
	// tablets has different meaning, depending on status:
	// COMMITTED - list of involved tablets
	// APPLYING - single entry, status tablet of this transaction
	// APPLIED - single entry, tablet that applied this transaction
	// Not used is other cases.
	Tablets [][]byte `protobuf:"bytes,3,rep,name=tablets" json:"tablets,omitempty"`
	// Relevant only in SEALED state.
	// Number of batches that should be replicated at appropriate tablet to interpret transaction as
	// committed.
	TabletBatches []int64 `protobuf:"varint,5,rep,name=tablet_batches,json=tabletBatches" json:"tablet_batches,omitempty"`
	// Relevant only in APPLYING state.
	CommitHybridTime *uint64 `protobuf:"fixed64,4,opt,name=commit_hybrid_time,json=commitHybridTime" json:"commit_hybrid_time,omitempty"`
	// Relevant only in CLEANUP and APPLYING status, true when we perform request
	// for a transaction that was previously sealed.
	Sealed *bool `protobuf:"varint,6,opt,name=sealed" json:"sealed,omitempty"`
	// Set of subtransaction IDs which are aborted.
	Aborted *AbortedSubTransactionSetPB `protobuf:"bytes,7,opt,name=aborted" json:"aborted,omitempty"`
}

func (x *TransactionStatePB) Reset() {
	*x = TransactionStatePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tablet_operations_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionStatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionStatePB) ProtoMessage() {}

func (x *TransactionStatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionStatePB.ProtoReflect.Descriptor instead.
func (*TransactionStatePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{0}
}

func (x *TransactionStatePB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *TransactionStatePB) GetStatus() TransactionStatus {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return TransactionStatus_CREATED
}

func (x *TransactionStatePB) GetTablets() [][]byte {
	if x != nil {
		return x.Tablets
	}
	return nil
}

func (x *TransactionStatePB) GetTabletBatches() []int64 {
	if x != nil {
		return x.TabletBatches
	}
	return nil
}

func (x *TransactionStatePB) GetCommitHybridTime() uint64 {
	if x != nil && x.CommitHybridTime != nil {
		return *x.CommitHybridTime
	}
	return 0
}

func (x *TransactionStatePB) GetSealed() bool {
	if x != nil && x.Sealed != nil {
		return *x.Sealed
	}
	return false
}

func (x *TransactionStatePB) GetAborted() *AbortedSubTransactionSetPB {
	if x != nil {
		return x.Aborted
	}
	return nil
}

type TruncatePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TruncatePB) Reset() {
	*x = TruncatePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tablet_operations_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TruncatePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TruncatePB) ProtoMessage() {}

func (x *TruncatePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TruncatePB.ProtoReflect.Descriptor instead.
func (*TruncatePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{1}
}

type WritePB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UnusedTabletId []byte                `protobuf:"bytes,1,opt,name=unused_tablet_id,json=unusedTabletId" json:"unused_tablet_id,omitempty"`
	WriteBatch     *KeyValueWriteBatchPB `protobuf:"bytes,7,opt,name=write_batch,json=writeBatch" json:"write_batch,omitempty"`
	// Use 2 int64 to represent UUID.
	ClientId1           *uint64 `protobuf:"fixed64,14,opt,name=client_id1,json=clientId1" json:"client_id1,omitempty"`
	ClientId2           *uint64 `protobuf:"fixed64,15,opt,name=client_id2,json=clientId2" json:"client_id2,omitempty"`
	RequestId           *int64  `protobuf:"varint,16,opt,name=request_id,json=requestId" json:"request_id,omitempty"`
	MinRunningRequestId *int64  `protobuf:"varint,17,opt,name=min_running_request_id,json=minRunningRequestId" json:"min_running_request_id,omitempty"`
	ExternalHybridTime  *uint64 `protobuf:"fixed64,19,opt,name=external_hybrid_time,json=externalHybridTime" json:"external_hybrid_time,omitempty"`
	BatchIdx            *uint64 `protobuf:"varint,20,opt,name=batch_idx,json=batchIdx" json:"batch_idx,omitempty"`
}

func (x *WritePB) Reset() {
	*x = WritePB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tablet_operations_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePB) ProtoMessage() {}

func (x *WritePB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePB.ProtoReflect.Descriptor instead.
func (*WritePB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{2}
}

func (x *WritePB) GetUnusedTabletId() []byte {
	if x != nil {
		return x.UnusedTabletId
	}
	return nil
}

func (x *WritePB) GetWriteBatch() *KeyValueWriteBatchPB {
	if x != nil {
		return x.WriteBatch
	}
	return nil
}

func (x *WritePB) GetClientId1() uint64 {
	if x != nil && x.ClientId1 != nil {
		return *x.ClientId1
	}
	return 0
}

func (x *WritePB) GetClientId2() uint64 {
	if x != nil && x.ClientId2 != nil {
		return *x.ClientId2
	}
	return 0
}

func (x *WritePB) GetRequestId() int64 {
	if x != nil && x.RequestId != nil {
		return *x.RequestId
	}
	return 0
}

func (x *WritePB) GetMinRunningRequestId() int64 {
	if x != nil && x.MinRunningRequestId != nil {
		return *x.MinRunningRequestId
	}
	return 0
}

func (x *WritePB) GetExternalHybridTime() uint64 {
	if x != nil && x.ExternalHybridTime != nil {
		return *x.ExternalHybridTime
	}
	return 0
}

func (x *WritePB) GetBatchIdx() uint64 {
	if x != nil && x.BatchIdx != nil {
		return *x.BatchIdx
	}
	return 0
}

type ChangeMetadataRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid []byte `protobuf:"bytes,5,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	TabletId []byte `protobuf:"bytes,1,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	// TODO: Replace with the table descriptor
	// (Schema, Column IDs, Column Attributes)
	Schema               *SchemaPB      `protobuf:"bytes,2,opt,name=schema" json:"schema,omitempty"`
	Indexes              []*IndexInfoPB `protobuf:"bytes,7,rep,name=indexes" json:"indexes,omitempty"`
	SchemaVersion        *uint32        `protobuf:"varint,3,opt,name=schema_version,json=schemaVersion" json:"schema_version,omitempty"`
	NewTableName         *string        `protobuf:"bytes,4,opt,name=new_table_name,json=newTableName" json:"new_table_name,omitempty"`
	PropagatedHybridTime *uint64        `protobuf:"fixed64,6,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	AddTable             *TableInfoPB   `protobuf:"bytes,8,opt,name=add_table,json=addTable" json:"add_table,omitempty"`
	WalRetentionSecs     *uint32        `protobuf:"varint,9,opt,name=wal_retention_secs,json=walRetentionSecs" json:"wal_retention_secs,omitempty"`
	RemoveTableId        []byte         `protobuf:"bytes,10,opt,name=remove_table_id,json=removeTableId" json:"remove_table_id,omitempty"`
	// Note that we don't use the value of this and just check has_mark_backfill_done.
	MarkBackfillDone *bool `protobuf:"varint,11,opt,name=mark_backfill_done,json=markBackfillDone" json:"mark_backfill_done,omitempty"`
	// Used for alter schema on a non-primary table (e.g. colocated user table).
	AlterTableId []byte `protobuf:"bytes,12,opt,name=alter_table_id,json=alterTableId" json:"alter_table_id,omitempty"`
	// Used to update schema of a colocated user table upon backfill completion.
	BackfillDoneTableId []byte `protobuf:"bytes,13,opt,name=backfill_done_table_id,json=backfillDoneTableId" json:"backfill_done_table_id,omitempty"`
	// Transactions will be aborted except the one with this id which triggered the AlterTable.
	TransactionId []byte `protobuf:"bytes,14,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"` // 16 byte uuid
	// Used for AlterTable to determine if active transactions on the tablet needs to be aborted.
	ShouldAbortActiveTxns *bool `protobuf:"varint,16,opt,name=should_abort_active_txns,json=shouldAbortActiveTxns,def=0" json:"should_abort_active_txns,omitempty"`
}

// Default values for ChangeMetadataRequestPB fields.
const (
	Default_ChangeMetadataRequestPB_ShouldAbortActiveTxns = bool(false)
)

func (x *ChangeMetadataRequestPB) Reset() {
	*x = ChangeMetadataRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tablet_operations_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeMetadataRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeMetadataRequestPB) ProtoMessage() {}

func (x *ChangeMetadataRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeMetadataRequestPB.ProtoReflect.Descriptor instead.
func (*ChangeMetadataRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{3}
}

func (x *ChangeMetadataRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetSchema() *SchemaPB {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetIndexes() []*IndexInfoPB {
	if x != nil {
		return x.Indexes
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetSchemaVersion() uint32 {
	if x != nil && x.SchemaVersion != nil {
		return *x.SchemaVersion
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetNewTableName() string {
	if x != nil && x.NewTableName != nil {
		return *x.NewTableName
	}
	return ""
}

func (x *ChangeMetadataRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetAddTable() *TableInfoPB {
	if x != nil {
		return x.AddTable
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetWalRetentionSecs() uint32 {
	if x != nil && x.WalRetentionSecs != nil {
		return *x.WalRetentionSecs
	}
	return 0
}

func (x *ChangeMetadataRequestPB) GetRemoveTableId() []byte {
	if x != nil {
		return x.RemoveTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetMarkBackfillDone() bool {
	if x != nil && x.MarkBackfillDone != nil {
		return *x.MarkBackfillDone
	}
	return false
}

func (x *ChangeMetadataRequestPB) GetAlterTableId() []byte {
	if x != nil {
		return x.AlterTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetBackfillDoneTableId() []byte {
	if x != nil {
		return x.BackfillDoneTableId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetTransactionId() []byte {
	if x != nil {
		return x.TransactionId
	}
	return nil
}

func (x *ChangeMetadataRequestPB) GetShouldAbortActiveTxns() bool {
	if x != nil && x.ShouldAbortActiveTxns != nil {
		return *x.ShouldAbortActiveTxns
	}
	return Default_ChangeMetadataRequestPB_ShouldAbortActiveTxns
}

type SplitTabletRequestPB struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UUID of server this request is addressed to.
	DestUuid             []byte  `protobuf:"bytes,1,opt,name=dest_uuid,json=destUuid" json:"dest_uuid,omitempty"`
	PropagatedHybridTime *uint64 `protobuf:"fixed64,2,opt,name=propagated_hybrid_time,json=propagatedHybridTime" json:"propagated_hybrid_time,omitempty"`
	TabletId             []byte  `protobuf:"bytes,3,req,name=tablet_id,json=tabletId" json:"tablet_id,omitempty"`
	NewTablet1Id         []byte  `protobuf:"bytes,4,req,name=new_tablet1_id,json=newTablet1Id" json:"new_tablet1_id,omitempty"`
	NewTablet2Id         []byte  `protobuf:"bytes,5,req,name=new_tablet2_id,json=newTablet2Id" json:"new_tablet2_id,omitempty"`
	SplitPartitionKey    []byte  `protobuf:"bytes,6,req,name=split_partition_key,json=splitPartitionKey" json:"split_partition_key,omitempty"`
	SplitEncodedKey      []byte  `protobuf:"bytes,7,req,name=split_encoded_key,json=splitEncodedKey" json:"split_encoded_key,omitempty"`
}

func (x *SplitTabletRequestPB) Reset() {
	*x = SplitTabletRequestPB{}
	if protoimpl.UnsafeEnabled {
		mi := &file_yb_tablet_operations_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplitTabletRequestPB) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplitTabletRequestPB) ProtoMessage() {}

func (x *SplitTabletRequestPB) ProtoReflect() protoreflect.Message {
	mi := &file_yb_tablet_operations_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplitTabletRequestPB.ProtoReflect.Descriptor instead.
func (*SplitTabletRequestPB) Descriptor() ([]byte, []int) {
	return file_yb_tablet_operations_proto_rawDescGZIP(), []int{4}
}

func (x *SplitTabletRequestPB) GetDestUuid() []byte {
	if x != nil {
		return x.DestUuid
	}
	return nil
}

func (x *SplitTabletRequestPB) GetPropagatedHybridTime() uint64 {
	if x != nil && x.PropagatedHybridTime != nil {
		return *x.PropagatedHybridTime
	}
	return 0
}

func (x *SplitTabletRequestPB) GetTabletId() []byte {
	if x != nil {
		return x.TabletId
	}
	return nil
}

func (x *SplitTabletRequestPB) GetNewTablet1Id() []byte {
	if x != nil {
		return x.NewTablet1Id
	}
	return nil
}

func (x *SplitTabletRequestPB) GetNewTablet2Id() []byte {
	if x != nil {
		return x.NewTablet2Id
	}
	return nil
}

func (x *SplitTabletRequestPB) GetSplitPartitionKey() []byte {
	if x != nil {
		return x.SplitPartitionKey
	}
	return nil
}

func (x *SplitTabletRequestPB) GetSplitEncodedKey() []byte {
	if x != nil {
		return x.SplitEncodedKey
	}
	return nil
}

var File_yb_tablet_operations_proto protoreflect.FileDescriptor

var file_yb_tablet_operations_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x79, 0x62,
	0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x1a, 0x16, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x79, 0x62, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x79, 0x62,
	0x2f, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2f, 0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x79, 0x62, 0x2f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x2f, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xab, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x50, 0x42, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x79, 0x62, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x07, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x74, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x42, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x12, 0x2c, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x68, 0x79, 0x62, 0x72,
	0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x06, 0x52, 0x10, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x73, 0x65, 0x61, 0x6c, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x75, 0x62, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x50, 0x42, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x22, 0x0c, 0x0a, 0x0a, 0x54, 0x72, 0x75, 0x6e, 0x63, 0x61, 0x74, 0x65, 0x50, 0x42, 0x22,
	0xd5, 0x02, 0x0a, 0x07, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x42, 0x12, 0x28, 0x0a, 0x10, 0x75,
	0x6e, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x75, 0x6e, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x62, 0x2e,
	0x64, 0x6f, 0x63, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x42, 0x52, 0x0a, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x31, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x31, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x69, 0x64, 0x32, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x16, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x75, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x13, 0x6d, 0x69, 0x6e, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x06, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x74, 0x63, 0x68, 0x5f, 0x69, 0x64, 0x78, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x62,
	0x61, 0x74, 0x63, 0x68, 0x49, 0x64, 0x78, 0x22, 0xa2, 0x05, 0x0a, 0x17, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x79, 0x62, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x42, 0x52, 0x06, 0x73, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x12, 0x29, 0x0a, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x79, 0x62, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x07, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x65, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6e,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x70,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f,
	0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79, 0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x33, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
	0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x42, 0x52, 0x08, 0x61, 0x64,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x77, 0x61, 0x6c, 0x5f, 0x72, 0x65,
	0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x65, 0x63, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x77, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x65, 0x63, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x72,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12,
	0x6d, 0x61, 0x72, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x61, 0x72, 0x6b, 0x42, 0x61,
	0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x6c,
	0x74, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x33, 0x0a, 0x16, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x13, 0x62, 0x61, 0x63, 0x6b, 0x66, 0x69, 0x6c, 0x6c, 0x44, 0x6f, 0x6e, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0d, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x18,
	0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x61, 0x62, 0x6f, 0x72, 0x74, 0x5f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x74, 0x78, 0x6e, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x3a, 0x05,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x15, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x54, 0x78, 0x6e, 0x73, 0x22, 0xae, 0x02, 0x0a,
	0x14, 0x53, 0x70, 0x6c, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x50, 0x42, 0x12, 0x1b, 0x0a, 0x09, 0x64, 0x65, 0x73, 0x74, 0x5f, 0x75, 0x75,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x64, 0x65, 0x73, 0x74, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x68, 0x79, 0x62, 0x72, 0x69, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x06, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x65, 0x64, 0x48, 0x79,
	0x62, 0x72, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x74, 0x31, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x6e,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x31, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6e,
	0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x32, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20,
	0x02, 0x28, 0x0c, 0x52, 0x0c, 0x6e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x74, 0x32, 0x49,
	0x64, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x11,
	0x73, 0x70, 0x6c, 0x69, 0x74, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x70, 0x6c, 0x69, 0x74, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64,
	0x65, 0x64, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x70,
	0x6c, 0x69, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x42, 0x0f, 0x0a,
	0x0d, 0x6f, 0x72, 0x67, 0x2e, 0x79, 0x62, 0x2e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x74,
}

var (
	file_yb_tablet_operations_proto_rawDescOnce sync.Once
	file_yb_tablet_operations_proto_rawDescData = file_yb_tablet_operations_proto_rawDesc
)

func file_yb_tablet_operations_proto_rawDescGZIP() []byte {
	file_yb_tablet_operations_proto_rawDescOnce.Do(func() {
		file_yb_tablet_operations_proto_rawDescData = protoimpl.X.CompressGZIP(file_yb_tablet_operations_proto_rawDescData)
	})
	return file_yb_tablet_operations_proto_rawDescData
}

var file_yb_tablet_operations_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_yb_tablet_operations_proto_goTypes = []interface{}{
	(*TransactionStatePB)(nil),         // 0: yb.tablet.TransactionStatePB
	(*TruncatePB)(nil),                 // 1: yb.tablet.TruncatePB
	(*WritePB)(nil),                    // 2: yb.tablet.WritePB
	(*ChangeMetadataRequestPB)(nil),    // 3: yb.tablet.ChangeMetadataRequestPB
	(*SplitTabletRequestPB)(nil),       // 4: yb.tablet.SplitTabletRequestPB
	(TransactionStatus)(0),             // 5: yb.TransactionStatus
	(*AbortedSubTransactionSetPB)(nil), // 6: yb.AbortedSubTransactionSetPB
	(*KeyValueWriteBatchPB)(nil),       // 7: yb.docdb.KeyValueWriteBatchPB
	(*SchemaPB)(nil),                   // 8: yb.SchemaPB
	(*IndexInfoPB)(nil),                // 9: yb.IndexInfoPB
	(*TableInfoPB)(nil),                // 10: yb.tablet.TableInfoPB
}
var file_yb_tablet_operations_proto_depIdxs = []int32{
	5,  // 0: yb.tablet.TransactionStatePB.status:type_name -> yb.TransactionStatus
	6,  // 1: yb.tablet.TransactionStatePB.aborted:type_name -> yb.AbortedSubTransactionSetPB
	7,  // 2: yb.tablet.WritePB.write_batch:type_name -> yb.docdb.KeyValueWriteBatchPB
	8,  // 3: yb.tablet.ChangeMetadataRequestPB.schema:type_name -> yb.SchemaPB
	9,  // 4: yb.tablet.ChangeMetadataRequestPB.indexes:type_name -> yb.IndexInfoPB
	10, // 5: yb.tablet.ChangeMetadataRequestPB.add_table:type_name -> yb.tablet.TableInfoPB
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_yb_tablet_operations_proto_init() }
func file_yb_tablet_operations_proto_init() {
	if File_yb_tablet_operations_proto != nil {
		return
	}
	file_yb_common_common_proto_init()
	file_yb_common_transaction_proto_init()
	file_yb_docdb_docdb_proto_init()
	file_yb_tablet_tablet_metadata_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_yb_tablet_operations_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionStatePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tablet_operations_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TruncatePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tablet_operations_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tablet_operations_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeMetadataRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_yb_tablet_operations_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplitTabletRequestPB); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_yb_tablet_operations_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_yb_tablet_operations_proto_goTypes,
		DependencyIndexes: file_yb_tablet_operations_proto_depIdxs,
		MessageInfos:      file_yb_tablet_operations_proto_msgTypes,
	}.Build()
	File_yb_tablet_operations_proto = out.File
	file_yb_tablet_operations_proto_rawDesc = nil
	file_yb_tablet_operations_proto_goTypes = nil
	file_yb_tablet_operations_proto_depIdxs = nil
}
